Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.get_index_type", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/strings", "reference/expressions/struct", "reference/expressions/timeseries", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/strings", "reference/series/struct", "reference/series/timeseries", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/strings.rst", "reference/expressions/struct.rst", "reference/expressions/timeseries.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/strings.rst", "reference/series/struct.rst", "reference/series/timeseries.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.get_index_type", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.internals.dataframe.groupby.GroupBy.__iter__", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.all", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "Meta", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.all", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.count", "polars.internals.lazyframe.groupby.LazyGroupBy.first", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.last", "polars.internals.lazyframe.groupby.LazyGroupBy.max", "polars.internals.lazyframe.groupby.LazyGroupBy.mean", "polars.internals.lazyframe.groupby.LazyGroupBy.median", "polars.internals.lazyframe.groupby.LazyGroupBy.min", "polars.internals.lazyframe.groupby.LazyGroupBy.n_unique", "polars.internals.lazyframe.groupby.LazyGroupBy.quantile", "polars.internals.lazyframe.groupby.LazyGroupBy.sum", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 85, 94, 112, 122, 125, 126, 223, 241, 253, 547, 623], "refer": [0, 28, 96, 97, 100, 130, 241, 391, 413, 472, 547, 816, 880, 918], "input": [0, 59, 87, 96, 97, 100, 137, 148, 176, 190, 196, 218, 221, 241, 353, 387, 398, 407, 443, 495, 497, 499, 500, 502, 513, 514, 522, 523, 526, 535, 547, 556, 568, 575, 600, 607, 617, 621, 639, 796, 798, 918], "output": [0, 26, 28, 30, 31, 69, 100, 116, 126, 149, 150, 161, 171, 178, 187, 190, 214, 218, 241, 249, 253, 389, 390, 397, 490, 495, 503, 522, 533, 547, 556, 576, 577, 586, 590, 591, 600, 617, 620, 623, 639, 648, 906, 918], "seri": [0, 1, 21, 50, 60, 61, 62, 63, 64, 67, 68, 69, 84, 86, 89, 94, 115, 116, 118, 122, 126, 133, 141, 143, 145, 146, 151, 154, 155, 157, 159, 167, 168, 172, 183, 184, 198, 202, 207, 208, 222, 241, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 265, 266, 267, 268, 273, 276, 277, 284, 285, 288, 289, 290, 293, 299, 300, 304, 305, 317, 319, 321, 324, 327, 329, 331, 334, 338, 339, 341, 344, 347, 355, 356, 362, 366, 368, 370, 371, 372, 373, 374, 376, 377, 378, 388, 389, 409, 413, 414, 415, 416, 417, 419, 431, 432, 435, 438, 439, 446, 461, 466, 472, 476, 481, 482, 483, 484, 489, 495, 496, 498, 501, 504, 506, 507, 508, 514, 515, 517, 519, 521, 522, 523, 524, 525, 526, 527, 530, 531, 532, 534, 535, 536, 537, 538, 539, 547, 556, 572, 617, 622, 639, 910, 912, 914, 917, 921, 922, 923], "datafram": [0, 1, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 48, 50, 59, 60, 61, 62, 63, 64, 66, 67, 68, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 114, 116, 117, 239, 240, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 286, 287, 290, 291, 292, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 519, 522, 523, 524, 525, 526, 527, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 547, 556, 562, 564, 568, 569, 572, 573, 576, 577, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 594, 595, 598, 600, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639, 647, 668, 686, 695, 710, 711, 861, 864, 876, 877, 887, 896, 897, 906, 918], "lazyfram": [0, 1, 47, 49, 59, 60, 61, 62, 63, 66, 67, 107, 108, 109, 110, 111, 112, 114, 118, 165, 177, 241, 290, 359, 547, 556, 638, 924], "express": [0, 64, 66, 69, 116, 118, 119, 126, 137, 139, 141, 148, 174, 178, 186, 190, 196, 218, 221, 223, 241, 249, 250, 252, 253, 263, 270, 272, 290, 301, 302, 303, 306, 312, 314, 318, 335, 353, 356, 359, 366, 368, 372, 375, 380, 383, 388, 389, 390, 391, 395, 396, 397, 398, 407, 409, 410, 411, 416, 430, 431, 432, 434, 436, 441, 443, 447, 455, 456, 472, 478, 481, 487, 489, 492, 496, 497, 499, 500, 502, 503, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 521, 522, 523, 526, 528, 530, 531, 532, 533, 535, 536, 539, 546, 556, 562, 567, 568, 569, 572, 575, 594, 600, 602, 603, 604, 605, 607, 617, 618, 621, 623, 639, 666, 668, 699, 700, 701, 709, 718, 739, 761, 773, 834, 841, 855, 863, 864, 918], "extend": [0, 87, 241, 356, 547, 556, 647, 761, 918], "function": [0, 28, 60, 61, 62, 63, 68, 85, 96, 97, 100, 107, 117, 126, 130, 136, 143, 170, 177, 178, 206, 209, 212, 213, 223, 241, 250, 253, 290, 312, 339, 350, 351, 352, 389, 390, 407, 419, 420, 421, 422, 423, 424, 426, 427, 428, 440, 485, 493, 495, 506, 507, 514, 515, 517, 522, 530, 547, 556, 586, 590, 593, 614, 623, 639, 648, 686, 709, 710, 743, 755, 756, 757, 758, 822, 836, 837, 843, 848, 900, 918], "data": [0, 1, 5, 14, 17, 27, 28, 33, 50, 59, 60, 62, 67, 74, 75, 79, 81, 84, 85, 86, 87, 88, 89, 90, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 114, 115, 117, 118, 119, 125, 127, 128, 138, 147, 148, 149, 161, 162, 163, 165, 176, 177, 181, 186, 187, 194, 201, 205, 206, 218, 220, 239, 241, 298, 317, 340, 347, 367, 374, 376, 413, 429, 430, 440, 472, 485, 487, 500, 533, 547, 556, 560, 561, 569, 575, 576, 593, 604, 605, 617, 639, 647, 693, 698, 702, 715, 717, 751, 816, 832, 833, 843, 848, 880, 898, 899, 900, 901, 903, 908, 917, 918], "type": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 66, 69, 74, 84, 86, 87, 88, 89, 90, 94, 96, 97, 99, 100, 107, 108, 113, 114, 115, 118, 121, 122, 126, 143, 147, 149, 150, 151, 162, 201, 205, 206, 208, 210, 241, 253, 277, 290, 298, 299, 301, 302, 303, 319, 321, 324, 327, 329, 331, 334, 338, 341, 353, 364, 370, 372, 373, 391, 416, 467, 468, 469, 472, 485, 495, 500, 509, 510, 511, 513, 514, 521, 547, 556, 562, 567, 569, 576, 577, 594, 603, 604, 605, 612, 639, 673, 686, 693, 695, 699, 700, 701, 719, 721, 724, 730, 732, 735, 738, 742, 745, 769, 843, 875, 876, 877, 898, 899, 901, 909, 918], "config": [0, 59, 190, 218, 241, 556, 600, 617, 639], "except": [0, 152, 164, 199, 241, 513, 556, 582, 639, 899, 908, 918], "test": [0, 100, 556, 578, 585, 639], "util": [0, 517, 556, 569, 639], "sql": [0, 27, 47, 98, 163, 241, 556], "These": [1, 28, 123, 241, 344, 546, 748], "allow": [1, 28, 50, 74, 85, 107, 109, 110, 111, 112, 118, 119, 125, 161, 164, 165, 186, 187, 188, 206, 220, 241, 335, 415, 430, 472, 547, 581, 582, 586, 590, 604, 605, 618, 639, 739, 818, 833, 835, 880, 900, 918], "you": [1, 28, 32, 59, 84, 86, 87, 88, 90, 94, 96, 97, 100, 101, 105, 107, 114, 122, 126, 134, 138, 161, 164, 174, 186, 187, 203, 205, 209, 223, 241, 253, 272, 301, 302, 303, 359, 368, 389, 391, 415, 420, 421, 422, 423, 424, 426, 427, 428, 457, 460, 472, 496, 506, 515, 547, 562, 565, 578, 582, 585, 603, 605, 623, 639, 647, 668, 699, 700, 701, 773, 818, 865, 868, 880, 899, 908, 918], "regist": [1, 60, 61, 62, 63], "custom": [1, 28, 60, 61, 62, 63, 126, 223, 241, 253, 290, 389, 419, 495, 522, 547, 586, 623, 639, 648, 686, 822, 918], "dedic": [1, 85, 161, 187, 241], "namespac": [1, 240, 546, 556, 638], "underli": [1, 70, 77, 84, 86, 87, 88, 90, 105, 118, 119, 138, 161, 162, 187, 201, 241, 294, 317, 318, 320, 323, 325, 326, 328, 330, 332, 333, 336, 337, 338, 340, 345, 346, 347, 348, 415, 429, 447, 449, 547, 639, 647, 689, 717, 718, 720, 723, 725, 729, 731, 734, 736, 737, 740, 741, 742, 744, 749, 750, 751, 752, 818, 832, 843, 855, 857, 895, 899, 918], "polar": [1, 241, 546, 547, 556, 639, 918, 924, 925], "class": [1, 2, 3, 4, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 89, 116, 117, 205, 206, 241, 547, 556, 639, 898, 899, 918, 924], "without": [1, 5, 68, 99, 102, 106, 108, 112, 212, 213, 241, 253, 312, 339, 420, 421, 422, 423, 424, 426, 427, 428, 532, 547, 614, 639, 709, 710, 715, 743, 918], "requir": [1, 28, 32, 89, 114, 115, 130, 186, 206, 241, 350, 351, 352, 435, 472, 487, 547, 605, 639, 756, 757, 758, 842, 880, 899, 900, 903, 918], "subclass": [1, 241], "mixin": 1, "expr": [1, 59, 60, 61, 62, 63, 64, 67, 69, 137, 139, 141, 163, 164, 174, 178, 186, 190, 218, 241, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 547, 548, 551, 552, 553, 568, 570, 572, 581, 582, 595, 600, 602, 617, 639, 666, 668, 709, 718, 762, 773, 841, 855, 859, 878, 890, 918], "ar": [1, 5, 10, 16, 28, 32, 50, 69, 76, 83, 84, 85, 86, 87, 88, 89, 90, 96, 97, 98, 99, 100, 101, 105, 107, 108, 109, 110, 112, 114, 115, 117, 118, 121, 123, 125, 126, 130, 134, 136, 139, 143, 148, 149, 150, 161, 164, 165, 170, 171, 176, 186, 187, 190, 196, 202, 206, 213, 214, 218, 221, 241, 250, 290, 308, 310, 311, 315, 316, 339, 344, 349, 350, 351, 352, 368, 370, 372, 373, 374, 376, 377, 378, 381, 391, 407, 413, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 437, 440, 442, 443, 457, 460, 461, 479, 496, 497, 499, 502, 503, 533, 535, 540, 541, 543, 546, 547, 548, 551, 552, 553, 556, 565, 570, 575, 576, 577, 578, 582, 585, 586, 590, 591, 594, 597, 600, 604, 605, 607, 614, 617, 618, 621, 639, 645, 647, 686, 707, 708, 743, 748, 754, 755, 756, 757, 758, 768, 773, 777, 780, 781, 782, 783, 784, 785, 792, 816, 820, 822, 828, 845, 848, 865, 868, 869, 888, 899, 900, 908, 910, 912, 914, 918, 921, 922, 923], "all": [1, 7, 13, 16, 21, 24, 28, 33, 66, 67, 69, 84, 87, 89, 90, 91, 96, 97, 99, 100, 101, 105, 107, 109, 110, 116, 117, 119, 134, 140, 152, 157, 159, 161, 162, 165, 170, 173, 174, 181, 186, 187, 195, 199, 204, 210, 212, 214, 241, 251, 252, 272, 277, 287, 290, 292, 306, 312, 316, 353, 363, 364, 367, 370, 373, 377, 378, 380, 383, 385, 389, 390, 402, 406, 410, 413, 418, 435, 441, 448, 454, 456, 459, 462, 463, 465, 471, 478, 490, 500, 513, 515, 530, 535, 547, 556, 562, 565, 567, 569, 571, 586, 590, 594, 603, 606, 612, 618, 639, 668, 673, 683, 686, 709, 715, 775, 789, 816, 849, 856, 862, 864, 867, 870, 871, 873, 879, 918], "support": [1, 28, 32, 67, 84, 85, 86, 87, 88, 89, 90, 98, 99, 100, 108, 116, 119, 123, 125, 161, 162, 187, 195, 196, 203, 206, 241, 285, 407, 441, 443, 466, 500, 547, 606, 607, 639, 681, 849, 874, 900, 918], "target": [1, 28, 65, 241, 453, 472, 861, 880], "thi": [1, 5, 7, 24, 26, 28, 30, 32, 36, 49, 50, 59, 66, 67, 68, 84, 86, 87, 88, 89, 90, 93, 94, 96, 97, 98, 99, 100, 101, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 125, 126, 130, 134, 135, 136, 138, 143, 148, 149, 150, 151, 155, 157, 159, 161, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 179, 180, 181, 186, 187, 188, 190, 193, 195, 197, 198, 201, 203, 205, 206, 209, 210, 212, 213, 214, 215, 216, 218, 219, 223, 240, 241, 250, 252, 253, 262, 265, 272, 273, 277, 286, 290, 299, 306, 312, 317, 325, 335, 338, 339, 347, 355, 366, 367, 368, 372, 383, 388, 389, 395, 396, 397, 398, 404, 405, 407, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 430, 432, 434, 435, 436, 441, 442, 443, 458, 459, 464, 465, 471, 472, 475, 486, 487, 488, 489, 490, 493, 496, 501, 504, 506, 508, 514, 515, 517, 532, 536, 547, 556, 557, 559, 562, 565, 567, 569, 575, 576, 577, 579, 582, 586, 590, 591, 594, 597, 600, 602, 603, 604, 605, 606, 612, 614, 617, 618, 619, 620, 623, 638, 639, 647, 648, 657, 660, 668, 669, 673, 682, 695, 709, 710, 715, 717, 718, 725, 739, 742, 743, 751, 755, 760, 767, 768, 774, 779, 780, 786, 788, 790, 793, 797, 799, 800, 801, 802, 804, 805, 807, 808, 810, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 826, 829, 830, 831, 833, 836, 837, 838, 841, 842, 843, 844, 849, 850, 852, 866, 867, 872, 873, 879, 880, 883, 884, 887, 888, 895, 897, 898, 899, 900, 902, 903, 905, 907, 908, 918], "featur": [1, 32, 36, 50, 65, 241], "i": [1, 5, 13, 26, 28, 30, 31, 36, 50, 59, 64, 65, 66, 67, 68, 69, 71, 73, 74, 76, 80, 82, 84, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 101, 105, 107, 108, 109, 110, 111, 112, 116, 117, 118, 119, 125, 126, 134, 136, 144, 147, 148, 149, 150, 151, 155, 156, 158, 160, 161, 162, 164, 165, 168, 170, 171, 174, 176, 177, 178, 186, 187, 188, 195, 196, 198, 201, 206, 209, 210, 212, 213, 214, 223, 240, 241, 250, 251, 252, 253, 263, 272, 275, 285, 289, 290, 312, 318, 335, 339, 344, 350, 351, 352, 355, 364, 366, 368, 381, 389, 391, 398, 407, 413, 415, 417, 420, 421, 422, 423, 424, 426, 427, 428, 430, 431, 432, 436, 437, 440, 441, 442, 443, 447, 448, 453, 454, 456, 458, 459, 461, 464, 465, 466, 469, 471, 472, 475, 490, 494, 496, 500, 501, 504, 506, 507, 508, 515, 521, 532, 536, 547, 562, 565, 567, 569, 575, 576, 577, 580, 582, 584, 586, 590, 591, 594, 603, 604, 605, 606, 607, 612, 614, 620, 623, 639, 646, 647, 648, 668, 671, 681, 685, 709, 710, 718, 739, 743, 748, 755, 756, 757, 758, 760, 768, 769, 772, 774, 776, 786, 787, 788, 790, 791, 792, 816, 818, 820, 833, 834, 835, 836, 837, 838, 844, 845, 848, 849, 852, 855, 856, 861, 862, 864, 866, 867, 869, 872, 873, 874, 877, 879, 883, 895, 899, 900, 906, 907, 908, 918], "primarili": 1, "intend": 1, "us": [1, 9, 11, 13, 16, 21, 22, 26, 27, 28, 32, 50, 59, 68, 69, 85, 87, 88, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 105, 107, 108, 109, 110, 111, 112, 116, 117, 118, 119, 122, 126, 132, 134, 139, 140, 143, 148, 149, 150, 157, 159, 161, 162, 164, 168, 170, 173, 174, 177, 178, 186, 188, 190, 196, 198, 204, 206, 209, 210, 212, 213, 214, 218, 221, 223, 241, 248, 253, 263, 272, 290, 294, 295, 299, 312, 315, 316, 347, 349, 350, 351, 352, 358, 359, 367, 368, 381, 389, 391, 394, 407, 413, 415, 417, 420, 421, 422, 423, 424, 426, 427, 428, 430, 432, 435, 436, 440, 442, 443, 449, 450, 451, 457, 458, 464, 466, 468, 470, 472, 495, 496, 500, 502, 506, 508, 515, 517, 521, 523, 526, 531, 532, 535, 536, 546, 547, 556, 562, 564, 565, 570, 571, 575, 576, 577, 578, 582, 584, 585, 590, 600, 605, 607, 612, 614, 617, 621, 623, 639, 648, 668, 686, 689, 690, 695, 709, 751, 754, 756, 757, 758, 762, 763, 768, 773, 792, 798, 816, 818, 820, 833, 836, 837, 838, 842, 844, 848, 852, 857, 858, 865, 866, 872, 874, 876, 880, 890, 896, 898, 899, 900, 907, 908, 918], "librari": [1, 70, 77, 389, 547, 925], "author": 1, "domain": 1, "specif": [1, 24, 28, 84, 86, 88, 90, 96, 98, 99, 108, 118, 161, 241, 419, 472, 547, 639, 822, 880, 918], "capabl": [1, 28, 241], "which": [1, 16, 25, 26, 28, 29, 30, 31, 32, 59, 60, 61, 62, 63, 87, 96, 97, 98, 99, 100, 107, 108, 114, 134, 138, 149, 150, 210, 241, 250, 290, 356, 368, 370, 373, 374, 376, 377, 378, 398, 420, 421, 422, 423, 424, 426, 427, 428, 461, 547, 565, 567, 576, 577, 604, 605, 612, 620, 639, 647, 761, 773, 777, 781, 782, 783, 784, 785, 836, 869, 918], "mai": [1, 32, 36, 67, 68, 84, 86, 87, 88, 90, 96, 99, 101, 108, 109, 112, 126, 136, 138, 164, 192, 193, 206, 212, 213, 241, 253, 284, 289, 290, 312, 317, 325, 339, 420, 421, 422, 423, 424, 426, 427, 428, 433, 434, 472, 506, 507, 515, 530, 547, 582, 586, 601, 602, 605, 614, 619, 623, 639, 647, 680, 685, 709, 710, 717, 725, 743, 755, 840, 841, 880, 918], "exist": [1, 27, 28, 99, 108, 118, 218, 241, 318, 617, 639, 718], "belong": [1, 149, 241, 576, 639], "core": [1, 206, 241], "cannot": [1, 85, 96, 97, 101, 114, 126, 188, 223, 241, 294, 391, 430, 449, 468, 477, 547, 603, 623, 639, 689, 833, 857, 876, 918], "overrid": [1, 28, 84, 86, 87, 88, 89, 90, 96, 116, 117, 119, 241, 639], "str": [1, 6, 8, 10, 12, 13, 16, 17, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 47, 48, 49, 50, 59, 60, 61, 62, 63, 65, 68, 69, 84, 86, 87, 88, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 117, 118, 119, 129, 131, 132, 133, 134, 135, 136, 137, 141, 142, 143, 145, 147, 148, 149, 150, 152, 154, 157, 159, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 174, 176, 178, 180, 182, 183, 184, 185, 186, 187, 188, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 241, 248, 249, 253, 268, 269, 270, 275, 276, 277, 285, 288, 290, 314, 319, 335, 338, 339, 342, 344, 353, 355, 357, 359, 361, 366, 368, 372, 375, 390, 391, 397, 399, 407, 410, 416, 418, 420, 421, 422, 423, 424, 426, 427, 428, 434, 435, 442, 443, 476, 477, 478, 481, 492, 493, 494, 495, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 547, 551, 562, 563, 564, 565, 567, 568, 569, 572, 574, 575, 576, 577, 579, 581, 582, 590, 591, 594, 596, 597, 598, 602, 603, 604, 605, 606, 607, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639, 644, 665, 666, 673, 686, 693, 710, 711, 719, 739, 742, 743, 746, 748, 760, 763, 773, 798, 799, 802, 807, 808, 819, 836, 837, 884, 886, 896, 897, 918, 921], "dt": [1, 59, 150, 241, 553, 577, 639, 923], "attempt": [1, 205, 241], "do": [1, 28, 59, 66, 107, 138, 164, 201, 209, 212, 241, 272, 312, 459, 465, 471, 493, 547, 562, 567, 582, 586, 594, 603, 604, 605, 639, 647, 668, 709, 867, 873, 879, 899, 908, 918], "so": [1, 50, 98, 107, 108, 147, 149, 150, 178, 241, 263, 275, 368, 459, 465, 471, 547, 576, 577, 639, 671, 867, 873, 879], "rais": [1, 12, 16, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 114, 115, 186, 241, 289, 294, 397, 409, 447, 449, 461, 472, 521, 547, 685, 689, 855, 857, 869, 880, 899, 908, 918], "an": [1, 27, 28, 36, 60, 62, 63, 64, 66, 69, 70, 74, 75, 77, 84, 96, 97, 98, 99, 100, 102, 105, 107, 109, 117, 118, 119, 126, 127, 128, 136, 139, 141, 143, 149, 150, 161, 162, 164, 174, 178, 184, 186, 201, 205, 212, 218, 223, 241, 249, 250, 253, 270, 272, 275, 289, 290, 294, 298, 301, 302, 303, 307, 308, 309, 310, 311, 312, 318, 347, 356, 359, 368, 380, 389, 390, 398, 411, 419, 420, 421, 422, 423, 424, 426, 427, 428, 447, 449, 454, 472, 481, 496, 500, 512, 517, 521, 530, 531, 532, 535, 547, 556, 560, 561, 562, 567, 569, 572, 576, 577, 582, 586, 594, 603, 617, 618, 623, 639, 666, 668, 671, 685, 689, 693, 698, 699, 700, 701, 702, 705, 706, 707, 708, 709, 718, 751, 755, 761, 773, 822, 823, 824, 825, 826, 827, 829, 830, 831, 836, 837, 855, 857, 862, 880, 899, 908, 918], "attributeerror": 1, "howev": [1, 87, 136, 241, 755, 918], "can": [1, 28, 59, 69, 75, 87, 96, 97, 100, 101, 105, 107, 109, 111, 112, 117, 118, 119, 126, 135, 143, 149, 157, 159, 174, 178, 190, 196, 209, 212, 218, 223, 241, 253, 272, 290, 308, 311, 312, 335, 344, 356, 367, 368, 402, 415, 420, 421, 422, 423, 424, 426, 427, 428, 432, 435, 437, 440, 443, 456, 459, 465, 471, 490, 493, 496, 497, 500, 508, 515, 517, 523, 536, 546, 547, 562, 567, 576, 600, 607, 617, 619, 623, 639, 648, 668, 686, 709, 739, 748, 761, 773, 803, 818, 836, 837, 838, 842, 845, 848, 864, 867, 873, 879, 918], "other": [1, 16, 28, 69, 96, 97, 100, 107, 114, 115, 134, 138, 144, 163, 164, 170, 171, 186, 190, 213, 218, 239, 241, 252, 263, 268, 301, 302, 303, 314, 372, 391, 443, 485, 499, 502, 535, 547, 556, 565, 581, 582, 590, 591, 600, 614, 617, 618, 639, 647, 664, 699, 700, 701, 713, 780, 835, 901, 909, 917, 918], "onli": [1, 16, 24, 28, 50, 59, 65, 67, 96, 97, 99, 100, 101, 105, 107, 108, 109, 110, 111, 118, 119, 123, 126, 134, 161, 164, 168, 187, 198, 203, 241, 248, 253, 263, 300, 301, 302, 303, 335, 353, 362, 415, 488, 531, 547, 562, 565, 578, 582, 585, 639, 696, 699, 700, 701, 739, 766, 818, 895, 918], "gener": [1, 91, 98, 116, 117, 118, 119, 130, 178, 188, 204, 209, 241, 290, 430, 436, 547, 639, 686, 833, 844, 896, 918], "userwarn": 1, "pl": [1, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 31, 32, 50, 59, 60, 61, 62, 63, 64, 67, 68, 69, 84, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 100, 101, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 241, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 397, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 547, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 667, 668, 669, 672, 673, 675, 680, 681, 682, 684, 686, 693, 695, 696, 697, 698, 699, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 757, 758, 761, 762, 763, 764, 766, 769, 770, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 811, 812, 813, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 844, 845, 846, 847, 849, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 918], "register_expr_namespac": [1, 60, 62, 63], "greet": 1, "def": [1, 60, 61, 62, 63, 117, 118, 119, 177, 209, 241, 522, 547, 593, 639], "__init__": [1, 2, 3, 4, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 116], "self": [1, 60, 61, 62, 63, 66, 126, 127, 128, 130, 131, 132, 134, 137, 138, 139, 140, 141, 148, 149, 150, 152, 154, 155, 156, 163, 164, 166, 167, 168, 169, 170, 171, 172, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 204, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 241, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 292, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 547, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 639, 647, 797, 798, 836, 837, 850, 905, 909, 918], "_expr": [1, 61], "hello": [1, 459, 465, 471, 493, 673, 867, 873, 879], "return": [1, 24, 26, 30, 31, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 76, 78, 83, 84, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 122, 126, 127, 130, 133, 134, 135, 136, 137, 139, 140, 143, 147, 148, 152, 154, 160, 161, 162, 163, 165, 166, 173, 174, 176, 177, 178, 186, 187, 188, 199, 200, 206, 209, 210, 218, 220, 223, 226, 230, 235, 241, 250, 251, 254, 255, 256, 257, 258, 259, 262, 263, 265, 266, 267, 269, 273, 275, 276, 277, 288, 289, 293, 295, 304, 305, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 343, 344, 345, 346, 348, 355, 365, 368, 370, 371, 372, 373, 374, 376, 377, 378, 384, 388, 398, 402, 416, 417, 430, 431, 437, 438, 439, 446, 448, 450, 452, 453, 454, 456, 457, 458, 460, 461, 464, 466, 467, 468, 469, 475, 480, 481, 482, 483, 484, 486, 488, 489, 490, 494, 495, 496, 497, 500, 509, 510, 511, 517, 519, 521, 522, 531, 532, 535, 537, 539, 547, 560, 562, 565, 566, 567, 569, 578, 584, 585, 586, 593, 594, 603, 604, 605, 610, 611, 612, 617, 620, 626, 630, 635, 639, 644, 645, 646, 648, 655, 656, 658, 659, 662, 663, 665, 669, 671, 672, 673, 684, 685, 688, 690, 698, 710, 711, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 752, 755, 760, 768, 770, 775, 777, 778, 780, 781, 782, 783, 784, 785, 789, 791, 794, 797, 803, 820, 821, 833, 834, 835, 837, 845, 854, 855, 856, 858, 860, 861, 862, 864, 865, 866, 868, 869, 872, 874, 875, 876, 877, 880, 883, 889, 891, 902, 904, 905, 909, 918], "lit": [1, 94, 122, 293, 368, 380, 506, 508, 515, 536, 539, 547, 688, 763, 918], "alia": [1, 59, 61, 63, 149, 150, 166, 211, 218, 241, 253, 265, 270, 272, 301, 302, 303, 307, 308, 309, 310, 311, 313, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 331, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 346, 347, 359, 361, 366, 368, 371, 372, 380, 383, 384, 391, 400, 408, 415, 431, 447, 448, 451, 454, 457, 460, 466, 468, 469, 470, 476, 477, 485, 486, 492, 495, 498, 499, 501, 502, 506, 507, 508, 511, 512, 515, 516, 522, 530, 531, 535, 536, 547, 576, 577, 579, 585, 613, 617, 639, 660, 668, 717, 719, 722, 739, 742, 747, 751, 794, 876, 877, 918], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 459, 465, 471, 673, 867, 873, 879], "select": [1, 27, 59, 60, 61, 62, 64, 95, 96, 97, 98, 99, 101, 105, 107, 112, 126, 160, 164, 174, 177, 186, 195, 207, 211, 214, 241, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 286, 287, 290, 291, 292, 300, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 360, 362, 363, 364, 366, 367, 369, 370, 372, 373, 375, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 392, 393, 394, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 458, 459, 461, 464, 465, 467, 468, 469, 471, 473, 474, 476, 477, 478, 479, 482, 483, 484, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 511, 513, 514, 515, 516, 517, 519, 523, 524, 525, 526, 527, 528, 530, 533, 534, 535, 536, 537, 538, 547, 563, 579, 582, 593, 606, 613, 618, 620, 639, 668, 686, 836, 837, 849, 861, 864, 890, 918], "shape": [1, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 50, 59, 60, 61, 62, 63, 64, 67, 68, 69, 81, 84, 86, 87, 88, 89, 90, 91, 94, 107, 112, 118, 119, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 164, 166, 167, 168, 169, 170, 172, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 188, 190, 192, 193, 195, 196, 197, 198, 199, 200, 202, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 241, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 519, 522, 523, 524, 525, 526, 527, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 547, 560, 562, 564, 565, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 597, 598, 600, 601, 602, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 667, 668, 669, 672, 673, 675, 680, 681, 682, 684, 686, 693, 695, 696, 698, 699, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 757, 758, 761, 762, 763, 764, 766, 769, 770, 772, 773, 775, 777, 780, 781, 782, 783, 784, 785, 789, 791, 794, 797, 798, 803, 811, 812, 813, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 837, 840, 844, 845, 846, 847, 849, 850, 851, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 887, 889, 890, 891, 892, 893, 896, 897, 901, 903, 904, 905, 906, 909, 918], "3": [1, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 25, 26, 28, 29, 30, 31, 32, 50, 59, 60, 61, 62, 63, 64, 67, 68, 69, 84, 86, 87, 88, 89, 90, 91, 98, 100, 107, 112, 113, 114, 115, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 241, 248, 249, 250, 253, 262, 263, 264, 265, 269, 270, 271, 272, 273, 274, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 298, 299, 300, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 330, 332, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 380, 381, 383, 385, 386, 387, 388, 390, 391, 402, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 442, 443, 444, 447, 450, 451, 453, 455, 457, 460, 466, 467, 468, 469, 470, 476, 477, 478, 480, 481, 482, 486, 488, 489, 490, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 512, 513, 514, 515, 516, 519, 521, 522, 523, 524, 525, 526, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 547, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639, 644, 647, 648, 649, 651, 652, 653, 655, 656, 657, 658, 659, 667, 668, 669, 672, 675, 680, 681, 682, 684, 686, 693, 695, 696, 697, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 726, 727, 728, 730, 732, 733, 734, 736, 738, 740, 742, 743, 744, 747, 748, 750, 751, 755, 757, 758, 761, 762, 763, 764, 766, 769, 770, 772, 773, 775, 777, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 792, 793, 794, 797, 799, 800, 801, 802, 803, 804, 805, 811, 812, 813, 815, 816, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 844, 846, 847, 848, 849, 850, 852, 858, 859, 861, 863, 865, 868, 874, 878, 887, 888, 889, 890, 891, 892, 893, 895, 896, 898, 899, 900, 903, 904, 905, 906, 907, 909, 918], "1": [1, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 25, 26, 28, 29, 30, 31, 32, 50, 59, 60, 61, 62, 63, 64, 67, 68, 69, 84, 86, 87, 88, 89, 90, 91, 94, 96, 97, 98, 99, 101, 107, 108, 112, 113, 114, 115, 116, 118, 119, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 241, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 547, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 667, 668, 669, 671, 672, 675, 680, 681, 682, 684, 686, 693, 695, 696, 697, 699, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 756, 757, 758, 761, 762, 763, 764, 766, 769, 770, 772, 773, 775, 777, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 791, 793, 794, 797, 799, 800, 801, 802, 803, 804, 805, 811, 812, 813, 815, 816, 819, 820, 821, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 861, 863, 864, 876, 877, 880, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 918], "2": [1, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 25, 26, 28, 29, 30, 31, 32, 50, 59, 60, 61, 62, 63, 64, 67, 68, 84, 86, 87, 88, 89, 90, 91, 98, 107, 112, 113, 114, 115, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 241, 247, 248, 249, 251, 252, 253, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 319, 321, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 337, 338, 339, 340, 341, 342, 344, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 441, 442, 443, 444, 446, 448, 451, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 466, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 492, 493, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 547, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639, 644, 647, 648, 650, 654, 655, 656, 657, 658, 659, 667, 668, 669, 672, 673, 675, 680, 681, 682, 684, 686, 695, 696, 697, 698, 702, 703, 706, 707, 708, 709, 710, 711, 712, 713, 718, 723, 727, 728, 734, 736, 741, 743, 744, 748, 750, 752, 754, 755, 756, 757, 758, 761, 762, 763, 764, 766, 769, 770, 772, 773, 775, 777, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 793, 794, 795, 797, 799, 800, 801, 802, 803, 804, 805, 811, 812, 813, 815, 816, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 844, 846, 848, 849, 850, 851, 852, 854, 856, 862, 863, 864, 867, 868, 869, 870, 871, 873, 876, 877, 879, 880, 887, 888, 889, 890, 891, 892, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 909, 918], "column_0": [1, 126, 209, 241], "register_dataframe_namespac": [1, 61, 62, 63], "split": [1, 60, 162, 241, 468, 469, 876, 877], "splitfram": [1, 60], "df": [1, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 25, 26, 28, 29, 30, 31, 32, 60, 61, 64, 84, 85, 86, 87, 88, 89, 90, 91, 97, 107, 117, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 241, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 286, 287, 290, 291, 292, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 519, 522, 523, 524, 525, 526, 527, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 547, 577, 613, 614, 620, 623, 626, 635, 639, 668, 686, 695, 861, 864, 871, 876, 877, 897, 918], "_df": [1, 60], "by_alternate_row": 1, "list": [1, 28, 35, 59, 60, 62, 66, 68, 84, 86, 87, 88, 90, 93, 95, 96, 97, 98, 99, 101, 105, 107, 108, 117, 118, 119, 129, 132, 135, 136, 137, 141, 146, 148, 149, 154, 161, 173, 176, 186, 187, 190, 196, 202, 203, 209, 210, 211, 212, 218, 221, 222, 241, 248, 268, 271, 272, 273, 276, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 355, 361, 389, 398, 399, 407, 416, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 434, 442, 443, 454, 467, 476, 477, 481, 497, 500, 501, 508, 512, 523, 526, 535, 536, 547, 563, 564, 566, 568, 572, 575, 576, 590, 600, 607, 612, 613, 617, 618, 621, 622, 639, 661, 664, 667, 668, 669, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 697, 710, 755, 760, 764, 767, 780, 820, 822, 823, 824, 825, 826, 827, 829, 830, 831, 834, 862, 875, 890, 898, 918], "with_row_count": [1, 241, 391, 547, 639, 837, 918], "name": [1, 14, 18, 20, 27, 28, 30, 49, 60, 61, 62, 63, 68, 69, 73, 84, 86, 87, 88, 89, 90, 91, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 109, 110, 111, 115, 116, 117, 118, 119, 126, 129, 132, 133, 134, 137, 142, 145, 147, 148, 161, 163, 164, 170, 176, 178, 182, 186, 187, 189, 190, 196, 202, 204, 208, 209, 210, 211, 212, 213, 218, 219, 220, 221, 241, 249, 253, 290, 339, 344, 353, 368, 380, 390, 397, 399, 407, 410, 443, 476, 477, 478, 493, 494, 497, 499, 500, 502, 503, 505, 508, 513, 519, 520, 523, 526, 528, 529, 531, 533, 535, 536, 537, 547, 563, 564, 565, 568, 575, 581, 582, 590, 597, 599, 600, 607, 612, 613, 614, 617, 619, 620, 621, 639, 644, 686, 698, 710, 743, 748, 819, 884, 886, 896, 897, 900, 918], "n": [1, 11, 13, 21, 31, 35, 37, 60, 61, 62, 63, 69, 93, 94, 96, 97, 107, 122, 126, 127, 138, 149, 152, 161, 162, 166, 187, 188, 199, 200, 203, 226, 235, 241, 271, 276, 288, 312, 313, 317, 318, 322, 343, 347, 356, 365, 384, 408, 416, 430, 440, 468, 469, 480, 482, 486, 517, 519, 531, 537, 547, 560, 562, 576, 578, 585, 610, 611, 626, 635, 639, 647, 667, 672, 684, 698, 709, 712, 717, 718, 722, 747, 751, 761, 770, 794, 811, 833, 848, 852, 876, 877, 889, 891, 902, 907, 918], "filter": [1, 60, 99, 107, 108, 112, 134, 157, 158, 159, 223, 241, 451, 470, 492, 496, 515, 547, 565, 569, 579, 623, 639, 836, 918], "col": [1, 26, 28, 59, 60, 61, 62, 64, 88, 90, 107, 117, 118, 126, 137, 141, 148, 149, 150, 158, 160, 174, 177, 186, 190, 196, 211, 218, 221, 241, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 286, 287, 290, 291, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 356, 359, 360, 361, 362, 366, 367, 368, 369, 371, 372, 374, 375, 376, 379, 380, 381, 382, 386, 387, 388, 391, 392, 393, 394, 401, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 499, 501, 502, 506, 507, 508, 511, 514, 515, 516, 517, 518, 523, 526, 529, 530, 536, 539, 547, 568, 572, 575, 576, 577, 579, 593, 600, 607, 613, 617, 618, 621, 639, 668, 686, 695, 739, 820, 836, 837, 861, 864, 880, 918], "0": [1, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 28, 32, 59, 60, 61, 63, 64, 68, 91, 96, 97, 98, 100, 101, 105, 107, 109, 110, 111, 112, 113, 116, 117, 118, 119, 122, 126, 127, 128, 130, 131, 132, 135, 139, 140, 143, 144, 146, 147, 148, 149, 151, 155, 160, 161, 162, 163, 165, 167, 168, 169, 172, 173, 174, 175, 179, 180, 184, 188, 189, 190, 193, 195, 196, 197, 198, 204, 206, 207, 209, 212, 214, 215, 218, 219, 221, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 241, 247, 248, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 270, 272, 275, 281, 290, 298, 300, 302, 303, 304, 305, 307, 312, 315, 316, 323, 326, 327, 329, 330, 334, 340, 341, 350, 351, 352, 354, 355, 356, 357, 358, 362, 364, 367, 370, 373, 374, 376, 377, 378, 380, 381, 386, 387, 389, 391, 392, 393, 394, 401, 404, 405, 406, 408, 409, 412, 413, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 435, 437, 438, 439, 440, 444, 445, 453, 475, 479, 483, 484, 485, 491, 496, 497, 498, 499, 501, 503, 505, 506, 508, 512, 515, 524, 525, 528, 529, 530, 533, 536, 538, 539, 547, 560, 561, 564, 566, 570, 571, 575, 576, 581, 584, 589, 594, 595, 599, 600, 602, 603, 605, 607, 608, 615, 617, 618, 619, 621, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 639, 649, 650, 651, 652, 653, 654, 655, 657, 659, 660, 668, 671, 693, 696, 698, 703, 704, 709, 710, 711, 713, 723, 726, 727, 728, 729, 730, 731, 732, 733, 734, 737, 738, 744, 745, 754, 756, 757, 758, 760, 762, 766, 769, 777, 779, 781, 782, 783, 784, 785, 791, 792, 797, 800, 801, 811, 815, 816, 822, 824, 825, 827, 828, 829, 831, 833, 845, 846, 847, 851, 852, 854, 861, 864, 883, 892, 893, 896, 900, 901, 905, 907, 908, 918], "drop": [1, 87, 126, 133, 134, 210, 218, 241, 271, 313, 315, 316, 547, 565, 612, 617, 639, 667, 712, 714, 715, 918], "aaa": [1, 28, 241, 476, 477], "bbb": [1, 28, 241, 476, 477], "ccc": [1, 28, 241, 476, 477], "ddd": [1, 28, 241, 476, 477], "eee": [1, 28, 241], "fff": 1, "column": [1, 13, 14, 17, 18, 20, 28, 30, 50, 59, 60, 67, 68, 69, 71, 73, 84, 86, 87, 88, 89, 90, 91, 95, 96, 97, 98, 99, 101, 102, 105, 106, 107, 108, 109, 110, 111, 114, 118, 125, 126, 132, 133, 134, 135, 137, 142, 145, 147, 148, 149, 150, 154, 155, 161, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 189, 190, 196, 197, 198, 202, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 218, 219, 221, 241, 250, 251, 253, 262, 265, 268, 273, 286, 289, 290, 318, 320, 323, 325, 326, 328, 330, 332, 333, 336, 337, 340, 345, 346, 348, 353, 355, 359, 361, 368, 380, 391, 396, 397, 399, 407, 410, 414, 416, 417, 420, 421, 422, 423, 424, 426, 427, 428, 435, 442, 443, 452, 468, 469, 472, 478, 492, 493, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 535, 536, 537, 538, 539, 547, 564, 565, 566, 568, 575, 576, 577, 581, 582, 586, 587, 588, 589, 590, 592, 593, 595, 597, 599, 600, 607, 608, 609, 612, 613, 614, 615, 617, 618, 619, 620, 621, 639, 645, 646, 664, 669, 682, 685, 710, 720, 723, 725, 729, 731, 734, 736, 737, 740, 741, 744, 749, 750, 752, 760, 820, 842, 860, 876, 877, 887, 896, 897, 918], "txt": 1, "utf8": [1, 9, 16, 50, 87, 96, 97, 107, 116, 135, 136, 137, 143, 189, 205, 241, 277, 355, 391, 446, 450, 453, 454, 456, 457, 466, 467, 468, 469, 472, 500, 502, 547, 566, 568, 599, 639, 673, 746, 760, 790, 854, 858, 861, 862, 864, 865, 874, 875, 876, 877, 880, 918], "register_lazyframe_namespac": [1, 60, 61, 63], "dtypeoper": [1, 62], "ldf": [1, 62, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635], "_ldf": [1, 62], "upcast_integer_typ": [1, 62], "with_column": [1, 62, 150, 177, 241, 253, 263, 272, 298, 299, 301, 302, 303, 308, 311, 313, 364, 367, 368, 371, 374, 376, 377, 378, 380, 391, 407, 408, 451, 457, 460, 462, 463, 466, 468, 469, 470, 472, 475, 485, 495, 496, 499, 501, 502, 508, 512, 522, 536, 539, 547, 577, 593, 639, 668, 695, 880], "tp": [1, 62], "cast": [1, 61, 62, 84, 121, 143, 149, 150, 177, 206, 218, 241, 252, 299, 310, 311, 317, 391, 415, 455, 456, 475, 479, 485, 502, 547, 576, 577, 593, 617, 639, 695, 707, 708, 717, 818, 863, 864, 888, 897, 901, 918], "int64": [1, 30, 61, 62, 94, 96, 122, 135, 143, 149, 150, 177, 189, 201, 206, 241, 310, 311, 321, 324, 327, 329, 331, 334, 341, 353, 415, 455, 479, 485, 496, 500, 513, 535, 547, 566, 576, 577, 593, 599, 620, 639, 707, 708, 721, 724, 730, 732, 735, 738, 745, 818, 835, 888, 899, 900, 901, 918], "int8": [1, 62, 143, 241, 310, 311, 479, 547, 707, 708, 712, 821, 888, 905, 918], "int16": [1, 62, 310, 311, 479, 547, 707, 708, 888, 918], "int32": [1, 62, 87, 118, 119, 149, 150, 162, 241, 298, 325, 348, 485, 547, 576, 577, 639, 725, 752, 797, 901, 918], "b": [1, 25, 26, 29, 32, 50, 62, 67, 84, 86, 87, 88, 89, 90, 91, 100, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 154, 155, 157, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 241, 249, 252, 253, 264, 268, 272, 277, 279, 292, 298, 299, 306, 314, 315, 316, 353, 357, 358, 359, 361, 363, 364, 367, 368, 370, 373, 374, 375, 376, 377, 378, 380, 383, 385, 390, 402, 406, 407, 410, 418, 435, 441, 443, 452, 455, 462, 478, 488, 490, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 512, 513, 514, 515, 516, 519, 522, 523, 524, 525, 526, 527, 528, 530, 533, 534, 535, 536, 537, 538, 547, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 578, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639, 647, 668, 695, 711, 713, 754, 755, 763, 773, 780, 790, 819, 835, 860, 863, 870, 887, 900, 904, 918], "4": [1, 13, 21, 25, 26, 28, 29, 32, 50, 59, 60, 61, 62, 63, 64, 67, 69, 84, 86, 87, 88, 89, 90, 91, 107, 114, 115, 119, 126, 127, 128, 131, 134, 137, 138, 139, 140, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 170, 173, 174, 176, 177, 178, 179, 183, 187, 191, 196, 199, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 241, 247, 248, 252, 253, 264, 270, 271, 272, 273, 276, 284, 285, 288, 292, 298, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 318, 320, 324, 330, 331, 332, 336, 337, 339, 340, 341, 344, 345, 346, 348, 354, 357, 358, 361, 362, 363, 365, 366, 367, 368, 377, 378, 380, 383, 385, 387, 390, 391, 407, 409, 410, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 431, 433, 434, 437, 441, 442, 443, 444, 447, 457, 458, 460, 461, 464, 466, 468, 469, 472, 476, 477, 478, 480, 481, 482, 485, 486, 495, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 512, 514, 515, 519, 522, 523, 524, 525, 526, 527, 528, 533, 534, 535, 536, 537, 538, 539, 547, 560, 561, 562, 565, 567, 568, 569, 570, 571, 573, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 601, 602, 603, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639, 647, 650, 657, 667, 668, 669, 672, 680, 681, 684, 696, 697, 699, 709, 711, 713, 723, 724, 729, 731, 734, 735, 736, 737, 741, 743, 744, 745, 746, 748, 749, 750, 762, 763, 772, 773, 775, 780, 782, 783, 784, 785, 789, 798, 804, 811, 812, 813, 816, 820, 825, 827, 828, 829, 830, 831, 833, 835, 845, 849, 850, 855, 865, 866, 868, 869, 872, 874, 876, 877, 880, 887, 890, 891, 900, 901, 909, 918], "c": [1, 25, 26, 29, 32, 50, 60, 62, 87, 89, 100, 107, 117, 127, 128, 129, 131, 132, 133, 134, 135, 137, 141, 142, 143, 144, 146, 147, 148, 149, 152, 154, 155, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 178, 179, 180, 182, 184, 185, 186, 188, 189, 190, 192, 193, 195, 196, 197, 198, 199, 201, 205, 206, 207, 209, 212, 213, 215, 216, 218, 221, 224, 225, 226, 227, 228, 229, 231, 234, 235, 241, 253, 268, 277, 279, 368, 380, 407, 435, 468, 472, 488, 490, 493, 494, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 514, 515, 516, 519, 522, 523, 524, 525, 526, 527, 528, 533, 534, 536, 537, 538, 547, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 575, 576, 581, 584, 590, 594, 597, 598, 599, 600, 603, 606, 607, 614, 617, 618, 621, 624, 625, 626, 627, 628, 629, 631, 634, 635, 639, 711, 773, 790, 876, 880, 904, 918], "5": [1, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 25, 26, 29, 32, 59, 60, 62, 63, 64, 67, 68, 84, 87, 88, 89, 90, 93, 94, 97, 113, 118, 119, 122, 126, 127, 128, 131, 137, 138, 139, 140, 143, 145, 146, 147, 148, 149, 150, 152, 153, 155, 156, 158, 160, 161, 164, 165, 166, 168, 170, 173, 174, 176, 178, 179, 180, 183, 187, 191, 196, 199, 200, 201, 202, 203, 208, 212, 214, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 241, 248, 265, 270, 272, 273, 276, 281, 287, 288, 298, 299, 300, 301, 302, 303, 312, 313, 314, 318, 319, 321, 338, 340, 341, 342, 345, 352, 353, 356, 362, 365, 368, 371, 374, 376, 377, 378, 380, 385, 407, 408, 410, 412, 413, 417, 418, 419, 420, 421, 423, 427, 429, 431, 437, 443, 448, 456, 457, 460, 461, 475, 478, 480, 482, 486, 495, 498, 499, 501, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 519, 522, 523, 524, 525, 526, 527, 528, 530, 533, 534, 536, 537, 538, 547, 560, 561, 562, 567, 568, 569, 570, 571, 573, 575, 576, 577, 578, 580, 582, 583, 584, 585, 588, 589, 590, 594, 601, 602, 603, 606, 607, 608, 609, 610, 611, 616, 617, 619, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639, 647, 650, 654, 657, 660, 668, 669, 672, 675, 684, 695, 697, 699, 705, 709, 710, 711, 712, 713, 718, 719, 720, 721, 742, 744, 745, 749, 750, 758, 761, 772, 773, 797, 804, 811, 812, 813, 815, 816, 820, 822, 823, 824, 826, 827, 830, 833, 835, 845, 851, 856, 864, 865, 869, 902, 905, 909, 918], "6": [1, 25, 26, 28, 29, 30, 31, 32, 60, 62, 67, 84, 87, 88, 89, 90, 91, 126, 129, 132, 133, 134, 135, 137, 138, 141, 142, 144, 145, 146, 147, 149, 150, 152, 154, 155, 156, 158, 160, 161, 163, 166, 167, 168, 169, 170, 172, 175, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 211, 212, 213, 214, 215, 216, 218, 219, 226, 234, 235, 241, 253, 273, 292, 298, 310, 311, 314, 318, 335, 337, 340, 349, 357, 358, 363, 365, 367, 385, 411, 413, 414, 417, 420, 421, 422, 423, 424, 426, 427, 428, 431, 443, 448, 452, 457, 460, 461, 480, 482, 493, 495, 506, 507, 508, 512, 515, 522, 536, 547, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 576, 577, 578, 580, 581, 583, 585, 586, 590, 594, 597, 599, 600, 601, 602, 603, 606, 607, 610, 611, 613, 614, 616, 617, 619, 620, 626, 634, 635, 639, 647, 669, 697, 703, 707, 708, 711, 713, 739, 750, 804, 816, 820, 825, 827, 828, 829, 831, 835, 856, 860, 865, 869, 888, 918], "7": [1, 25, 26, 28, 29, 30, 31, 32, 60, 62, 67, 69, 129, 130, 131, 132, 133, 135, 137, 141, 142, 144, 149, 150, 152, 154, 156, 163, 167, 168, 169, 172, 175, 180, 182, 184, 186, 188, 189, 190, 192, 193, 195, 197, 198, 199, 200, 205, 206, 207, 212, 213, 214, 215, 216, 241, 311, 318, 320, 336, 338, 339, 344, 346, 348, 354, 365, 367, 417, 421, 427, 443, 480, 482, 495, 506, 507, 515, 522, 536, 547, 563, 564, 566, 568, 572, 576, 577, 578, 580, 581, 585, 595, 597, 599, 600, 610, 611, 614, 620, 639, 654, 718, 720, 725, 743, 748, 750, 820, 830, 918], "float32": [1, 26, 62, 143, 241, 639, 776, 797, 918], "lazi": [1, 62, 67, 69, 94, 107, 118, 122, 164, 177, 241, 253, 290, 496, 517, 547, 556, 581, 582, 618, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 639], "i16": [1, 62, 435, 547], "i32": [1, 62, 87, 118, 190, 241, 298, 325, 348, 435, 461, 539, 547, 600, 639, 725, 752, 797, 869, 918], "f32": [1, 62, 241, 272, 413, 435, 512, 547, 639, 668, 797, 816, 918], "i64": [1, 13, 17, 60, 61, 62, 63, 67, 84, 86, 87, 88, 89, 90, 94, 107, 119, 122, 126, 127, 128, 129, 132, 134, 135, 137, 138, 140, 141, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 157, 159, 160, 163, 164, 166, 167, 170, 172, 176, 177, 178, 179, 182, 183, 184, 185, 188, 190, 192, 193, 195, 196, 198, 199, 200, 202, 207, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 231, 234, 235, 241, 249, 252, 253, 271, 272, 273, 274, 275, 276, 278, 280, 282, 283, 284, 285, 286, 287, 288, 291, 292, 299, 301, 302, 303, 308, 309, 310, 311, 313, 314, 321, 322, 324, 327, 329, 331, 334, 341, 343, 353, 356, 358, 359, 360, 361, 363, 365, 366, 367, 368, 371, 374, 376, 377, 378, 380, 382, 385, 388, 389, 390, 402, 407, 408, 410, 411, 414, 415, 417, 418, 430, 432, 433, 435, 436, 437, 441, 442, 443, 462, 463, 476, 477, 478, 479, 480, 481, 482, 486, 487, 489, 492, 493, 495, 499, 500, 502, 506, 507, 508, 512, 513, 514, 515, 519, 522, 523, 526, 530, 532, 536, 537, 539, 547, 560, 562, 564, 565, 568, 569, 571, 572, 573, 575, 576, 577, 578, 580, 581, 582, 583, 585, 586, 587, 590, 592, 593, 594, 597, 598, 600, 601, 602, 606, 607, 609, 610, 611, 612, 613, 614, 617, 619, 621, 622, 623, 625, 626, 627, 628, 631, 634, 635, 639, 647, 648, 667, 668, 669, 672, 680, 681, 682, 684, 695, 699, 702, 705, 706, 707, 708, 711, 721, 722, 724, 730, 732, 735, 738, 742, 745, 747, 761, 763, 764, 770, 772, 780, 794, 803, 819, 820, 823, 826, 830, 833, 836, 837, 840, 844, 845, 849, 850, 887, 889, 890, 891, 897, 903, 906, 909, 918], "register_series_namespac": [1, 60, 61, 62], "math": [1, 63, 703, 846, 892, 918], "mathshortcut": [1, 63], "": [1, 26, 28, 63, 68, 91, 96, 97, 119, 132, 134, 136, 137, 148, 149, 155, 163, 164, 176, 178, 183, 184, 190, 196, 200, 204, 210, 211, 212, 241, 276, 277, 284, 285, 288, 322, 342, 353, 381, 398, 402, 404, 405, 407, 408, 415, 419, 443, 457, 458, 460, 464, 466, 467, 469, 472, 475, 476, 477, 497, 500, 503, 508, 511, 513, 516, 517, 523, 526, 528, 535, 536, 547, 564, 565, 568, 575, 576, 582, 600, 607, 612, 613, 623, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 667, 669, 672, 673, 675, 680, 681, 682, 684, 693, 696, 697, 698, 699, 702, 703, 704, 705, 706, 707, 708, 709, 712, 713, 718, 722, 742, 743, 748, 755, 757, 758, 761, 762, 763, 764, 766, 769, 770, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 811, 812, 813, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 844, 845, 846, 847, 849, 850, 852, 855, 856, 858, 859, 860, 862, 863, 865, 866, 867, 868, 869, 870, 872, 873, 874, 877, 878, 879, 880, 883, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 901, 903, 904, 905, 906, 907, 908, 918], "_": [1, 59, 63, 91, 178, 204, 241, 468, 876, 896, 918], "squar": [1, 63, 223, 381, 444, 547, 623, 792, 851, 918], "cube": [1, 63], "s2": [1, 115, 143, 241, 647, 697, 713, 780, 804, 835, 900, 909, 918], "renam": [1, 87, 96, 97, 190, 218, 221, 241, 249, 390, 400, 477, 532, 535, 547, 600, 617, 621, 639, 798, 886, 897, 918], "n2": 1, "in_plac": [1, 154, 194, 216, 241, 817, 819, 843, 850, 918], "true": [1, 9, 12, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 28, 30, 32, 64, 66, 67, 69, 84, 85, 89, 93, 96, 97, 99, 100, 101, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 123, 125, 127, 128, 131, 140, 143, 144, 146, 147, 148, 149, 155, 157, 158, 159, 161, 164, 165, 168, 173, 174, 176, 178, 179, 186, 187, 188, 190, 196, 202, 206, 209, 210, 211, 212, 214, 218, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 241, 248, 250, 251, 252, 253, 263, 269, 286, 289, 294, 298, 307, 308, 309, 310, 311, 339, 340, 344, 349, 350, 351, 352, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 415, 425, 430, 435, 440, 442, 443, 447, 449, 451, 455, 456, 461, 467, 468, 470, 472, 476, 477, 481, 486, 487, 490, 494, 495, 496, 497, 503, 504, 515, 531, 533, 535, 539, 547, 560, 561, 562, 567, 569, 571, 575, 576, 581, 582, 584, 586, 590, 594, 600, 603, 604, 605, 607, 612, 613, 617, 622, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 639, 645, 646, 647, 648, 658, 682, 685, 689, 693, 697, 698, 743, 744, 748, 754, 756, 757, 758, 764, 768, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 792, 804, 812, 813, 818, 828, 835, 848, 850, 855, 857, 859, 863, 864, 869, 875, 876, 878, 880, 899, 900, 902, 908, 909, 918], "s3": [1, 99, 108, 112, 918], "n3": 1, "8": [1, 25, 26, 29, 30, 31, 32, 43, 56, 58, 59, 60, 62, 63, 67, 68, 91, 113, 117, 118, 126, 129, 130, 131, 132, 133, 134, 135, 137, 141, 142, 144, 147, 152, 154, 163, 167, 168, 169, 172, 180, 182, 184, 186, 188, 189, 190, 192, 193, 195, 197, 198, 199, 200, 205, 206, 207, 212, 213, 215, 216, 218, 241, 252, 264, 271, 272, 306, 308, 311, 312, 315, 316, 318, 367, 383, 409, 410, 417, 418, 421, 422, 424, 426, 428, 435, 441, 443, 458, 464, 472, 478, 482, 498, 503, 504, 505, 507, 508, 512, 514, 519, 522, 523, 524, 525, 526, 527, 528, 533, 534, 536, 537, 538, 547, 563, 564, 565, 566, 568, 572, 578, 581, 585, 586, 594, 597, 599, 600, 610, 611, 614, 617, 620, 639, 667, 668, 709, 725, 811, 820, 822, 825, 827, 828, 829, 831, 866, 872, 880, 918], "9": [1, 25, 26, 29, 32, 59, 67, 126, 130, 143, 150, 152, 156, 190, 199, 212, 213, 216, 218, 234, 241, 252, 264, 271, 283, 286, 306, 308, 311, 315, 316, 318, 320, 336, 345, 346, 367, 372, 380, 383, 417, 419, 421, 427, 437, 441, 482, 495, 501, 506, 507, 547, 577, 578, 580, 585, 600, 610, 614, 617, 634, 639, 667, 682, 720, 729, 731, 737, 743, 744, 748, 749, 780, 820, 822, 830, 832, 845, 918], "27": [1, 63, 234, 311, 325, 337, 348, 409, 547, 634], "16": [1, 28, 40, 53, 61, 68, 91, 113, 149, 150, 218, 241, 265, 308, 311, 355, 367, 421, 461, 495, 506, 511, 512, 515, 528, 533, 547, 576, 577, 603, 617, 639, 660, 743, 748, 760, 811, 846, 869, 892, 918], "64": [1, 32, 39, 42, 55, 61, 63, 241, 409, 547, 605, 639, 811, 918], "25": [1, 28, 63, 69, 149, 150, 164, 214, 218, 241, 313, 325, 339, 344, 348, 517, 547, 576, 577, 582, 588, 615, 617, 639, 712, 743, 748, 754, 811, 918], "125": [1, 28, 63, 241, 811, 918], "arg": [2, 3, 4, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 177, 206, 241, 497, 516, 547, 593, 639, 648, 899, 900, 918], "ani": [2, 3, 4, 7, 26, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 65, 84, 85, 86, 87, 88, 89, 90, 96, 97, 99, 100, 101, 105, 107, 108, 109, 111, 116, 118, 119, 123, 126, 130, 134, 138, 140, 141, 143, 160, 161, 162, 176, 177, 186, 187, 202, 203, 205, 206, 212, 241, 253, 268, 272, 298, 340, 358, 372, 389, 391, 400, 417, 419, 431, 434, 461, 472, 481, 495, 503, 514, 521, 533, 547, 565, 571, 593, 639, 647, 648, 664, 668, 713, 744, 763, 780, 791, 798, 820, 822, 834, 837, 869, 880, 890, 898, 899, 900, 918], "kwarg": [2, 3, 4, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 130, 177, 206, 241, 547, 593, 639, 900, 918], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 241, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 547, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 918, 924], "method": [2, 3, 4, 7, 25, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 85, 96, 97, 100, 116, 134, 148, 156, 161, 174, 180, 186, 187, 210, 218, 233, 241, 250, 356, 367, 412, 413, 420, 421, 422, 423, 424, 426, 427, 428, 488, 503, 528, 529, 533, 540, 541, 543, 547, 548, 551, 552, 553, 556, 565, 580, 595, 612, 617, 633, 639, 648, 761, 772, 815, 816, 827, 901, 910, 912, 914, 918, 921, 922, 923], "A": [4, 26, 28, 47, 66, 69, 96, 97, 98, 105, 107, 108, 143, 149, 164, 178, 187, 202, 212, 213, 214, 218, 241, 247, 290, 318, 321, 324, 327, 329, 331, 334, 341, 356, 370, 373, 374, 376, 389, 390, 398, 410, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 447, 448, 453, 454, 456, 475, 478, 501, 512, 516, 547, 576, 582, 597, 614, 617, 639, 686, 718, 721, 724, 730, 732, 735, 738, 745, 761, 822, 823, 824, 826, 829, 830, 831, 855, 856, 861, 862, 864, 870, 871, 880, 883, 918], "encod": [4, 58, 96, 97, 107, 294, 449, 689, 857], "set": [4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 21, 22, 24, 26, 28, 30, 31, 60, 64, 69, 85, 87, 90, 91, 96, 97, 100, 101, 105, 107, 109, 110, 111, 114, 115, 117, 118, 119, 123, 125, 129, 134, 148, 151, 161, 164, 170, 188, 190, 195, 204, 209, 210, 212, 218, 241, 253, 285, 289, 290, 347, 364, 372, 391, 419, 420, 421, 422, 423, 424, 426, 427, 428, 430, 436, 440, 441, 459, 465, 466, 471, 496, 531, 535, 547, 563, 565, 567, 575, 581, 582, 586, 590, 600, 604, 605, 606, 612, 617, 620, 623, 639, 647, 648, 681, 685, 686, 751, 769, 780, 798, 822, 823, 824, 825, 826, 827, 829, 830, 831, 833, 837, 844, 848, 849, 867, 873, 874, 879, 899, 918], "string": [4, 6, 8, 11, 12, 16, 26, 28, 30, 31, 35, 50, 58, 69, 96, 97, 107, 116, 117, 119, 121, 143, 147, 148, 149, 150, 164, 190, 196, 212, 214, 218, 221, 241, 277, 296, 299, 335, 339, 344, 355, 361, 368, 391, 407, 420, 421, 422, 423, 424, 426, 427, 428, 443, 446, 447, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 497, 499, 502, 516, 523, 526, 535, 547, 567, 574, 575, 576, 577, 582, 600, 607, 617, 620, 621, 639, 673, 691, 695, 739, 743, 748, 760, 773, 853, 854, 855, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 918], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 574, 596, 639], "activ": [5, 9, 14, 15, 17, 18, 19, 20, 23, 272, 668], "decim": [5, 26, 28, 241, 429, 547, 832, 918], "temporari": 5, "remov": [5, 7, 132, 213, 241, 253, 265, 353, 355, 459, 465, 471, 513, 528, 533, 547, 564, 614, 639, 660, 760, 867, 873, 879, 918], "later": 5, "onc": [5, 96, 97, 100, 125, 188, 221, 241, 430, 547, 559, 621, 639, 833, 918], "stabil": 5, "happen": 5, "being": [5, 68, 96, 97, 107, 112, 212, 213, 241, 253, 312, 339, 420, 421, 422, 423, 424, 426, 427, 428, 512, 539, 547, 614, 639, 709, 710, 743, 918], "consid": [5, 68, 96, 97, 107, 112, 134, 144, 170, 210, 212, 213, 241, 301, 302, 303, 312, 339, 420, 421, 422, 423, 424, 426, 427, 428, 506, 515, 547, 565, 578, 585, 590, 612, 614, 639, 699, 700, 701, 709, 710, 743, 835, 836, 837, 918], "break": [5, 68, 112, 212, 213, 241, 253, 312, 339, 420, 421, 422, 423, 424, 426, 427, 428, 547, 614, 639, 709, 710, 743, 918], "chang": [5, 24, 59, 68, 96, 97, 112, 212, 213, 214, 241, 253, 312, 313, 339, 408, 420, 421, 422, 423, 424, 426, 427, 428, 547, 614, 639, 709, 710, 742, 743, 811, 843, 918], "current": [5, 8, 24, 85, 98, 125, 127, 128, 241, 290, 339, 408, 547, 556, 560, 561, 639, 698, 702, 743, 811, 918], "alpha": [5, 66, 253, 350, 351, 352, 547, 562, 567, 569, 594, 603, 639, 756, 757, 758, 918], "stage": [5, 253, 547], "cfg": [6, 7, 8, 13, 123, 190, 218, 241, 600, 617, 639], "previous": 6, "save": [6, 556], "share": [6, 50, 136, 241, 755, 918], "option": [6, 7, 8, 28, 36, 59, 69, 91, 96, 99, 100, 101, 105, 108, 109, 111, 113, 116, 117, 118, 119, 164, 170, 174, 202, 209, 241, 381, 419, 420, 421, 422, 423, 424, 426, 427, 428, 440, 466, 493, 521, 535, 547, 556, 581, 582, 590, 639, 788, 792, 822, 823, 824, 825, 826, 827, 829, 830, 831, 837, 848, 874, 897, 918], "paramet": [6, 10, 11, 12, 13, 16, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 44, 47, 49, 51, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 122, 125, 126, 127, 130, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 161, 162, 163, 164, 166, 168, 170, 171, 173, 174, 176, 177, 178, 180, 182, 183, 184, 186, 187, 188, 190, 192, 193, 195, 196, 197, 198, 199, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 221, 223, 226, 233, 235, 241, 249, 252, 253, 262, 265, 268, 269, 270, 271, 272, 275, 276, 277, 284, 285, 286, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 322, 335, 338, 339, 343, 344, 347, 349, 350, 351, 352, 353, 356, 358, 359, 363, 364, 365, 367, 368, 372, 381, 384, 386, 389, 390, 391, 407, 408, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 480, 481, 486, 487, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 515, 516, 517, 519, 520, 521, 522, 523, 528, 529, 530, 531, 532, 533, 535, 536, 537, 547, 560, 562, 564, 565, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 581, 582, 585, 586, 590, 591, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 610, 612, 613, 614, 617, 618, 619, 620, 621, 623, 626, 633, 635, 639, 644, 647, 648, 657, 660, 664, 665, 666, 667, 668, 671, 672, 673, 680, 681, 682, 684, 685, 686, 688, 689, 690, 691, 692, 693, 695, 698, 699, 700, 701, 705, 706, 707, 708, 709, 710, 712, 713, 717, 718, 719, 722, 739, 742, 743, 747, 748, 751, 754, 755, 756, 757, 758, 761, 762, 763, 764, 769, 770, 772, 773, 787, 788, 792, 794, 798, 811, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 844, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 886, 889, 890, 896, 897, 898, 899, 900, 902, 903, 906, 907, 908, 909, 918], "json": [6, 8, 30, 31, 103, 104, 110, 241, 455, 456, 556, 574, 596, 620, 639, 863, 864], "produc": [6, 118, 119, 270, 397, 522, 586, 639, 666], "reset": [7, 123], "default": [7, 24, 25, 26, 28, 29, 30, 31, 32, 64, 84, 86, 87, 88, 89, 90, 91, 94, 96, 97, 105, 107, 116, 117, 118, 119, 122, 134, 136, 148, 150, 151, 161, 164, 170, 176, 178, 186, 187, 188, 204, 210, 212, 219, 241, 285, 289, 290, 299, 349, 350, 351, 352, 364, 386, 391, 404, 405, 408, 413, 430, 436, 453, 459, 461, 465, 466, 471, 472, 496, 503, 517, 521, 531, 533, 535, 547, 565, 567, 575, 577, 582, 590, 605, 612, 620, 639, 681, 685, 686, 695, 754, 755, 756, 757, 758, 769, 798, 807, 808, 811, 816, 833, 844, 852, 861, 867, 869, 873, 874, 879, 907, 918], "state": [7, 66, 77, 506, 556, 562, 567, 569, 594, 603, 639], "note": [7, 16, 28, 36, 59, 69, 84, 85, 86, 88, 90, 94, 96, 98, 99, 105, 108, 117, 118, 119, 122, 123, 125, 126, 130, 139, 149, 150, 161, 163, 164, 174, 177, 186, 187, 203, 205, 209, 213, 214, 218, 241, 253, 272, 289, 310, 311, 315, 316, 335, 339, 344, 368, 374, 376, 420, 421, 422, 423, 424, 426, 427, 428, 440, 457, 459, 460, 465, 471, 472, 479, 506, 515, 530, 547, 562, 569, 570, 576, 577, 578, 582, 585, 597, 603, 614, 617, 639, 668, 685, 707, 708, 739, 748, 836, 837, 843, 848, 865, 867, 868, 873, 879, 888, 918], "oper": [7, 28, 50, 67, 74, 75, 84, 86, 87, 88, 89, 90, 96, 105, 126, 138, 143, 148, 155, 165, 171, 174, 176, 177, 181, 201, 205, 206, 209, 212, 220, 221, 241, 248, 290, 307, 308, 309, 310, 311, 312, 380, 400, 415, 493, 494, 502, 512, 547, 569, 575, 578, 581, 585, 590, 591, 621, 639, 647, 705, 706, 707, 708, 709, 818, 895, 898, 899, 900, 908, 918], "from": [7, 26, 28, 59, 69, 84, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 131, 132, 136, 138, 147, 149, 150, 161, 162, 164, 165, 170, 182, 186, 188, 190, 209, 210, 212, 214, 241, 307, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 353, 367, 381, 404, 405, 408, 430, 453, 455, 461, 472, 488, 490, 499, 509, 510, 511, 521, 533, 546, 547, 564, 569, 574, 576, 577, 582, 590, 596, 597, 600, 612, 618, 639, 647, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 755, 788, 792, 807, 808, 809, 811, 833, 861, 863, 869, 906, 909, 918], "environ": [7, 24], "local": [7, 99, 108, 812, 813, 918], "non": [7, 28, 36, 59, 89, 162, 170, 190, 213, 218, 241, 408, 419, 420, 421, 422, 423, 424, 426, 427, 428, 448, 454, 499, 502, 535, 547, 590, 600, 614, 617, 639, 686, 811, 822, 823, 824, 825, 826, 827, 829, 830, 831, 856, 862, 899, 918], "env": 7, "back": [7, 59, 138, 206, 241, 407, 547, 647, 900, 918], "valu": [7, 10, 11, 24, 26, 28, 30, 44, 45, 57, 59, 67, 68, 87, 89, 96, 97, 98, 107, 112, 114, 115, 116, 117, 118, 119, 121, 123, 125, 126, 134, 138, 139, 140, 144, 147, 149, 150, 151, 152, 156, 161, 167, 168, 169, 170, 172, 174, 176, 178, 179, 180, 182, 186, 187, 188, 192, 193, 196, 197, 198, 199, 202, 203, 206, 212, 213, 214, 215, 224, 225, 227, 228, 229, 231, 232, 241, 247, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 270, 271, 274, 275, 276, 278, 280, 281, 282, 284, 287, 288, 290, 291, 292, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 308, 311, 312, 313, 315, 316, 318, 320, 332, 336, 345, 350, 351, 352, 354, 356, 357, 358, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 379, 382, 383, 387, 388, 389, 391, 392, 393, 394, 401, 402, 403, 404, 405, 406, 408, 412, 413, 416, 419, 420, 421, 422, 423, 424, 426, 427, 428, 430, 431, 432, 433, 434, 437, 438, 439, 440, 442, 444, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 462, 463, 466, 468, 469, 470, 475, 479, 481, 482, 483, 484, 486, 487, 488, 489, 490, 494, 499, 502, 504, 506, 507, 508, 514, 515, 521, 523, 524, 525, 526, 527, 530, 531, 536, 539, 547, 565, 570, 571, 576, 577, 579, 580, 587, 588, 589, 590, 592, 595, 597, 601, 602, 607, 608, 609, 614, 615, 620, 624, 625, 627, 628, 629, 631, 632, 639, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 662, 663, 666, 667, 670, 671, 672, 674, 676, 677, 678, 680, 684, 687, 689, 690, 691, 692, 695, 696, 699, 700, 701, 703, 704, 709, 710, 711, 712, 714, 715, 718, 720, 736, 740, 749, 755, 756, 757, 758, 761, 762, 763, 766, 768, 769, 772, 773, 775, 777, 778, 780, 781, 782, 783, 784, 785, 789, 798, 799, 800, 802, 803, 805, 807, 808, 809, 810, 811, 814, 815, 816, 822, 823, 824, 825, 826, 827, 829, 830, 831, 833, 834, 835, 836, 837, 840, 841, 845, 846, 847, 848, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 868, 870, 871, 874, 876, 877, 878, 883, 888, 890, 891, 892, 893, 900, 901, 904, 906, 908, 909, 918], "exampl": [7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 50, 59, 60, 61, 62, 63, 64, 67, 68, 69, 84, 86, 87, 88, 89, 90, 91, 93, 94, 97, 98, 99, 100, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 241, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 547, 556, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 667, 668, 669, 672, 673, 675, 680, 681, 682, 684, 686, 693, 695, 696, 697, 698, 699, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 761, 762, 763, 764, 766, 769, 770, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 811, 812, 813, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 844, 845, 846, 847, 849, 850, 852, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 918], "bool": [9, 12, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 30, 32, 59, 64, 66, 67, 84, 85, 89, 96, 97, 101, 105, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 125, 127, 128, 140, 141, 143, 144, 146, 147, 148, 149, 154, 155, 157, 158, 159, 164, 176, 178, 188, 194, 196, 202, 206, 209, 210, 211, 214, 216, 218, 225, 227, 228, 231, 241, 250, 251, 252, 253, 262, 265, 269, 270, 272, 286, 289, 294, 298, 307, 308, 309, 310, 311, 312, 340, 349, 350, 351, 352, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 389, 395, 396, 413, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 432, 434, 435, 440, 442, 443, 447, 449, 451, 461, 462, 463, 467, 468, 470, 472, 477, 486, 487, 490, 494, 495, 496, 497, 503, 506, 521, 531, 533, 535, 539, 547, 560, 562, 567, 569, 571, 572, 575, 576, 581, 582, 586, 590, 594, 603, 604, 605, 607, 612, 613, 617, 625, 627, 628, 631, 639, 645, 646, 647, 648, 657, 660, 665, 666, 668, 682, 685, 689, 693, 698, 705, 706, 707, 708, 709, 744, 754, 756, 757, 758, 764, 768, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 812, 813, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 837, 838, 843, 848, 850, 855, 857, 859, 869, 870, 871, 875, 876, 878, 880, 898, 899, 900, 902, 903, 906, 908, 918], "ascii": [9, 16, 458, 460, 464, 475, 866, 868, 872, 883], "charact": [9, 11, 16, 22, 26, 96, 97, 107, 241, 335, 452, 457, 458, 459, 464, 465, 467, 468, 471, 475, 594, 639, 739, 860, 865, 866, 867, 872, 873, 875, 876, 879, 883], "print": [9, 11, 13, 15, 21, 97, 113, 135, 147, 148, 162, 165, 220, 241, 366, 547, 579, 639, 780, 822, 918], "tabl": [9, 12, 13, 15, 16, 17, 18, 19, 21, 22, 27, 28, 49, 84, 96, 97, 99, 107, 108, 178, 201, 206, 212, 213, 241, 614, 639, 900, 918], "outlin": 9, "fals": [9, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 28, 30, 32, 59, 64, 66, 69, 85, 89, 96, 97, 100, 101, 105, 107, 110, 111, 114, 115, 116, 117, 118, 119, 125, 127, 128, 131, 143, 144, 146, 147, 148, 149, 154, 155, 157, 158, 159, 161, 164, 165, 168, 173, 174, 176, 178, 179, 186, 187, 188, 194, 196, 202, 206, 209, 214, 216, 218, 224, 225, 227, 228, 229, 231, 234, 241, 250, 251, 253, 262, 265, 269, 272, 286, 289, 307, 308, 309, 310, 311, 312, 340, 349, 350, 351, 352, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 389, 413, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 432, 435, 440, 442, 443, 447, 451, 455, 461, 462, 463, 467, 468, 470, 472, 486, 487, 490, 494, 496, 497, 503, 506, 521, 531, 533, 535, 539, 547, 560, 561, 562, 567, 569, 575, 576, 581, 582, 584, 586, 594, 603, 604, 605, 607, 617, 624, 625, 627, 628, 629, 631, 634, 639, 647, 657, 660, 668, 682, 685, 693, 697, 698, 705, 706, 707, 708, 709, 744, 754, 756, 757, 758, 764, 773, 774, 775, 777, 780, 781, 782, 783, 784, 785, 787, 788, 789, 792, 804, 812, 813, 816, 817, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 838, 843, 848, 850, 855, 859, 863, 869, 870, 871, 875, 876, 878, 880, 898, 899, 900, 902, 903, 906, 908, 909, 918], "revert": 9, "abc": [9, 14, 15, 17, 18, 19, 20, 21, 462, 870], "xyz": [9, 14, 15, 17, 18, 19, 20, 21, 448, 454, 856, 862, 897, 918], "f64": [9, 12, 14, 15, 17, 18, 19, 20, 21, 59, 61, 63, 68, 87, 112, 118, 127, 128, 130, 131, 132, 134, 135, 139, 140, 143, 146, 147, 148, 155, 163, 164, 168, 169, 179, 180, 195, 196, 197, 215, 218, 221, 225, 227, 228, 229, 230, 231, 233, 234, 241, 247, 254, 255, 256, 257, 258, 259, 281, 298, 300, 304, 305, 312, 315, 316, 340, 349, 350, 351, 352, 353, 354, 362, 367, 374, 376, 377, 378, 380, 381, 386, 387, 392, 393, 394, 401, 404, 405, 408, 409, 412, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 438, 439, 440, 444, 445, 483, 484, 491, 498, 499, 501, 503, 505, 513, 524, 525, 528, 533, 534, 538, 547, 560, 564, 565, 570, 571, 575, 581, 582, 588, 589, 595, 607, 608, 615, 617, 618, 621, 625, 627, 628, 629, 630, 631, 633, 634, 639, 649, 650, 651, 652, 653, 654, 696, 703, 704, 709, 710, 711, 744, 757, 758, 762, 766, 811, 822, 824, 825, 827, 828, 829, 831, 832, 846, 847, 851, 892, 893, 905, 918], "fmt": [10, 342, 366, 472, 516, 547, 579, 639, 746, 880], "mix": [10, 472, 711, 880, 918], "control": [10, 28, 117, 241, 567, 639], "how": [10, 28, 50, 67, 87, 90, 98, 134, 163, 212, 213, 241, 270, 271, 299, 313, 367, 407, 416, 547, 565, 581, 614, 639, 666, 667, 695, 712, 918], "float": [10, 28, 38, 39, 68, 112, 114, 115, 116, 118, 119, 136, 139, 164, 180, 188, 193, 233, 241, 269, 270, 300, 301, 302, 303, 315, 316, 340, 349, 350, 351, 352, 357, 362, 367, 368, 370, 373, 374, 376, 377, 378, 386, 392, 401, 404, 405, 409, 412, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 434, 498, 508, 523, 524, 525, 526, 529, 531, 534, 536, 538, 547, 570, 582, 595, 602, 603, 633, 639, 665, 666, 693, 696, 699, 700, 701, 710, 713, 744, 754, 755, 756, 757, 758, 762, 766, 773, 779, 792, 795, 799, 800, 801, 802, 807, 808, 814, 815, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 836, 837, 848, 852, 888, 907, 918], "point": [10, 28, 38, 39, 108, 118, 119, 139, 149, 165, 241, 300, 315, 316, 340, 357, 362, 374, 376, 429, 430, 547, 570, 576, 586, 597, 639, 696, 744, 762, 766, 779, 832, 833, 918], "displai": [10, 15, 19, 28, 241], "full": [10, 35, 65, 96, 97, 99, 107, 108, 586, 639], "format": [10, 12, 16, 26, 28, 95, 96, 97, 107, 112, 137, 147, 161, 170, 187, 203, 239, 241, 339, 342, 461, 472, 494, 568, 574, 590, 620, 639, 746, 869, 880, 917], "number": [10, 11, 13, 21, 22, 26, 28, 32, 59, 78, 84, 86, 88, 90, 93, 94, 96, 97, 100, 107, 110, 117, 118, 120, 122, 127, 136, 137, 139, 140, 152, 161, 162, 165, 166, 173, 174, 188, 192, 193, 199, 212, 224, 226, 235, 241, 263, 271, 276, 284, 288, 290, 292, 306, 312, 313, 323, 325, 330, 332, 340, 345, 346, 348, 350, 351, 352, 356, 358, 363, 365, 374, 376, 383, 384, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 433, 434, 436, 457, 460, 468, 469, 480, 486, 503, 504, 519, 533, 537, 547, 560, 568, 569, 570, 571, 578, 585, 594, 601, 602, 605, 610, 624, 626, 635, 639, 667, 672, 680, 684, 686, 698, 709, 712, 723, 725, 734, 736, 744, 749, 750, 752, 755, 756, 757, 758, 761, 763, 770, 779, 794, 804, 805, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 840, 841, 844, 852, 865, 868, 876, 877, 889, 902, 907, 918], "int": [11, 13, 21, 22, 26, 28, 32, 36, 61, 87, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 107, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 126, 127, 136, 139, 140, 142, 151, 152, 153, 155, 161, 162, 164, 166, 167, 168, 172, 173, 174, 184, 186, 188, 191, 192, 193, 195, 197, 198, 199, 200, 207, 212, 215, 217, 219, 226, 235, 241, 269, 270, 271, 275, 276, 284, 285, 288, 289, 290, 292, 301, 302, 303, 312, 313, 350, 351, 352, 356, 357, 358, 363, 364, 365, 368, 384, 408, 409, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 436, 441, 445, 453, 458, 461, 464, 466, 468, 469, 475, 480, 481, 482, 486, 491, 496, 503, 504, 508, 509, 510, 511, 517, 519, 523, 525, 526, 527, 528, 531, 533, 534, 535, 536, 537, 538, 547, 560, 569, 570, 571, 578, 582, 585, 594, 601, 602, 605, 606, 608, 610, 611, 615, 616, 619, 626, 635, 639, 655, 656, 665, 666, 667, 671, 672, 680, 681, 684, 685, 686, 693, 697, 698, 699, 700, 701, 709, 712, 755, 756, 757, 758, 761, 762, 763, 769, 770, 773, 793, 794, 799, 800, 802, 804, 805, 807, 808, 809, 810, 811, 814, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 840, 841, 844, 849, 852, 861, 866, 869, 872, 874, 876, 877, 883, 888, 889, 890, 891, 902, 907, 918], "liter": [12, 16, 64, 69, 100, 119, 147, 161, 167, 168, 172, 173, 176, 186, 187, 190, 198, 202, 218, 241, 250, 251, 318, 356, 368, 380, 414, 447, 462, 463, 496, 499, 502, 509, 510, 521, 531, 535, 539, 547, 571, 600, 617, 639, 645, 646, 718, 761, 773, 836, 837, 855, 870, 871, 918], "left": [12, 69, 114, 115, 149, 150, 163, 164, 213, 241, 350, 351, 352, 367, 368, 420, 421, 422, 423, 424, 426, 427, 428, 431, 458, 475, 485, 499, 506, 507, 515, 530, 547, 576, 577, 581, 582, 614, 639, 756, 757, 758, 773, 834, 866, 883, 901, 918], "center": [12, 350, 351, 352, 419, 420, 421, 422, 423, 424, 426, 427, 428, 547, 756, 757, 758, 822, 823, 824, 825, 826, 827, 829, 830, 831, 918], "right": [12, 14, 28, 69, 96, 97, 114, 115, 149, 150, 163, 164, 241, 350, 351, 352, 368, 420, 421, 422, 423, 424, 426, 427, 428, 431, 440, 464, 499, 547, 576, 577, 581, 582, 639, 756, 757, 758, 773, 834, 848, 872, 918], "cell": 12, "align": [12, 59, 475, 883], "keyerror": [12, 16], "recognis": [12, 16, 116], "column_abc": 12, "column_xyz": 12, "If": [13, 26, 28, 30, 31, 32, 50, 64, 65, 68, 69, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 99, 100, 101, 105, 107, 108, 109, 110, 111, 125, 126, 134, 138, 147, 149, 150, 161, 164, 170, 174, 187, 188, 195, 203, 204, 205, 209, 210, 212, 213, 241, 253, 285, 290, 301, 302, 303, 318, 359, 381, 389, 391, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 436, 440, 441, 455, 457, 459, 460, 465, 466, 467, 468, 469, 471, 472, 486, 493, 495, 496, 503, 504, 506, 515, 521, 531, 533, 535, 547, 565, 567, 576, 577, 581, 582, 586, 590, 597, 605, 606, 612, 614, 620, 623, 639, 647, 648, 681, 699, 700, 701, 710, 718, 768, 792, 818, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 838, 844, 848, 849, 863, 865, 867, 868, 873, 874, 875, 876, 877, 879, 880, 895, 899, 902, 908, 918], "rang": [13, 28, 68, 69, 98, 136, 149, 162, 241, 320, 332, 336, 337, 339, 344, 345, 367, 496, 501, 509, 510, 547, 576, 639, 710, 720, 736, 740, 741, 743, 748, 749, 755, 811, 918], "100": [13, 28, 87, 90, 96, 97, 107, 110, 241, 475, 496, 639, 823, 824, 826, 918], "98": [13, 155, 241, 442, 481, 486, 547], "99": [13, 139, 140, 155, 158, 241, 248, 356, 358, 442, 481, 486, 547, 570, 571, 639, 754, 761, 918], "10": [13, 25, 26, 28, 29, 32, 59, 67, 68, 69, 98, 107, 118, 119, 128, 138, 146, 149, 150, 152, 154, 155, 156, 173, 177, 179, 183, 184, 190, 199, 218, 221, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 241, 252, 260, 261, 262, 264, 265, 271, 276, 284, 285, 288, 301, 306, 308, 311, 313, 315, 316, 318, 339, 344, 347, 364, 365, 367, 372, 380, 383, 384, 387, 408, 421, 441, 475, 480, 499, 506, 512, 515, 517, 519, 522, 528, 533, 537, 547, 562, 576, 577, 578, 580, 585, 593, 594, 600, 605, 609, 610, 617, 621, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 639, 648, 667, 672, 680, 681, 684, 699, 710, 712, 718, 748, 751, 754, 770, 780, 794, 796, 811, 836, 837, 889, 918], "95": [13, 248, 547], "96": [13, 248, 547], "97": [13, 155, 241, 248, 547], "move": [14, 350, 351, 352, 420, 421, 423, 427, 547, 756, 757, 758, 823, 824, 826, 830, 918], "inlin": 14, "parenthes": 14, "below": [15, 28, 99, 108, 134, 241, 367, 539, 547, 565, 639], "when": [15, 19, 28, 32, 50, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 91, 96, 97, 98, 101, 105, 107, 108, 109, 110, 118, 119, 121, 126, 135, 136, 138, 140, 143, 149, 177, 186, 190, 196, 204, 210, 241, 301, 302, 303, 350, 351, 352, 358, 389, 391, 398, 442, 443, 459, 465, 471, 472, 497, 506, 515, 547, 571, 576, 586, 600, 605, 607, 612, 639, 647, 699, 700, 701, 755, 756, 757, 758, 763, 798, 836, 837, 867, 873, 879, 896, 918], "ascii_ful": 16, "ascii_full_condens": 16, "ascii_no_bord": 16, "ascii_borders_onli": 16, "ascii_borders_only_condens": 16, "ascii_horizontal_onli": 16, "ascii_markdown": 16, "utf8_ful": [16, 59], "utf8_full_condens": 16, "utf8_no_bord": 16, "utf8_borders_onli": 16, "utf8_horizontal_onli": 16, "noth": [16, 448, 453, 454, 456, 856, 861, 862, 864], "none": [16, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 45, 49, 59, 68, 69, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 126, 127, 131, 134, 139, 140, 147, 149, 150, 151, 156, 163, 164, 165, 168, 170, 174, 175, 186, 188, 190, 193, 195, 196, 202, 204, 206, 209, 210, 211, 212, 213, 214, 218, 221, 241, 249, 252, 253, 264, 275, 285, 290, 292, 301, 302, 303, 306, 308, 311, 315, 316, 338, 339, 344, 350, 351, 352, 353, 356, 357, 358, 363, 364, 367, 368, 374, 375, 376, 377, 378, 383, 389, 391, 406, 408, 414, 419, 420, 421, 422, 423, 424, 426, 427, 428, 430, 434, 435, 436, 437, 441, 442, 446, 447, 450, 451, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 468, 469, 470, 471, 472, 475, 476, 477, 485, 493, 495, 496, 499, 502, 504, 510, 511, 513, 514, 521, 522, 531, 532, 534, 535, 538, 547, 560, 561, 565, 570, 571, 576, 577, 580, 581, 582, 584, 586, 590, 600, 602, 603, 604, 605, 606, 607, 612, 613, 614, 617, 618, 620, 621, 623, 639, 648, 655, 656, 671, 681, 686, 698, 699, 710, 711, 713, 726, 727, 728, 733, 742, 743, 748, 753, 754, 756, 757, 758, 761, 762, 763, 765, 768, 769, 771, 772, 773, 784, 785, 788, 792, 798, 799, 800, 801, 802, 806, 815, 822, 823, 824, 825, 826, 827, 829, 830, 831, 833, 839, 841, 844, 845, 848, 849, 852, 854, 855, 858, 859, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 876, 877, 878, 879, 880, 894, 897, 900, 901, 907, 908, 918], "rounded_corn": 16, "style": [16, 28, 178, 241], "border": 16, "line": [16, 28, 96, 97, 100, 107, 147, 157, 159, 241], "includ": [16, 24, 26, 28, 65, 99, 108, 118, 136, 149, 209, 212, 241, 340, 368, 467, 468, 506, 547, 576, 639, 744, 755, 773, 875, 876, 908, 918], "row": [16, 21, 26, 28, 30, 32, 59, 60, 62, 76, 78, 83, 87, 88, 90, 96, 97, 100, 101, 105, 107, 109, 110, 111, 114, 117, 118, 126, 127, 134, 138, 141, 143, 147, 149, 151, 152, 157, 159, 161, 162, 164, 165, 166, 170, 174, 188, 195, 199, 200, 203, 210, 212, 213, 219, 223, 226, 235, 241, 253, 263, 273, 355, 365, 384, 408, 417, 441, 452, 480, 497, 506, 507, 515, 519, 523, 526, 530, 537, 547, 560, 562, 565, 569, 572, 573, 576, 578, 582, 583, 585, 586, 590, 605, 606, 610, 611, 612, 614, 619, 623, 626, 635, 639, 647, 669, 760, 770, 794, 811, 820, 849, 860, 889, 918], "divid": [16, 339, 344, 350, 351, 352, 381, 547, 743, 748, 756, 757, 758, 792, 918], "same": [16, 28, 50, 59, 66, 101, 117, 126, 132, 148, 196, 210, 218, 221, 223, 241, 247, 252, 355, 407, 419, 420, 421, 422, 423, 424, 426, 427, 428, 443, 477, 500, 547, 564, 575, 586, 607, 612, 617, 621, 623, 639, 643, 647, 648, 718, 760, 822, 823, 824, 825, 826, 827, 829, 830, 831, 909, 918], "dens": [16, 147, 241, 413, 547, 816, 918], "space": 16, "horizont": [16, 67, 143, 154, 212, 241, 502, 506, 507, 508, 512, 515, 523, 526, 530, 536], "markdown": 16, "compat": [16, 28, 32, 98, 108, 241, 605, 639], "No": 16, "appli": [16, 26, 28, 67, 107, 116, 118, 119, 143, 177, 241, 320, 323, 325, 326, 328, 330, 332, 333, 336, 337, 340, 345, 346, 348, 351, 352, 389, 419, 420, 421, 423, 427, 472, 493, 496, 506, 507, 515, 522, 530, 547, 578, 585, 586, 593, 639, 720, 723, 725, 729, 731, 734, 736, 737, 740, 741, 744, 749, 750, 752, 757, 758, 822, 823, 824, 826, 830, 880, 918], "round": [16, 28, 61, 241, 300, 362, 483, 547, 696, 766, 918], "corner": 16, "op": [16, 119, 241, 416, 547, 639, 918], "The": [16, 27, 28, 32, 44, 51, 59, 65, 84, 86, 87, 88, 90, 93, 96, 98, 105, 107, 108, 126, 133, 135, 147, 148, 149, 150, 151, 156, 161, 164, 171, 176, 186, 187, 190, 211, 214, 218, 221, 223, 241, 289, 290, 292, 293, 294, 295, 320, 332, 335, 336, 339, 344, 345, 353, 356, 363, 364, 389, 407, 413, 416, 419, 420, 421, 422, 423, 424, 426, 427, 428, 437, 440, 446, 449, 450, 455, 457, 458, 459, 464, 465, 471, 475, 500, 513, 517, 532, 535, 540, 541, 543, 547, 548, 551, 552, 553, 576, 577, 578, 580, 582, 585, 586, 591, 594, 600, 605, 613, 617, 621, 623, 639, 685, 688, 689, 690, 698, 720, 736, 739, 740, 743, 748, 749, 761, 769, 772, 816, 822, 823, 824, 825, 826, 827, 829, 830, 831, 845, 848, 854, 857, 858, 863, 865, 866, 867, 872, 873, 879, 883, 910, 912, 914, 918, 921, 922, 923], "one": [16, 27, 28, 59, 76, 84, 86, 87, 88, 89, 90, 119, 140, 141, 147, 148, 149, 150, 161, 170, 178, 186, 187, 208, 222, 241, 248, 358, 380, 419, 442, 481, 493, 523, 526, 536, 547, 571, 572, 575, 576, 577, 590, 618, 622, 639, 647, 763, 788, 822, 884, 918], "more": [16, 28, 30, 32, 59, 83, 84, 85, 86, 87, 88, 89, 90, 99, 105, 108, 118, 119, 126, 130, 161, 165, 170, 174, 186, 187, 188, 210, 223, 241, 253, 301, 302, 303, 380, 381, 389, 430, 440, 487, 523, 526, 536, 547, 590, 605, 612, 623, 639, 648, 699, 700, 701, 788, 792, 833, 848, 903, 918, 925], "semigraph": 16, "box": [16, 126, 241], "draw": [16, 21, 22], "found": [16, 26, 71, 80, 82, 87, 135, 213, 241, 431, 456, 472, 547, 614, 639, 834, 864, 918], "unicod": 16, "block": [16, 148, 210, 241, 575, 597, 612, 619, 639, 836, 837, 918], "http": [16, 28, 85, 98, 125, 130, 241, 453, 861, 925], "en": 16, "wikipedia": 16, "org": [16, 85, 98, 125, 130, 241], "wiki": 16, "drawing_charact": 16, "box_draw": 16, "hide": [17, 18, 19, 20, 28, 241], "etc": [17, 28, 96, 99, 101, 105, 108, 109, 111, 241, 496, 836, 837, 918], "inform": [19, 65, 99, 108, 130, 241, 301, 302, 303, 381, 440, 547, 594, 639, 699, 700, 701, 792, 848, 918], "separ": [20, 26, 91, 176, 178, 204, 209, 211, 241, 253, 273, 277, 452, 502, 506, 507, 547, 613, 639, 669, 673, 860, 887, 896, 918], "between": [20, 67, 116, 117, 118, 119, 180, 233, 241, 277, 298, 314, 368, 408, 412, 424, 446, 503, 505, 528, 529, 533, 547, 595, 633, 639, 673, 693, 713, 773, 811, 815, 827, 854, 918], "set_tbl_column_data_type_inlin": 20, "max": [21, 28, 32, 118, 119, 131, 140, 148, 149, 150, 178, 241, 301, 302, 308, 358, 407, 413, 420, 432, 469, 547, 571, 575, 576, 577, 605, 639, 686, 699, 700, 705, 711, 763, 816, 823, 838, 877, 918], "both": [21, 26, 50, 69, 98, 149, 150, 163, 164, 171, 186, 241, 252, 368, 420, 421, 422, 423, 424, 426, 427, 428, 547, 576, 577, 581, 582, 591, 639, 773, 918], "element": [21, 94, 119, 122, 253, 254, 255, 256, 257, 258, 259, 270, 272, 273, 304, 305, 307, 308, 309, 310, 311, 312, 354, 364, 372, 387, 408, 413, 416, 431, 437, 438, 439, 444, 468, 469, 483, 484, 486, 547, 648, 649, 650, 651, 652, 653, 654, 666, 668, 669, 698, 703, 704, 705, 706, 707, 708, 709, 759, 764, 780, 796, 811, 816, 834, 845, 846, 847, 851, 852, 876, 877, 892, 893, 902, 903, 907, 918], "width": [22, 28, 96, 97, 241, 458, 464, 475, 639, 866, 872, 883], "char": [22, 50, 460, 868], "enabl": [23, 190, 218, 241, 432, 547, 600, 617, 639, 838, 918], "addit": [23, 28, 87, 99, 108, 116, 117, 132, 137, 148, 176, 190, 196, 211, 218, 221, 241, 353, 356, 407, 443, 499, 500, 513, 532, 535, 547, 564, 568, 575, 600, 607, 613, 617, 621, 639, 761, 918], "verbos": 23, "debug": [23, 562, 569, 586, 639], "log": [23, 61, 349, 486, 547, 754, 902, 918], "if_set": 24, "dict": [24, 28, 32, 60, 62, 65, 84, 86, 87, 88, 89, 90, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 109, 111, 118, 161, 176, 182, 186, 187, 189, 202, 203, 241, 391, 547, 597, 599, 639, 798, 918], "show": [24, 134, 147, 165, 175, 241, 565, 594, 603, 639], "variabl": [24, 91, 170, 204, 241, 590, 639, 896, 918], "restrict": [24, 469, 877], "dictionari": [24, 28, 84, 86, 87, 88, 90, 96, 97, 102, 106, 107, 161, 176, 186, 187, 202, 203, 241, 391, 547, 639, 711, 798, 918], "those": [24, 28, 96, 241, 413, 547, 816, 918], "_have_": 24, "been": [24, 28, 68, 91, 241, 413, 547, 816, 918], "set_stat": 24, "all_stat": 24, "file": [25, 26, 29, 30, 31, 32, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 138, 241, 569, 596, 604, 605, 620, 639, 647, 918], "binaryio": [25, 29, 95, 96, 100, 101, 102, 105, 106, 241], "bytesio": [25, 26, 28, 29, 32, 95, 96, 97, 100, 101, 105, 241], "path": [25, 26, 28, 29, 30, 31, 32, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 241, 432, 456, 547, 596, 604, 605, 620, 639, 838, 864, 918], "compress": [25, 29, 32, 241, 604, 605, 639], "avrocompress": [25, 241], "uncompress": [25, 29, 32, 101, 109, 241, 605, 639], "write": [25, 26, 27, 28, 29, 30, 32, 97, 101, 241, 301, 302, 303, 547, 584, 603, 605, 620, 639, 699, 700, 701, 918], "apach": [25, 32, 95, 98, 241], "avro": [25, 95, 241, 556], "should": [25, 26, 28, 29, 30, 31, 32, 84, 86, 88, 90, 91, 94, 99, 116, 117, 119, 122, 125, 126, 132, 149, 161, 164, 186, 187, 203, 204, 211, 223, 241, 248, 253, 272, 299, 312, 347, 353, 374, 376, 419, 420, 421, 422, 423, 424, 426, 427, 428, 431, 440, 500, 513, 520, 521, 547, 564, 576, 581, 582, 586, 603, 604, 605, 613, 620, 623, 639, 648, 668, 695, 709, 751, 822, 823, 824, 825, 826, 827, 829, 830, 831, 834, 848, 918], "written": [25, 26, 28, 29, 30, 31, 32, 241, 604, 605, 620, 639], "snappi": [25, 32, 241, 605, 639], "deflat": [25, 241], "import": [25, 26, 28, 29, 32, 35, 59, 69, 84, 88, 89, 107, 108, 112, 114, 115, 116, 117, 118, 119, 131, 147, 149, 162, 164, 206, 212, 214, 241, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 511, 521, 576, 582, 586, 639, 703, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 777, 781, 782, 783, 788, 822, 846, 892, 918], "pathlib": [25, 26, 29, 32, 107, 110, 241, 604, 605, 639], "foo": [25, 26, 29, 30, 31, 32, 91, 126, 129, 130, 132, 133, 134, 135, 138, 141, 142, 143, 144, 145, 146, 151, 152, 153, 154, 155, 156, 158, 163, 166, 167, 168, 169, 172, 175, 178, 180, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 203, 204, 205, 206, 207, 209, 210, 211, 215, 216, 217, 220, 241, 249, 269, 274, 275, 278, 279, 301, 302, 303, 335, 365, 366, 409, 417, 433, 434, 446, 448, 450, 452, 454, 459, 465, 467, 469, 471, 473, 474, 480, 482, 493, 496, 498, 500, 503, 504, 505, 514, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 532, 533, 534, 537, 538, 539, 547, 563, 564, 565, 566, 572, 579, 580, 581, 597, 599, 600, 612, 613, 616, 618, 620, 639, 673, 699, 739, 820, 856, 858, 860, 862, 877, 918], "bar": [25, 26, 29, 30, 31, 32, 91, 126, 129, 130, 132, 133, 134, 135, 138, 141, 142, 143, 144, 145, 146, 152, 154, 155, 156, 158, 163, 166, 167, 168, 169, 172, 175, 178, 180, 182, 183, 184, 186, 188, 189, 190, 192, 193, 195, 197, 198, 199, 201, 203, 204, 205, 206, 207, 210, 211, 215, 216, 220, 241, 249, 279, 366, 440, 450, 452, 467, 469, 493, 498, 500, 503, 504, 505, 514, 519, 523, 524, 525, 526, 527, 528, 532, 533, 534, 537, 538, 539, 547, 563, 564, 565, 566, 572, 579, 580, 581, 597, 599, 600, 612, 613, 616, 620, 639, 673, 848, 858, 860, 877, 918], "ham": [25, 26, 29, 32, 91, 129, 130, 132, 133, 134, 135, 141, 142, 144, 151, 152, 154, 163, 167, 168, 169, 172, 175, 180, 182, 184, 186, 188, 189, 190, 192, 193, 195, 197, 198, 199, 204, 205, 206, 207, 210, 215, 216, 241, 500, 563, 564, 565, 566, 572, 581, 597, 599, 600, 612, 618, 639], "d": [25, 26, 29, 32, 50, 67, 87, 112, 131, 147, 151, 152, 155, 163, 166, 199, 201, 212, 216, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 241, 322, 342, 368, 435, 448, 454, 468, 472, 499, 517, 547, 581, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 639, 722, 746, 773, 856, 862, 876, 880, 918], "e": [25, 26, 29, 32, 50, 85, 96, 97, 100, 101, 105, 109, 111, 131, 147, 152, 166, 199, 201, 212, 241, 253, 349, 353, 368, 386, 391, 435, 440, 513, 547, 584, 597, 639, 754, 773, 835, 848, 899, 918], "dirpath": [25, 26, 29, 32, 107, 241], "new_fil": [25, 26, 29, 32, 241], "has_head": [26, 28, 96, 97, 100, 107, 241], "sep": [26, 93, 96, 97, 107, 241], "quot": [26, 96, 97, 107, 241], "batch_siz": [26, 96, 97, 110, 241], "1024": [26, 32, 96, 97, 110, 241, 605, 639], "datetime_format": [26, 241], "date_format": [26, 241, 342], "time_format": [26, 241], "float_precis": [26, 28, 241], "null_valu": [26, 96, 97, 107, 241], "comma": [26, 241], "csv": [26, 96, 97, 100, 107, 241, 556, 604, 605, 639], "result": [26, 30, 31, 59, 88, 90, 98, 99, 107, 109, 111, 112, 119, 138, 149, 160, 174, 193, 206, 221, 241, 350, 351, 352, 356, 381, 407, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 432, 434, 467, 468, 496, 506, 507, 508, 522, 536, 547, 559, 576, 586, 594, 602, 604, 605, 620, 621, 639, 647, 756, 757, 758, 792, 820, 822, 823, 824, 825, 826, 827, 829, 830, 831, 838, 841, 875, 876, 899, 918], "instead": [26, 30, 31, 64, 94, 96, 105, 118, 122, 126, 149, 161, 174, 176, 186, 187, 190, 206, 218, 241, 262, 265, 457, 459, 465, 471, 496, 531, 535, 547, 570, 576, 600, 617, 620, 639, 657, 660, 836, 837, 865, 867, 873, 879, 900, 918], "whether": [26, 69, 88, 90, 119, 241, 395, 396, 432, 547, 586, 639], "header": [26, 28, 32, 96, 97, 100, 107, 135, 178, 209, 241, 605, 639], "field": [26, 51, 80, 82, 87, 211, 241, 290, 391, 455, 468, 469, 477, 506, 507, 522, 535, 547, 613, 639, 686, 876, 877, 886, 887], "symbol": [26, 241], "byte": [26, 96, 97, 100, 101, 102, 105, 106, 107, 136, 241, 293, 296, 297, 457, 460, 605, 639, 688, 691, 692, 755, 865, 868, 918], "process": [26, 241, 604, 605, 639], "per": [26, 28, 117, 118, 147, 174, 175, 196, 230, 232, 233, 241, 253, 272, 275, 289, 443, 497, 547, 607, 630, 632, 633, 639, 668, 671, 685], "thread": [26, 93, 96, 97, 98, 120, 241, 253, 272, 547, 668], "specifi": [26, 28, 59, 69, 71, 80, 82, 118, 132, 136, 137, 140, 148, 176, 186, 190, 196, 211, 218, 221, 241, 350, 351, 352, 353, 358, 391, 407, 416, 443, 458, 464, 497, 499, 500, 513, 532, 535, 547, 564, 568, 571, 575, 600, 607, 613, 617, 621, 639, 755, 756, 757, 758, 763, 866, 872, 918], "defin": [26, 28, 35, 69, 116, 117, 118, 126, 149, 150, 174, 177, 223, 241, 253, 289, 368, 420, 421, 422, 423, 424, 426, 427, 428, 495, 521, 535, 547, 576, 577, 593, 623, 639, 648, 685, 773, 918], "chrono": [26, 241, 342, 472, 746, 880], "rust": [26, 32, 77, 101, 105, 126, 223, 241, 623], "crate": [26, 241], "fraction": [26, 114, 115, 188, 241, 340, 408, 430, 472, 547, 744, 811, 833, 918], "second": [26, 69, 149, 150, 164, 214, 241, 335, 339, 344, 420, 421, 422, 423, 424, 426, 427, 428, 472, 510, 511, 547, 576, 577, 582, 639, 739, 743, 748], "precis": [26, 28, 36, 161, 187, 203, 241, 317, 472, 717], "infer": [26, 84, 86, 87, 88, 89, 90, 96, 97, 100, 107, 110, 116, 126, 241, 417, 455, 472, 547, 639, 820, 863, 918], "maximum": [26, 96, 97, 107, 117, 118, 119, 167, 241, 266, 301, 302, 392, 404, 413, 523, 547, 587, 639, 662, 699, 700, 726, 799, 807, 812, 816, 918], "timeunit": [26, 35, 37, 69, 241, 317, 318, 343, 347, 717, 718, 747, 751], "frame": [26, 27, 28, 59, 87, 114, 118, 126, 127, 161, 162, 171, 174, 177, 186, 187, 206, 212, 241, 560, 591, 593, 639, 698, 918], "datetim": [26, 28, 59, 69, 131, 147, 149, 150, 162, 164, 214, 241, 269, 270, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 368, 420, 421, 422, 423, 424, 426, 427, 428, 472, 485, 511, 517, 521, 526, 547, 576, 577, 582, 639, 665, 666, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 773, 788, 799, 802, 807, 808, 837, 880, 901, 918], "place": [26, 133, 154, 155, 183, 192, 193, 196, 216, 241, 262, 265, 277, 284, 433, 434, 442, 547, 601, 602, 607, 639, 657, 660, 673, 680, 817, 819, 840, 841, 850, 918], "float64": [26, 87, 94, 96, 118, 122, 135, 136, 143, 189, 206, 218, 241, 254, 255, 256, 257, 258, 259, 298, 304, 305, 340, 353, 374, 376, 438, 439, 483, 484, 500, 513, 547, 566, 599, 617, 639, 744, 900, 905, 918], "datatyp": [26, 30, 44, 57, 84, 86, 87, 88, 90, 92, 94, 100, 102, 106, 119, 122, 135, 137, 143, 189, 241, 273, 298, 353, 435, 452, 472, 485, 500, 513, 547, 556, 568, 599, 620, 639, 648, 669, 693, 711, 786, 788, 790, 842, 860, 880, 901, 918], "repres": [26, 45, 57, 69, 84, 86, 88, 89, 90, 241, 374, 376, 500, 513, 521, 547, 837, 852, 907, 918], "null": [26, 59, 67, 87, 96, 97, 107, 112, 125, 127, 131, 134, 140, 143, 144, 156, 163, 168, 169, 175, 180, 192, 193, 196, 197, 198, 202, 206, 211, 213, 215, 218, 241, 249, 252, 253, 262, 265, 271, 274, 275, 278, 284, 289, 290, 292, 294, 301, 302, 303, 306, 308, 311, 313, 315, 316, 321, 324, 327, 329, 331, 334, 341, 350, 351, 352, 353, 356, 357, 358, 359, 363, 367, 374, 375, 376, 377, 378, 383, 391, 406, 408, 414, 419, 420, 421, 422, 423, 424, 426, 427, 428, 433, 434, 435, 437, 442, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 460, 461, 464, 466, 468, 469, 470, 475, 476, 477, 485, 492, 493, 499, 501, 502, 513, 521, 535, 547, 560, 565, 571, 580, 581, 601, 602, 607, 613, 614, 617, 618, 620, 639, 648, 657, 660, 667, 680, 685, 686, 689, 698, 699, 712, 715, 721, 724, 730, 732, 735, 738, 745, 756, 757, 758, 761, 763, 768, 784, 785, 810, 811, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 840, 841, 845, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 868, 869, 872, 874, 876, 877, 878, 899, 900, 901, 908, 918], "empti": [26, 75, 87, 96, 97, 100, 107, 127, 128, 158, 170, 241, 532, 560, 561, 590, 639, 698, 702, 776, 918], "table_nam": [27, 28, 241], "connection_uri": [27, 98, 241], "if_exist": [27, 241], "dbwritemod": [27, 241], "fail": [27, 85, 99, 101, 108, 125, 210, 241, 263, 290, 472, 547, 612, 639, 648, 880, 918], "engin": [27, 98, 126, 148, 210, 223, 241, 575, 586, 590, 612, 623, 639], "dbwriteengin": [27, 241], "sqlalchemi": [27, 241], "databas": [27, 98, 241, 556], "append": [27, 118, 138, 163, 164, 241, 414, 547, 581, 582, 639, 918], "creat": [27, 28, 68, 69, 84, 88, 90, 108, 117, 118, 119, 127, 128, 149, 150, 175, 178, 214, 218, 241, 318, 339, 344, 414, 466, 490, 496, 501, 509, 510, 511, 547, 560, 561, 567, 576, 577, 617, 639, 698, 702, 710, 715, 718, 743, 748, 809, 817, 874, 899, 918], "connect": [27, 96, 98, 101, 105, 109, 111, 112, 241, 557], "uri": [27, 98, 99, 108, 241], "postgresql": [27, 98, 241, 407, 547], "usernam": [27, 96, 98, 101, 105, 109, 111, 241], "password": [27, 96, 98, 101, 105, 109, 111, 241], "server": [27, 98, 241], "port": [27, 96, 98, 101, 105, 109, 111, 241], "replac": [27, 96, 97, 107, 139, 140, 184, 209, 218, 241, 318, 338, 391, 463, 547, 570, 617, 639, 718, 742, 798, 836, 837, 871, 918], "insert": [27, 96, 97, 101, 105, 107, 109, 110, 111, 155, 183, 209, 211, 241, 431, 446, 475, 547, 613, 639, 834, 854, 883, 918], "mode": [27, 241, 531, 547, 639, 918], "new": [27, 28, 94, 122, 123, 126, 134, 154, 155, 174, 175, 182, 183, 200, 211, 212, 218, 241, 249, 318, 355, 367, 390, 462, 463, 468, 469, 476, 477, 482, 547, 556, 565, 597, 611, 613, 617, 623, 639, 644, 648, 715, 718, 760, 809, 819, 870, 871, 876, 877, 884, 886, 891, 897, 909, 918], "overwrit": [27, 84, 86, 87, 88, 90, 96, 97, 107, 125, 241, 569, 639], "alreadi": [27, 241, 272, 312, 547, 668, 709, 918], "adbc": [27, 98, 241], "workbook": [28, 241], "worksheet": [28, 241], "posit": [28, 132, 137, 148, 176, 190, 196, 211, 218, 221, 241, 350, 351, 352, 353, 407, 443, 461, 499, 500, 513, 532, 547, 564, 568, 575, 600, 607, 613, 617, 621, 639, 756, 757, 758, 869, 918], "tupl": [28, 98, 126, 161, 186, 187, 191, 220, 241, 417, 547, 594, 603, 639, 820, 918], "a1": [28, 60, 62, 241], "table_styl": [28, 241], "column_format": [28, 241], "dtype_format": [28, 241], "oneormoredatatyp": [28, 117, 241, 788, 918], "conditional_format": [28, 241], "conditionalformatdict": [28, 241], "column_tot": [28, 241], "columntotalsdefinit": [28, 241], "column_width": [28, 241], "row_height": [28, 241], "sparklin": [28, 241], "sequenc": [28, 51, 59, 66, 84, 86, 87, 88, 90, 91, 93, 96, 97, 117, 118, 119, 132, 134, 137, 138, 163, 164, 170, 174, 177, 178, 196, 204, 209, 210, 211, 212, 213, 214, 241, 372, 389, 443, 477, 493, 494, 495, 497, 501, 506, 507, 508, 515, 517, 522, 523, 526, 530, 536, 547, 564, 565, 568, 581, 582, 593, 607, 612, 613, 614, 639, 647, 713, 780, 837, 886, 918], "autofilt": [28, 241], "autofit": [28, 241], "hidden_column": [28, 241], "hide_gridlin": [28, 241], "sheet_zoom": [28, 241], "excel": [28, 100, 241, 556], "object": [28, 32, 69, 85, 86, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 117, 118, 119, 125, 148, 165, 206, 241, 521, 556, 561, 579, 584, 596, 639, 661, 694, 716, 853, 895, 918], "open": [28, 96, 97, 100, 101, 105, 109, 111, 241], "xlsxwriter": [28, 113, 241], "ha": [28, 59, 68, 91, 108, 125, 214, 241, 253, 312, 380, 398, 486, 495, 547, 623, 698, 709, 768, 779, 902, 918], "close": [28, 69, 149, 150, 241, 368, 420, 421, 422, 423, 424, 426, 427, 428, 440, 547, 576, 577, 639, 773, 848, 918], "xlsx": [28, 100, 241], "work": [28, 36, 97, 100, 150, 183, 241, 253, 272, 300, 301, 302, 303, 353, 362, 407, 460, 487, 547, 577, 639, 668, 696, 699, 700, 701, 766, 868, 903, 918], "directori": [28, 105, 241], "sheet1": [28, 241], "valid": [28, 101, 105, 119, 123, 136, 241, 312, 447, 448, 453, 454, 456, 547, 709, 755, 768, 855, 856, 861, 862, 864, 870, 871, 918], "notat": [28, 241], "eg": [28, 241, 339, 472], "integ": [28, 40, 41, 42, 43, 53, 54, 55, 56, 117, 118, 149, 150, 241, 300, 340, 362, 415, 420, 421, 422, 423, 424, 425, 426, 427, 428, 461, 496, 517, 521, 547, 576, 577, 639, 655, 656, 696, 744, 766, 818, 828, 837, 869, 918], "medium": [28, 241], "kei": [28, 59, 65, 149, 164, 171, 176, 178, 182, 185, 241, 576, 582, 591, 597, 598, 639], "contain": [28, 59, 65, 86, 89, 99, 108, 114, 134, 162, 174, 178, 241, 253, 372, 391, 448, 451, 453, 454, 456, 469, 470, 547, 565, 594, 639, 798, 804, 856, 859, 861, 862, 864, 877, 878, 895, 918], "follow": [28, 65, 96, 97, 99, 107, 108, 126, 149, 150, 164, 177, 214, 241, 253, 335, 339, 344, 413, 420, 421, 422, 423, 424, 426, 427, 428, 477, 495, 540, 541, 543, 547, 548, 551, 552, 553, 576, 577, 582, 593, 639, 739, 743, 748, 816, 836, 837, 910, 912, 914, 918, 921, 922, 923, 925], "first_column": [28, 241], "last_column": [28, 241], "banded_column": [28, 241], "banded_row": [28, 241], "sheet": [28, 100, 241], "formula": [28, 241, 349, 547, 754, 918], "chart": [28, 241, 594, 639], "subsequ": [28, 181, 206, 241, 567, 639], "colnam": [28, 118, 135, 241, 390, 547, 566, 639], "given": [28, 47, 49, 59, 68, 69, 84, 86, 87, 88, 90, 94, 96, 97, 107, 116, 117, 118, 119, 122, 126, 136, 137, 176, 177, 186, 192, 193, 196, 213, 241, 269, 284, 319, 343, 349, 368, 386, 407, 413, 416, 417, 420, 421, 423, 426, 427, 428, 431, 433, 434, 454, 472, 477, 486, 493, 513, 547, 568, 586, 593, 601, 602, 607, 614, 623, 639, 648, 665, 680, 710, 719, 747, 754, 755, 773, 795, 797, 809, 816, 820, 823, 824, 826, 829, 830, 831, 834, 840, 841, 862, 880, 902, 905, 909, 918], "here": [28, 84, 86, 87, 88, 90, 98, 99, 108, 117, 118, 119, 241, 456, 639, 864], "dd": [28, 241], "mm": [28, 241], "yyyi": [28, 241], "00": [28, 69, 149, 164, 214, 241, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 472, 511, 576, 582, 639, 717, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 880], "dtype": [28, 62, 84, 86, 88, 90, 94, 96, 97, 107, 116, 117, 118, 119, 122, 125, 149, 150, 164, 206, 241, 253, 254, 255, 256, 257, 258, 259, 262, 265, 266, 267, 268, 277, 289, 298, 301, 302, 303, 304, 305, 310, 311, 321, 324, 327, 329, 331, 334, 341, 347, 353, 355, 388, 389, 415, 416, 420, 421, 422, 423, 424, 426, 427, 428, 435, 438, 439, 446, 455, 466, 479, 481, 483, 484, 485, 489, 490, 495, 496, 501, 504, 513, 517, 521, 522, 535, 547, 576, 577, 582, 639, 662, 663, 664, 673, 685, 693, 698, 699, 700, 701, 707, 708, 712, 721, 724, 730, 732, 735, 738, 745, 751, 755, 760, 776, 788, 797, 821, 835, 842, 854, 863, 874, 880, 888, 899, 900, 901, 905, 918], "overridden": [28, 84, 86, 88, 90, 241, 639], "basi": [28, 118, 241], "param": [28, 84, 86, 87, 88, 90, 96, 97, 107, 118, 119, 186, 241, 639], "It": [28, 69, 126, 171, 177, 223, 241, 253, 290, 397, 547, 586, 591, 623, 639, 836, 837, 918], "also": [28, 69, 87, 118, 119, 135, 148, 149, 150, 171, 174, 190, 196, 218, 241, 308, 311, 338, 367, 368, 413, 420, 421, 422, 423, 424, 426, 427, 428, 443, 506, 507, 515, 517, 530, 546, 547, 575, 576, 577, 591, 600, 607, 617, 618, 639, 742, 773, 816, 918], "group": [28, 32, 97, 148, 149, 150, 162, 174, 176, 178, 212, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 241, 248, 253, 272, 361, 407, 442, 443, 453, 481, 495, 547, 575, 576, 577, 605, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639, 668, 861], "float_dtyp": [28, 241], "simplifi": [28, 66, 241, 562, 567, 569, 594, 603, 604, 605, 639], "uniform": [28, 241], "condit": [28, 64, 134, 141, 186, 241, 451, 470, 515, 565, 572, 639], "suppli": [28, 84, 86, 87, 88, 90, 186, 241, 639], "typenam": [28, 241], "3_color_scal": [28, 241], "data_bar": [28, 241], "make": [28, 51, 67, 84, 89, 96, 97, 98, 101, 105, 109, 111, 149, 150, 171, 174, 181, 214, 241, 351, 352, 391, 416, 468, 475, 547, 576, 577, 591, 639, 757, 758, 798, 876, 883, 918], "icon": [28, 241], "multipl": [28, 66, 67, 96, 97, 107, 109, 110, 111, 117, 119, 132, 136, 138, 141, 148, 149, 154, 162, 176, 178, 190, 196, 218, 221, 241, 289, 395, 398, 402, 407, 417, 420, 421, 422, 423, 424, 426, 427, 428, 443, 497, 500, 506, 507, 515, 522, 530, 539, 547, 564, 572, 575, 576, 600, 607, 617, 621, 639, 647, 685, 755, 803, 820, 918], "singl": [28, 59, 67, 96, 97, 98, 105, 107, 117, 132, 133, 134, 138, 145, 176, 186, 196, 241, 253, 270, 289, 335, 359, 389, 414, 417, 443, 446, 492, 495, 497, 500, 502, 522, 531, 547, 564, 565, 607, 639, 647, 666, 685, 739, 817, 820, 854, 895, 918], "across": [28, 241, 508, 536], "effect": [28, 125, 143, 241, 253, 547, 619, 639], "heatmap": [28, 241], "min": [28, 32, 118, 119, 131, 140, 149, 150, 178, 241, 301, 303, 309, 358, 407, 413, 423, 532, 547, 571, 576, 577, 605, 639, 699, 701, 706, 711, 763, 816, 826, 918], "determin": [28, 57, 59, 67, 87, 90, 96, 97, 100, 105, 111, 126, 143, 149, 150, 161, 162, 209, 214, 241, 290, 299, 397, 416, 420, 421, 422, 423, 424, 426, 427, 428, 440, 547, 576, 577, 639, 686, 695, 848, 918], "entir": [28, 241], "final": [28, 59, 111, 241, 350, 351, 352, 547, 569, 639, 756, 757, 758, 918], "made": [28, 241, 899, 918], "up": [28, 51, 98, 161, 164, 187, 203, 241, 253, 300, 475, 547, 581, 582, 586, 639, 696, 883, 918], "abov": [28, 241], "order": [28, 59, 87, 114, 148, 149, 150, 176, 177, 178, 188, 196, 210, 214, 241, 262, 265, 286, 299, 413, 430, 431, 432, 442, 443, 477, 487, 488, 497, 547, 575, 576, 577, 590, 604, 605, 607, 612, 639, 657, 660, 682, 695, 787, 816, 821, 833, 834, 838, 850, 886, 903, 904, 918], "than": [28, 69, 83, 88, 90, 96, 97, 112, 118, 119, 126, 147, 148, 161, 164, 176, 186, 187, 188, 212, 223, 241, 380, 430, 440, 458, 464, 469, 475, 503, 523, 526, 533, 536, 547, 575, 582, 604, 605, 623, 639, 833, 848, 866, 872, 877, 883, 918], "add": [28, 49, 97, 126, 138, 149, 218, 219, 241, 410, 478, 511, 515, 539, 547, 576, 581, 617, 618, 619, 639, 647, 918], "total": [28, 136, 241, 755, 918], "export": [28, 161, 162, 187, 203, 241], "numer": [28, 164, 241, 301, 302, 303, 368, 416, 435, 547, 556, 582, 639, 699, 700, 701, 773, 786, 835, 842, 918], "have": [28, 59, 85, 96, 97, 100, 118, 119, 121, 138, 161, 181, 187, 203, 241, 312, 350, 351, 352, 398, 413, 472, 547, 590, 603, 619, 639, 647, 709, 742, 756, 757, 758, 768, 816, 880, 918], "associ": [28, 59, 241], "sum": [28, 59, 136, 143, 148, 150, 160, 178, 221, 241, 253, 290, 310, 311, 349, 359, 420, 421, 423, 426, 427, 428, 492, 493, 506, 508, 515, 523, 526, 530, 547, 562, 567, 569, 575, 577, 594, 603, 621, 639, 707, 708, 754, 755, 823, 824, 826, 829, 830, 831, 918], "pass": [28, 32, 59, 69, 86, 100, 108, 117, 118, 119, 130, 132, 148, 176, 177, 190, 196, 218, 221, 241, 253, 322, 338, 356, 366, 407, 443, 459, 465, 471, 497, 500, 517, 535, 547, 564, 575, 579, 586, 593, 600, 603, 607, 617, 621, 639, 648, 722, 742, 761, 867, 873, 879, 918], "For": [28, 98, 99, 100, 108, 138, 150, 163, 164, 223, 241, 290, 298, 350, 351, 352, 398, 415, 440, 506, 515, 516, 547, 577, 582, 623, 639, 647, 756, 757, 758, 818, 848, 899, 918], "funcnam": [28, 241], "averag": [28, 241, 350, 351, 352, 413, 547, 756, 757, 758, 816, 918], "count_num": [28, 241], "count": [28, 96, 97, 101, 105, 107, 109, 110, 111, 131, 149, 150, 164, 174, 175, 178, 209, 213, 214, 219, 223, 232, 241, 270, 307, 335, 383, 403, 406, 420, 421, 422, 423, 424, 426, 427, 428, 448, 488, 490, 527, 547, 576, 577, 582, 614, 619, 623, 632, 639, 666, 711, 739, 805, 810, 856, 904, 906, 918], "std_dev": [28, 241], "var": [28, 241, 547, 639, 918], "pixel": [28, 241], "unit": [28, 35, 37, 69, 118, 119, 136, 241, 317, 318, 322, 343, 347, 388, 398, 489, 517, 547, 594, 639, 717, 718, 722, 747, 751, 755, 797, 905, 918], "row_index": [28, 241], "height": [28, 134, 241], "provid": [28, 96, 97, 98, 99, 107, 108, 118, 119, 241, 290, 294, 295, 449, 450, 453, 455, 456, 517, 556, 604, 605, 639, 689, 690, 857, 858, 861, 863, 864, 925], "intersect": [28, 241], "bodi": [28, 241], "start": [28, 95, 96, 97, 101, 105, 107, 109, 110, 111, 148, 149, 165, 195, 214, 219, 241, 285, 297, 320, 322, 323, 325, 330, 332, 336, 337, 339, 340, 343, 344, 345, 346, 348, 353, 368, 441, 447, 451, 466, 470, 500, 506, 513, 515, 539, 547, 575, 576, 594, 606, 619, 639, 681, 692, 717, 719, 720, 722, 723, 729, 731, 734, 736, 737, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 773, 849, 859, 874, 878, 918], "zero": [28, 84, 85, 95, 96, 97, 101, 105, 125, 127, 140, 161, 186, 201, 206, 241, 357, 358, 431, 440, 475, 547, 560, 571, 639, 686, 698, 763, 848, 883, 895, 899, 900, 918], "unless": [28, 59, 86, 206, 241, 639, 900, 908, 918], "marker": [28, 241], "compliant": [28, 241], "case": [28, 59, 84, 86, 87, 88, 90, 111, 126, 138, 149, 150, 161, 241, 389, 397, 398, 539, 547, 576, 577, 639, 647, 918], "three": [28, 208, 241, 431, 547], "avail": [28, 93, 99, 108, 117, 240, 241, 413, 540, 541, 543, 546, 547, 548, 551, 552, 553, 556, 557, 569, 638, 639, 816, 910, 912, 914, 918, 921, 922, 923], "insert_befor": [28, 241], "insert_aft": [28, 241], "respect": [28, 241], "direct": [28, 98, 105, 111, 212, 241], "ad": [28, 87, 125, 149, 209, 218, 241, 252, 356, 506, 507, 547, 576, 617, 639, 761, 918], "end": [28, 96, 97, 105, 107, 149, 241, 285, 296, 339, 353, 368, 447, 451, 466, 470, 500, 513, 547, 576, 578, 585, 594, 639, 681, 691, 743, 773, 859, 874, 878, 918], "far": [28, 241], "thei": [28, 87, 114, 123, 165, 241, 419, 547, 822, 918], "pure": [28, 241], "actual": [28, 87, 100, 118, 119, 241, 843, 918], "indic": [28, 64, 91, 95, 96, 97, 101, 105, 107, 116, 117, 119, 149, 150, 204, 241, 263, 289, 370, 373, 374, 376, 377, 378, 420, 421, 422, 423, 424, 426, 427, 428, 431, 437, 481, 497, 547, 576, 577, 639, 685, 777, 781, 782, 783, 784, 785, 834, 845, 890, 896, 918], "calcul": [28, 59, 149, 241, 271, 313, 350, 351, 352, 381, 388, 425, 440, 489, 495, 547, 576, 639, 667, 712, 756, 757, 758, 792, 828, 848, 852, 907, 918], "individu": [28, 118, 150, 241, 253, 454, 547, 577, 605, 639, 697, 862, 918], "gridlin": [28, 241], "zoom": [28, 241], "level": [28, 32, 107, 109, 110, 111, 118, 126, 143, 174, 241, 359, 547, 578, 585, 605, 639], "definit": [28, 241, 381, 547, 792, 918], "take": [28, 118, 143, 171, 177, 200, 241, 335, 482, 512, 514, 547, 591, 611, 639, 739, 891, 909, 918], "care": [28, 241, 253, 432, 547, 838, 918], "rel": [28, 99, 108, 114, 115, 241, 335, 350, 351, 352, 547, 739, 756, 757, 758, 918], "see": [28, 98, 99, 100, 108, 114, 115, 118, 119, 130, 163, 177, 241, 301, 302, 303, 342, 358, 367, 381, 389, 440, 530, 547, 699, 700, 701, 746, 792, 848, 918, 925], "readthedoc": [28, 241, 925], "io": [28, 241, 925], "working_with_conditional_format": [28, 241], "html": [28, 85, 98, 125, 130, 241], "similarli": [28, 87, 241], "well": [28, 96, 97, 107, 137, 178, 241, 368, 547, 568, 639, 773, 918], "mandatori": [28, 241], "adjac": [28, 241], "each": [28, 59, 97, 110, 114, 115, 117, 126, 147, 148, 162, 164, 176, 206, 211, 220, 221, 223, 224, 226, 235, 241, 253, 276, 288, 339, 344, 413, 454, 468, 469, 495, 502, 535, 547, 582, 594, 613, 621, 623, 624, 626, 635, 639, 672, 684, 697, 743, 748, 816, 862, 876, 877, 887, 918], "two": [28, 86, 88, 90, 98, 143, 170, 171, 178, 208, 222, 223, 241, 248, 314, 318, 442, 481, 493, 503, 505, 528, 533, 547, 590, 591, 622, 623, 639, 713, 718, 918], "help": [28, 241, 569, 639], "where": [28, 64, 98, 134, 138, 161, 170, 187, 241, 263, 346, 349, 431, 440, 503, 533, 539, 547, 590, 639, 647, 658, 750, 754, 834, 848, 852, 907, 909, 918], "appear": [28, 87, 114, 241, 488, 547, 904, 918], "working_with_sparklin": [28, 241], "instanti": [28, 190, 218, 241, 600, 617, 639], "basic": [28, 241], "random": [28, 117, 118, 119, 151, 188, 241, 364, 413, 430, 436, 547, 769, 816, 833, 844, 918], "date": [28, 35, 59, 69, 96, 97, 98, 107, 112, 131, 147, 149, 150, 162, 164, 241, 269, 270, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 368, 420, 421, 422, 423, 424, 426, 427, 428, 472, 485, 517, 526, 547, 576, 577, 582, 639, 665, 666, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 773, 788, 799, 802, 807, 808, 837, 880, 901, 918], "dtm": [28, 241, 318, 718], "2023": [28, 113, 162, 241, 318, 718], "num": [28, 208, 241, 368, 371, 475, 547, 773, 918], "500": [28, 161, 213, 241, 569, 614, 639, 729, 731, 737, 744, 823, 824, 826, 918], "val": [28, 185, 241, 299, 485, 547, 598, 639, 695], "10_000": [28, 241], "20_000": [28, 241], "30_000": [28, 241], "locat": [28, 138, 184, 207, 211, 241, 431, 547, 613, 639, 647, 834, 837, 890, 918], "u": [28, 35, 37, 69, 161, 187, 203, 241, 317, 318, 322, 343, 347, 472, 517, 531, 717, 718, 722, 747, 751], "increas": [28, 96, 105, 241, 312, 547, 709, 918], "b4": [28, 241], "light": [28, 241], "twice": [28, 100, 241], "differ": [28, 96, 112, 114, 138, 149, 150, 161, 187, 203, 209, 241, 271, 313, 320, 335, 336, 338, 345, 391, 404, 405, 472, 488, 514, 517, 523, 526, 547, 567, 576, 577, 639, 647, 667, 712, 720, 739, 740, 742, 749, 807, 808, 835, 880, 918], "titl": [28, 241], "explicit": [28, 117, 241, 496, 530], "integr": [28, 241], "multi_fram": [28, 241], "wb": [28, 241], "coordin": [28, 241], "advanc": [28, 241], "len": [28, 68, 117, 118, 162, 241, 307, 417, 458, 464, 475, 547, 710, 820, 866, 872, 883, 918], "min_color": [28, 241], "76933c": [28, 241], "mid_color": [28, 241], "c4d79b": [28, 241], "max_color": [28, 241], "ebf1d": [28, 241], "data_bar_2010": [28, 241], "bar_color": [28, 241], "9bbb59": [28, 241], "bar_negative_color_sam": [28, 241], "bar_negative_border_color_sam": [28, 241], "000": [28, 241], "white": [28, 241], "some": [28, 87, 96, 97, 107, 134, 241, 565, 639, 780, 918], "w": [28, 241, 453, 861], "get_worksheet_by_nam": [28, 241], "fmt_titl": [28, 241], "add_format": [28, 241], "font_color": [28, 241], "4f6228": [28, 241], "font_siz": [28, 241], "12": [28, 59, 68, 69, 149, 150, 164, 214, 241, 310, 318, 323, 325, 332, 337, 339, 344, 348, 408, 435, 507, 509, 510, 522, 547, 576, 577, 578, 582, 585, 603, 610, 639, 648, 710, 718, 736, 743, 748, 832, 918], "ital": [28, 241], "bold": [28, 241], "customis": [28, 241], "trend": [28, 241], "win_loss": [28, 241], "subtl": [28, 241], "tone": [28, 241], "hidden": [28, 241], "id": [28, 108, 223, 241, 462, 463, 488, 490, 547, 623, 904, 918], "q1": [28, 241], "55": [28, 61, 113, 241], "20": [28, 138, 154, 155, 177, 179, 183, 184, 241, 260, 261, 262, 265, 313, 339, 344, 364, 367, 517, 521, 547, 593, 639, 712, 748, 918], "35": [28, 119, 241, 313, 547, 712, 918], "q2": [28, 241], "30": [28, 68, 138, 149, 154, 177, 183, 184, 202, 218, 241, 260, 261, 262, 265, 313, 318, 321, 325, 337, 339, 344, 348, 364, 435, 547, 576, 593, 617, 639, 710, 712, 718, 721, 743, 748, 918], "15": [28, 126, 149, 150, 155, 241, 312, 313, 339, 344, 355, 507, 547, 576, 577, 639, 709, 712, 743, 748, 760, 918], "60": [28, 138, 241, 340, 341, 472, 740, 744, 745, 880], "q3": [28, 241], "50": [28, 138, 241, 301, 302, 303, 339, 344, 547, 699, 748, 918], "40": [28, 138, 177, 241, 339, 344, 364, 547, 593, 639, 725, 748], "80": [28, 241], "q4": [28, 241], "75": [28, 241], "account": [28, 241, 335, 350, 351, 352, 547, 739, 756, 757, 758, 918], "flavour": [28, 241], "integer_dtyp": [28, 190, 241, 600, 639], "0_": [28, 241], "just": [28, 98, 107, 170, 241, 590, 639], "unifi": [28, 241], "multi": [28, 96, 97, 241, 353, 547], "2_color_scal": [28, 241], "95b3d7": [28, 241], "ffffff": [28, 241], "ipccompress": [29, 241], "arrow": [29, 70, 84, 98, 101, 109, 201, 241, 604, 639, 895, 899, 918], "ipc": [29, 101, 102, 109, 112, 241, 556], "binari": [29, 241, 293, 295, 296, 297, 494, 688, 690, 691, 692], "stream": [29, 66, 148, 210, 241, 562, 567, 569, 575, 586, 590, 594, 603, 604, 605, 612, 639], "feather": [29, 101, 109, 241, 556], "lz4": [29, 32, 241, 604, 605, 639], "zstd": [29, 32, 241, 604, 605, 639], "pretti": [30, 241], "row_ori": [30, 241], "iobas": [30, 31, 103, 104, 241, 596, 620, 639], "serial": [30, 31, 241], "represent": [30, 31, 241, 299, 320, 323, 325, 326, 328, 330, 332, 333, 336, 337, 340, 345, 346, 348, 485, 547, 567, 584, 639, 695, 720, 723, 725, 729, 731, 734, 736, 737, 740, 741, 744, 749, 750, 752, 901, 918], "orient": [30, 60, 62, 88, 90, 241, 639], "slower": [30, 88, 90, 126, 148, 176, 214, 223, 241, 575, 623, 639], "common": [30, 241], "write_ndjson": [30, 241], "newlin": [31, 104, 110, 241], "delimit": [31, 91, 96, 97, 104, 107, 110, 178, 204, 241, 446, 854, 896, 918], "parquetcompress": [32, 241], "compression_level": [32, 241, 605, 639], "statist": [32, 96, 97, 105, 111, 131, 241, 351, 352, 381, 420, 421, 422, 423, 424, 425, 426, 427, 428, 440, 547, 605, 639, 711, 757, 758, 792, 828, 848, 918], "row_group_s": [32, 241, 605, 639], "use_pyarrow": [32, 96, 101, 105, 241, 605, 639, 898, 899, 918], "pyarrow_opt": [32, 99, 105, 108, 241], "parquet": [32, 105, 106, 111, 241, 556, 605, 639], "gzip": [32, 241, 605, 639], "lzo": [32, 241, 605, 639], "brotli": [32, 241, 605, 639], "choos": [32, 241, 604, 605, 639], "good": [32, 161, 241, 604, 605, 639], "perform": [32, 75, 85, 96, 97, 101, 105, 107, 109, 110, 111, 125, 126, 149, 150, 164, 181, 223, 241, 253, 407, 547, 576, 577, 582, 604, 605, 619, 623, 639], "fast": [32, 241, 356, 432, 547, 604, 605, 639, 761, 838, 918], "decompress": [32, 241, 604, 605, 639], "backward": [32, 140, 164, 241, 292, 358, 547, 571, 582, 605, 639, 763, 918], "guarante": [32, 85, 96, 97, 241, 569, 605, 639], "deal": [32, 241, 413, 472, 547, 605, 639, 816, 880, 918], "older": [32, 241, 605, 639], "reader": [32, 93, 96, 97, 101, 105, 241, 557, 605, 639], "higher": [32, 180, 233, 241, 412, 424, 529, 547, 595, 605, 633, 639, 815, 827, 918], "mean": [32, 96, 97, 101, 105, 107, 131, 140, 148, 178, 221, 241, 355, 358, 421, 440, 453, 498, 547, 571, 575, 586, 605, 621, 639, 711, 760, 763, 768, 824, 848, 861, 918], "smaller": [32, 136, 241, 569, 605, 639, 755, 918], "disk": [32, 101, 241, 603, 604, 605, 639], "11": [32, 113, 150, 241, 315, 316, 325, 335, 339, 344, 367, 408, 427, 441, 475, 500, 536, 547, 562, 577, 578, 585, 594, 605, 610, 639, 648, 739, 743, 748, 822, 918], "22": [32, 241, 339, 344, 347, 472, 500, 605, 639, 743, 748, 751, 880], "extra": [32, 96, 99, 100, 101, 105, 108, 109, 111, 138, 241, 605, 639, 647, 918], "comput": [32, 66, 67, 72, 136, 148, 164, 206, 210, 221, 233, 241, 247, 254, 255, 256, 257, 258, 259, 280, 281, 282, 304, 305, 307, 308, 309, 310, 311, 314, 349, 354, 381, 386, 387, 402, 407, 408, 411, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 437, 438, 439, 440, 444, 483, 484, 497, 503, 505, 512, 528, 533, 547, 575, 579, 581, 582, 605, 612, 618, 621, 633, 639, 643, 649, 650, 651, 652, 653, 654, 676, 677, 678, 703, 704, 705, 706, 707, 708, 713, 754, 755, 759, 792, 795, 796, 803, 811, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 845, 846, 847, 848, 851, 892, 893, 900, 918], "size": [32, 96, 97, 117, 118, 119, 136, 149, 212, 241, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 496, 547, 576, 605, 639, 755, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 918], "chunk": [32, 93, 96, 97, 105, 107, 109, 110, 111, 118, 119, 138, 162, 173, 241, 252, 414, 547, 605, 639, 647, 697, 767, 804, 817, 895, 918], "reduc": [32, 96, 97, 105, 107, 109, 110, 111, 228, 229, 231, 234, 241, 435, 515, 547, 605, 628, 629, 631, 634, 639, 800, 814, 842, 888, 918], "memori": [32, 67, 84, 85, 88, 89, 90, 96, 97, 101, 105, 107, 109, 110, 111, 125, 126, 138, 194, 223, 241, 414, 435, 547, 605, 623, 639, 647, 817, 842, 843, 918], "pressur": [32, 105, 110, 111, 241, 435, 547, 605, 639, 842, 918], "improv": [32, 101, 109, 241, 605, 639], "speed": [32, 241, 253, 547, 605, 639], "minimum": [32, 117, 118, 119, 143, 172, 241, 301, 303, 350, 351, 352, 401, 405, 413, 526, 547, 592, 605, 639, 699, 701, 733, 756, 757, 758, 808, 813, 816, 918], "implement": [32, 85, 108, 125, 126, 223, 241, 253, 547, 623, 836, 837, 918], "v": [32, 68, 136, 241, 431, 547, 710, 834, 918], "At": [32, 241], "moment": [32, 130, 241, 381, 440, 547, 792, 848, 918], "argument": [32, 96, 99, 105, 108, 130, 132, 137, 148, 149, 150, 168, 176, 177, 178, 190, 196, 198, 206, 211, 214, 218, 221, 241, 339, 344, 353, 368, 407, 420, 421, 422, 423, 424, 426, 427, 428, 443, 459, 465, 471, 499, 500, 513, 532, 535, 547, 564, 568, 575, 576, 577, 593, 600, 607, 613, 617, 621, 639, 743, 748, 773, 867, 873, 879, 900, 918], "pyarrow": [32, 84, 89, 96, 99, 101, 105, 108, 112, 113, 162, 201, 205, 206, 241, 557, 895, 898, 899, 900, 918], "write_t": [32, 241], "base": [33, 134, 141, 149, 150, 241, 349, 350, 351, 352, 386, 387, 461, 523, 526, 547, 556, 565, 572, 576, 577, 639, 754, 756, 757, 758, 795, 796, 869, 909, 918], "calendar": [34, 35, 149, 150, 164, 214, 241, 325, 335, 339, 344, 348, 420, 421, 422, 423, 424, 426, 427, 428, 547, 576, 577, 582, 639, 725, 739, 743, 748, 752], "time": [35, 37, 65, 66, 69, 96, 97, 107, 138, 149, 150, 164, 214, 241, 268, 269, 270, 290, 317, 318, 319, 322, 335, 338, 343, 347, 368, 472, 485, 486, 501, 502, 511, 517, 531, 547, 562, 576, 577, 582, 594, 639, 647, 664, 666, 717, 718, 719, 722, 739, 742, 747, 751, 773, 880, 901, 902, 918], "time_unit": [35, 37, 69, 347, 751], "time_zon": [35, 69, 319, 338, 719, 742], "m": [35, 37, 69, 317, 318, 322, 342, 343, 347, 472, 511, 517, 717, 718, 722, 746, 747, 751, 880], "timezon": [35, 69, 472, 880], "zoneinfo": 35, "run": [35, 66, 126, 148, 165, 210, 223, 241, 253, 272, 312, 532, 547, 562, 567, 569, 575, 586, 590, 594, 603, 604, 605, 612, 623, 639, 668, 709, 918, 924], "available_timezon": 35, "attribut": [35, 36, 37, 44, 116, 241, 540, 541, 543, 548, 551, 552, 553, 639, 910, 912, 914, 921, 922, 923], "128": [36, 61, 811, 918], "bit": [36, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 415, 447, 547, 818, 855, 918], "neg": [36, 149, 152, 192, 193, 195, 199, 241, 284, 285, 433, 434, 441, 466, 547, 576, 601, 602, 606, 619, 639, 680, 681, 840, 841, 849, 874, 918], "scale": [36, 136, 241, 755, 918], "experiment": [36, 68, 112, 190, 212, 213, 218, 241, 312, 339, 420, 421, 422, 423, 424, 426, 427, 428, 547, 600, 614, 617, 639, 709, 710, 743, 918], "progress": 36, "expect": [36, 76, 78, 83, 253, 495, 547, 584, 586, 639], "delta": [37, 99, 108, 503, 528, 533, 556, 852, 907, 918], "32": [38, 41, 54, 61, 150, 160, 241, 435, 547, 577, 639, 713, 740, 811, 827, 918], "sign": [40, 41, 42, 43, 335, 415, 475, 547, 739, 818, 883, 918], "inner": [44, 50, 163, 213, 241, 277, 314, 547, 581, 614, 620, 639, 673, 713, 918], "polarsdatatyp": [44, 94, 96, 97, 102, 106, 116, 118, 119, 122, 126, 135, 241, 253, 298, 353, 389, 455, 495, 496, 500, 513, 521, 522, 547, 566, 639, 648, 693, 863, 918], "pythondatatyp": 44, "nest": [44, 50, 136, 241, 556, 755, 918], "arrai": [44, 84, 88, 96, 97, 105, 136, 201, 205, 206, 241, 268, 279, 280, 281, 282, 283, 286, 287, 295, 301, 302, 303, 307, 308, 309, 310, 311, 387, 420, 421, 423, 426, 427, 428, 432, 448, 450, 453, 454, 456, 501, 512, 547, 639, 664, 675, 676, 677, 678, 679, 682, 683, 690, 699, 700, 701, 705, 706, 707, 708, 713, 755, 796, 823, 824, 826, 829, 830, 831, 838, 843, 856, 858, 861, 862, 864, 895, 899, 900, 908, 918], "within": [44, 114, 115, 164, 241, 582, 639], "wrap": [46, 108, 368, 547], "arbitrari": [46, 118], "python": [46, 69, 96, 97, 113, 126, 161, 187, 203, 223, 241, 253, 318, 389, 495, 547, 623, 648, 718, 726, 727, 728, 733, 898, 918], "queri": [47, 66, 98, 101, 107, 109, 110, 111, 138, 165, 177, 241, 290, 391, 456, 547, 562, 567, 569, 578, 585, 594, 603, 619, 623, 639, 647, 864, 918, 924], "pars": [47, 96, 97, 100, 107, 109, 110, 148, 190, 196, 218, 221, 241, 407, 443, 455, 461, 472, 497, 499, 502, 517, 535, 547, 575, 600, 607, 617, 621, 639, 863, 869, 880], "transform": [47, 126, 241, 389, 473, 474, 547], "lf": [49, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 639], "under": [49, 60, 61, 62, 63, 540, 541, 543, 548, 551, 552, 553, 910, 912, 914, 921, 922, 923], "context": [50, 174, 241, 248, 253, 272, 359, 397, 442, 443, 490, 495, 504, 514, 517, 532, 546, 547, 556, 618, 639, 668], "manag": [50, 556], "categor": [50, 91, 121, 163, 204, 241, 299, 391, 485, 547, 694, 695, 901, 918], "temporarili": [50, 149, 150, 241, 576, 577, 639], "cach": [50, 66, 101, 107, 109, 111, 121, 391, 420, 421, 422, 423, 424, 426, 427, 428, 472, 547, 562, 567, 569, 594, 603, 639, 880], "categori": [50, 68, 121, 299, 695, 710, 918], "until": [50, 165, 241], "finish": [50, 72, 138, 241, 647, 918], "global": [50, 118, 121, 391, 547], "invalid": [50, 96, 97, 107, 455, 456, 461, 863, 864, 869], "outermost": 50, "exit": [50, 123], "df1": [50, 59, 67, 114, 138, 144, 206, 216, 241], "color": [50, 223, 623], "red": [50, 223, 623], "green": [50, 223, 623], "blue": 50, "orang": [50, 129, 224, 225, 227, 228, 229, 231, 233, 234, 241, 624, 625, 627, 628, 629, 631, 633, 634], "uint8": [50, 116, 310, 311, 479, 547, 707, 708, 888, 918], "df2": [50, 59, 67, 114, 138, 144, 206, 216, 241], "yellow": 50, "black": [50, 126, 241], "join": [50, 59, 66, 164, 213, 241, 367, 407, 547, 562, 567, 569, 582, 594, 603, 614, 618, 639], "succe": [50, 96, 97, 107], "df_join": 50, "cat": [50, 68, 447, 473, 474, 485, 502, 543, 547, 710, 855, 914, 918], "u8": [50, 91, 204, 241, 896, 918], "schemadict": [51, 84, 86, 87, 88, 89, 90, 107, 189, 241, 535, 586, 599, 623, 639], "composit": 51, "dai": [52, 69, 149, 150, 162, 164, 214, 241, 322, 325, 332, 335, 336, 337, 339, 343, 344, 345, 346, 348, 420, 421, 422, 423, 424, 426, 427, 428, 509, 510, 511, 547, 576, 577, 582, 639, 739, 740, 743, 748, 750], "unsign": [53, 54, 55, 56, 415, 547, 818, 918], "could": [57, 72, 134, 149, 241, 298, 506, 515, 547, 565, 576, 639, 693, 918], "static": [57, 623], "utf": 58, "pli": [59, 67, 69, 167, 168, 172, 198, 241, 535], "descend": [59, 196, 241, 262, 265, 286, 413, 432, 442, 443, 486, 497, 547, 607, 639, 657, 660, 682, 787, 816, 838, 850, 902, 918], "uniqu": [59, 116, 117, 119, 159, 174, 232, 241, 264, 371, 379, 403, 472, 488, 490, 527, 547, 632, 639, 659, 711, 778, 789, 805, 880, 904, 906, 918], "inject": 59, "fill": [59, 67, 94, 122, 139, 140, 193, 212, 241, 292, 308, 311, 357, 358, 363, 367, 420, 421, 423, 426, 427, 428, 434, 458, 464, 475, 516, 547, 570, 571, 602, 618, 639, 762, 763, 809, 823, 824, 826, 829, 830, 831, 841, 866, 872, 883, 918], "sort": [59, 60, 114, 149, 150, 164, 171, 177, 178, 214, 226, 235, 241, 262, 265, 299, 359, 432, 443, 490, 492, 497, 547, 567, 576, 577, 582, 591, 593, 594, 603, 626, 635, 639, 657, 660, 695, 787, 838, 903, 906, 918], "origin": [59, 96, 97, 210, 241, 338, 380, 391, 407, 415, 448, 453, 454, 456, 458, 464, 475, 547, 612, 639, 742, 798, 856, 861, 862, 864, 866, 872, 883, 918], "doe": [59, 78, 84, 86, 87, 88, 90, 96, 97, 99, 100, 107, 108, 112, 114, 115, 138, 162, 186, 187, 218, 241, 347, 391, 488, 514, 547, 569, 586, 617, 639, 647, 751, 768, 798, 843, 908, 918], "receiv": [59, 126, 177, 241, 547, 593, 639], "now": [59, 150, 241, 577, 639], "whose": [59, 164, 178, 241, 353, 513, 547, 582, 639], "post": 59, "constrain": 59, "newli": 59, "boolean": [59, 64, 141, 143, 196, 241, 250, 251, 269, 293, 359, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 443, 455, 492, 497, 535, 547, 572, 607, 639, 645, 646, 658, 665, 688, 764, 773, 774, 775, 777, 778, 780, 781, 782, 783, 784, 785, 789, 812, 813, 836, 855, 909, 918], "2022": [59, 69, 131, 147, 241, 318, 472, 511, 517, 718, 725, 880], "x": [59, 96, 97, 98, 107, 117, 118, 136, 154, 157, 159, 163, 170, 241, 253, 268, 277, 364, 389, 416, 437, 440, 468, 485, 495, 506, 507, 508, 515, 522, 530, 536, 547, 581, 586, 590, 606, 639, 644, 648, 763, 790, 845, 848, 876, 901, 918], "y": [59, 117, 118, 136, 157, 159, 163, 170, 241, 268, 277, 342, 416, 472, 508, 536, 547, 581, 590, 606, 639, 644, 746, 880, 918], "df3": [59, 241], "set_tbl_format": 59, "09": [59, 150, 241, 318, 325, 577, 639, 720], "01": [59, 69, 131, 147, 149, 150, 214, 241, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 472, 511, 576, 577, 639, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 880], "02": [59, 69, 113, 147, 149, 150, 214, 241, 317, 318, 322, 323, 324, 330, 331, 332, 340, 341, 343, 345, 347, 429, 472, 511, 547, 576, 577, 639, 717, 718, 722, 723, 724, 726, 727, 728, 729, 731, 733, 734, 735, 736, 737, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 880], "03": [59, 69, 149, 150, 214, 241, 317, 318, 319, 321, 322, 324, 331, 332, 338, 339, 340, 341, 342, 343, 344, 345, 347, 576, 577, 639, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 731, 733, 735, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751], "af1": 59, "af2": 59, "af3": 59, "keep": [59, 96, 97, 107, 210, 213, 214, 241, 380, 391, 499, 547, 612, 614, 639, 798, 918], "easili": [59, 190, 218, 221, 241, 500, 535, 600, 617, 621, 639], "wise": [59, 143, 241, 254, 255, 256, 257, 258, 259, 304, 305, 354, 387, 437, 438, 439, 483, 484, 506, 507, 515, 530, 547, 649, 650, 651, 652, 653, 654, 703, 704, 759, 796, 845, 846, 847, 892, 893, 918], "dot": [59, 547, 603, 639, 918], "product": [59, 130, 241, 310, 314, 495, 547, 707, 713, 918], "fill_nul": [59, 139, 241, 472, 547, 570, 618, 639, 880, 918], "167": 59, "47": 59, "callabl": [60, 61, 62, 63, 107, 126, 143, 177, 223, 241, 253, 290, 389, 390, 419, 495, 506, 507, 515, 522, 530, 547, 586, 593, 623, 639, 648, 686, 822, 918], "decor": [60, 61, 62, 63, 118, 119], "access": [60, 61, 62, 63, 161, 186, 187, 241, 391, 547, 618, 639], "by_first_letter_of_column_nam": 60, "f": [60, 97, 108, 131, 147, 162, 166, 201, 209, 212, 241, 253, 290, 435, 452, 472, 495, 501, 506, 507, 515, 522, 530, 547, 686, 860, 880], "fromkei": [60, 62], "by_first_letter_of_column_valu": 60, "starts_with": [60, 447, 451, 859], "slice": [60, 66, 136, 152, 162, 199, 241, 276, 288, 419, 420, 421, 422, 423, 424, 426, 427, 428, 547, 562, 567, 569, 586, 594, 603, 604, 605, 639, 672, 684, 755, 822, 823, 824, 825, 826, 827, 829, 830, 831, 918], "to_seri": [60, 64, 241, 290, 686], "xx": [60, 62], "xy": [60, 62], "yy": [60, 62], "yz": [60, 62], "schema": [60, 61, 62, 67, 79, 80, 82, 84, 86, 87, 88, 90, 96, 97, 102, 106, 107, 110, 117, 118, 126, 127, 128, 135, 136, 171, 174, 241, 290, 397, 535, 560, 561, 566, 586, 591, 620, 623, 639, 702, 918], "a2": [60, 62], "b1": [60, 62], "b2": [60, 62], "pow_n": 61, "powersofn": 61, "next": [61, 292, 413, 547, 816, 918], "p": [61, 177, 241, 535, 547, 593, 639], "ceil": [61, 547, 918], "previou": [61, 123, 408, 477, 547, 811, 918], "floor": [61, 547, 918], "nearest": [61, 164, 180, 233, 241, 300, 362, 412, 424, 529, 547, 582, 595, 633, 639, 696, 766, 772, 815, 827, 918], "24": [61, 113, 126, 136, 150, 241, 310, 312, 324, 547, 577, 639, 709, 724, 918], "001": [61, 326, 327, 329, 334, 511, 730, 732, 738], "next_pow2": 61, "prev_pow2": 61, "nearest_pow2": 61, "split_by_column_dtyp": 62, "collect": [62, 66, 108, 112, 165, 201, 241, 253, 496, 501, 517, 535, 547, 564, 565, 568, 569, 570, 571, 572, 573, 575, 576, 578, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 592, 593, 595, 597, 598, 600, 601, 602, 606, 607, 608, 609, 610, 611, 612, 613, 615, 617, 618, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 639], "31": [63, 318, 320, 321, 332, 345, 472, 509, 510, 517, 718, 720, 721, 880], "42": [63, 150, 151, 241, 577, 639, 769, 918], "961": 63, "1764": 63, "4160": 63, "intern": [64, 161, 186, 202, 241, 361, 496, 508, 517, 523, 526, 531, 536, 547, 661, 694, 716, 834, 853, 918], "eager": [64, 149, 212, 241, 496, 517, 521, 531, 535, 546, 556, 576, 639], "evalu": [64, 139, 141, 164, 241, 263, 312, 366, 368, 372, 391, 494, 496, 512, 531, 535, 547, 572, 579, 581, 582, 639, 658, 709, 909, 918], "immedi": [64, 413, 496, 531, 535, 547, 816, 918], "arg_tru": [64, 547, 918], "u32": [64, 149, 175, 219, 224, 232, 234, 241, 248, 260, 261, 262, 263, 264, 265, 266, 267, 270, 279, 306, 307, 320, 323, 326, 330, 332, 336, 337, 340, 345, 346, 383, 391, 403, 406, 413, 431, 448, 457, 460, 485, 488, 497, 504, 527, 547, 576, 619, 624, 632, 634, 639, 657, 658, 659, 675, 693, 720, 723, 729, 731, 734, 736, 737, 740, 741, 744, 749, 750, 816, 856, 865, 868, 901, 904, 906, 918], "build": [65, 85], "wa": 65, "compil": [65, 266, 267, 662, 663], "gate": 65, "info": [65, 99, 108, 113], "otherwis": [65, 171, 190, 241, 294, 301, 302, 303, 350, 351, 352, 415, 447, 449, 539, 547, 591, 600, 639, 648, 689, 699, 700, 701, 756, 757, 758, 818, 836, 837, 855, 857, 918], "version": [65, 68, 91, 99, 108, 113, 265, 355, 528, 530, 533, 547, 660, 760, 918], "depend": [65, 113, 253, 266, 267, 397, 413, 495, 514, 517, 547, 662, 663, 816, 918], "host": [65, 96, 101, 105, 109, 111], "git": 65, "lazy_fram": 66, "type_coercion": [66, 562, 567, 569, 594, 603, 604, 605, 639], "predicate_pushdown": [66, 562, 567, 569, 586, 594, 603, 604, 605, 639], "projection_pushdown": [66, 562, 567, 569, 586, 594, 603, 604, 605, 639], "simplify_express": [66, 562, 567, 569, 594, 603, 604, 605, 639], "no_optim": [66, 562, 569, 586, 594, 604, 605, 639], "slice_pushdown": [66, 562, 567, 569, 586, 594, 603, 604, 605, 639], "common_subplan_elimin": [66, 562, 567, 569, 594, 603, 639], "graph": [66, 165, 241, 579, 618, 639], "parallel": [66, 67, 93, 98, 105, 111, 149, 164, 165, 177, 241, 272, 312, 547, 556, 576, 581, 582, 639, 668, 709, 918], "threadpool": 66, "coercion": [66, 416, 547, 562, 567, 569, 594, 603, 604, 605, 639], "optim": [66, 105, 107, 109, 110, 111, 161, 165, 177, 181, 187, 241, 562, 567, 569, 586, 594, 603, 604, 605, 619, 639], "predic": [66, 107, 109, 110, 111, 112, 141, 186, 241, 359, 492, 515, 539, 547, 562, 567, 569, 572, 586, 594, 597, 603, 604, 605, 619, 639, 764, 836, 837, 918], "pushdown": [66, 562, 567, 569, 586, 594, 597, 603, 604, 605, 619, 639, 836, 837, 918], "project": [66, 107, 108, 109, 110, 111, 253, 442, 443, 547, 562, 567, 569, 586, 594, 597, 603, 604, 605, 620, 639], "turn": [66, 96, 97, 107, 121, 490, 547, 562, 567, 569, 586, 594, 604, 605, 639], "off": [66, 96, 97, 107, 121, 490, 547, 562, 567, 569, 586, 594, 604, 605, 639], "Will": [66, 209, 241, 523, 526, 562, 567, 569, 594, 603, 639, 918], "try": [66, 79, 81, 96, 97, 100, 101, 105, 107, 109, 111, 562, 567, 569, 594, 603, 639], "branch": [66, 562, 567, 569, 594, 603, 639], "subplan": [66, 562, 567, 569, 594, 603, 639], "occur": [66, 270, 402, 413, 547, 562, 567, 569, 594, 603, 639, 666, 803, 816, 918], "union": [66, 67, 91, 174, 241, 493, 494, 501, 507, 508, 517, 523, 526, 530, 536, 562, 567, 569, 594, 603, 639, 713, 780, 837, 918], "part": [66, 84, 468, 469, 562, 567, 569, 594, 603, 618, 639, 720, 723, 729, 731, 734, 736, 737, 744, 752, 876, 877], "fashion": [66, 163, 241, 562, 567, 569, 594, 603, 639], "item": [67, 97, 188, 241, 269, 275, 277, 355, 430, 469, 547, 665, 671, 673, 760, 833, 877, 918], "iter": [67, 148, 149, 150, 161, 162, 176, 186, 187, 190, 196, 209, 218, 220, 221, 241, 312, 353, 407, 443, 497, 499, 500, 502, 513, 532, 535, 547, 575, 576, 577, 600, 607, 617, 621, 639, 709, 918], "rechunk": [67, 84, 89, 96, 97, 101, 105, 107, 109, 110, 111, 138, 241, 547, 647, 697, 804, 918], "concatmethod": 67, "vertic": [67, 138, 212, 216, 241, 446, 523, 854], "aggreg": [67, 96, 97, 105, 143, 149, 167, 168, 169, 172, 174, 178, 179, 180, 197, 198, 212, 215, 221, 222, 225, 227, 241, 248, 359, 385, 389, 407, 419, 420, 421, 422, 423, 424, 426, 427, 428, 490, 506, 507, 508, 515, 520, 523, 526, 530, 536, 547, 576, 586, 587, 588, 589, 592, 595, 608, 609, 615, 621, 622, 625, 627, 639, 822, 823, 824, 826, 829, 830, 831, 918], "concaten": [67, 143, 177, 241, 502, 547, 593, 639, 697, 804, 918], "sure": [67, 84, 89, 96, 97, 98, 101, 105, 181, 241, 496], "contigu": [67, 84, 89, 96, 97, 101, 105, 107, 109, 110, 111, 181, 241], "diagon": [67, 209, 241], "strategi": [67, 96, 116, 117, 118, 119, 140, 149, 163, 164, 173, 241, 253, 290, 358, 547, 571, 576, 581, 582, 639, 686, 763, 918], "vstack": [67, 138, 241], "find": [67, 142, 241, 431, 547, 834, 918], "miss": [67, 96, 97, 107, 139, 241, 292, 350, 351, 352, 363, 367, 374, 376, 533, 547, 570, 639, 756, 757, 758, 908, 918], "stack": [67, 154, 216, 241], "length": [67, 68, 94, 117, 122, 149, 150, 195, 241, 285, 312, 339, 344, 398, 419, 420, 421, 422, 423, 424, 426, 427, 428, 441, 458, 460, 464, 466, 475, 496, 547, 576, 577, 594, 606, 639, 681, 686, 697, 709, 710, 718, 743, 748, 793, 809, 822, 823, 824, 825, 826, 827, 829, 830, 831, 849, 866, 868, 872, 874, 883, 918], "don": [67, 212, 241, 253, 272, 312, 495, 547, 668, 709, 835, 908, 918], "t": [67, 100, 107, 126, 177, 212, 241, 253, 272, 312, 349, 350, 351, 352, 459, 465, 471, 472, 495, 539, 547, 593, 639, 668, 709, 754, 756, 757, 758, 835, 867, 873, 879, 880, 908, 918], "match": [67, 78, 84, 86, 87, 88, 90, 114, 115, 140, 164, 186, 241, 396, 447, 448, 451, 454, 455, 456, 459, 462, 463, 465, 470, 471, 472, 500, 571, 582, 639, 788, 855, 856, 859, 862, 863, 864, 867, 870, 871, 873, 878, 879, 880, 918], "relev": 67, "execut": [67, 165, 241, 272, 559, 586, 594, 639, 668], "df_h1": 67, "l1": 67, "l2": 67, "df_h2": 67, "r1": 67, "r2": 67, "r3": 67, "df_d1": 67, "df_d2": 67, "bin": [68, 461, 541, 710, 869, 912, 918], "label": [68, 419, 420, 421, 422, 423, 424, 426, 427, 428, 547, 594, 639, 710, 822, 823, 824, 825, 826, 827, 829, 830, 831, 918], "break_point_label": [68, 710, 918], "break_point": [68, 710, 918], "category_label": [68, 710, 918], "discret": [68, 271, 313, 349, 547, 667, 710, 712, 754, 918], "deprec": [68, 91, 265, 355, 528, 533, 547, 639, 660, 760, 918], "sinc": [68, 91, 99, 108, 265, 322, 355, 517, 528, 533, 547, 660, 722, 760, 918], "assign": [68, 117, 149, 241, 413, 468, 469, 547, 576, 639, 710, 798, 816, 876, 877, 918], "must": [68, 85, 86, 99, 108, 137, 149, 150, 164, 171, 186, 241, 290, 389, 420, 421, 422, 423, 424, 426, 427, 428, 547, 568, 576, 577, 582, 586, 591, 639, 710, 918], "breakpoint": [68, 710, 918], "inf": [68, 118, 119, 259, 370, 373, 547, 654, 710, 777, 781, 797, 811, 905, 918], "low": [69, 149, 241, 340, 496, 576, 639], "high": [69, 149, 241, 340, 496, 576, 639], "interv": [69, 149, 150, 214, 241, 339, 340, 344, 368, 420, 421, 422, 423, 424, 426, 427, 428, 547, 576, 577, 639, 720, 722, 723, 729, 731, 734, 736, 737, 740, 741, 743, 744, 746, 747, 748, 749, 750, 752, 773, 918], "timedelta": [69, 149, 150, 214, 241, 320, 322, 323, 325, 330, 332, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 348, 420, 421, 422, 423, 424, 426, 427, 428, 547, 576, 577, 639, 726, 728, 733, 739, 743, 748, 799, 802, 807, 808, 918], "1d": [69, 149, 150, 164, 214, 241, 317, 324, 331, 335, 339, 344, 347, 420, 421, 422, 423, 424, 426, 427, 428, 547, 576, 577, 582, 639, 717, 722, 724, 726, 727, 728, 733, 735, 739, 743, 746, 747, 748, 750, 751], "closedinterv": [69, 149, 150, 241, 368, 420, 421, 422, 423, 424, 426, 427, 428, 547, 576, 577, 639, 773, 918], "lower": [69, 107, 149, 180, 233, 241, 368, 388, 412, 415, 424, 496, 529, 547, 569, 576, 595, 633, 639, 773, 797, 815, 818, 827, 905, 918], "bound": [69, 96, 97, 136, 149, 241, 275, 289, 368, 388, 489, 496, 547, 576, 639, 671, 685, 755, 773, 797, 905, 918], "upper": [69, 96, 97, 136, 149, 241, 368, 489, 496, 547, 576, 639, 755, 773, 797, 905, 918], "period": [69, 149, 150, 192, 193, 241, 284, 339, 344, 350, 351, 352, 408, 433, 434, 547, 576, 577, 601, 602, 639, 680, 743, 748, 756, 757, 758, 811, 840, 841, 918], "like": [69, 85, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 157, 159, 163, 241, 272, 400, 413, 523, 526, 536, 547, 569, 596, 639, 668, 816, 918], "durat": [69, 164, 214, 241, 321, 324, 327, 329, 331, 334, 341, 347, 485, 547, 582, 639, 721, 724, 730, 732, 735, 738, 745, 751, 901, 918], "3d12h4m25": [69, 149, 150, 164, 214, 241, 339, 344, 576, 577, 582, 639, 743, 748], "hour": [69, 149, 150, 164, 214, 241, 335, 339, 344, 420, 421, 422, 423, 424, 426, 427, 428, 510, 511, 547, 576, 577, 582, 639, 739, 743, 748], "minut": [69, 149, 150, 164, 214, 241, 335, 339, 344, 420, 421, 422, 423, 424, 426, 427, 428, 510, 511, 547, 576, 577, 582, 639, 739, 743, 748], "tempor": [69, 149, 150, 161, 187, 203, 241, 368, 420, 421, 422, 423, 424, 426, 427, 428, 547, 556, 576, 577, 639, 773, 788, 918], "window": [69, 149, 150, 241, 312, 339, 344, 350, 351, 352, 407, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 501, 547, 576, 577, 639, 709, 743, 748, 756, 757, 758, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 918], "granular": 69, "finer": 69, "permut": 69, "1mo": [69, 149, 150, 164, 214, 241, 319, 321, 335, 338, 339, 342, 344, 420, 421, 422, 423, 424, 426, 427, 428, 547, 576, 577, 582, 639, 719, 721, 736, 739, 740, 741, 742, 743, 748, 749], "dtrang": 69, "1985": 69, "04": [69, 112, 149, 214, 241, 318, 319, 320, 321, 324, 330, 331, 332, 336, 338, 339, 340, 341, 342, 345, 346, 347, 472, 511, 576, 639, 719, 721, 724, 729, 731, 734, 735, 736, 737, 741, 742, 744, 745, 746, 749, 750, 751, 880], "05": [69, 112, 114, 115, 164, 214, 241, 318, 319, 321, 338, 340, 342, 582, 639, 718, 719, 720, 721, 742, 743, 748, 750], "07": [69, 318, 320, 336, 338, 339, 344, 346, 472, 517, 718, 720, 750, 880], "08": [69, 114, 115, 150, 241, 318, 339, 472, 511, 577, 639, 743, 748, 880], "zone": [69, 96, 97, 107, 319, 338, 719, 742], "america": [69, 742], "new_york": [69, 742], "\u03bc": [69, 149, 150, 164, 214, 241, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 472, 517, 576, 577, 582, 639, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 880], "est": [69, 742], "encount": [70, 149, 241, 404, 405, 455, 456, 503, 506, 515, 533, 547, 576, 639, 807, 808, 863, 864, 918], "error": [70, 96, 97, 107, 186, 241, 277, 289, 294, 298, 380, 447, 449, 455, 456, 472, 547, 623, 673, 685, 689, 693, 855, 857, 863, 864, 880, 918], "duplic": [73, 157, 163, 164, 210, 241, 369, 547, 581, 582, 612, 639, 775, 918], "certain": [74, 99, 108, 155, 214, 241, 500, 562, 594, 604, 605, 639, 918], "structur": [75, 79, 81, 138, 177, 241, 547, 593, 639, 647, 918], "least": [76, 118, 408, 490, 547, 811, 906, 918], "unexpect": [77, 241], "caus": [77, 85, 96, 97, 107, 125, 138, 241, 647, 918], "panic": 77, "combin": [79, 81, 149, 150, 151, 164, 214, 241, 263, 344, 459, 465, 471, 547, 576, 577, 582, 603, 639, 748, 867, 873, 879], "mismatch": 79, "incompat": 81, "pa": [84, 108, 112], "chunkedarrai": [84, 173, 241, 713, 918], "schemadefinit": [84, 86, 87, 88, 90, 241, 639], "schema_overrid": [84, 86, 87, 88, 89, 90, 162, 241, 639], "copi": [84, 85, 125, 127, 128, 162, 201, 206, 218, 241, 356, 475, 547, 560, 561, 617, 639, 644, 698, 702, 715, 761, 883, 895, 899, 900, 918], "most": [84, 96, 97, 107, 398, 402, 408, 469, 490, 547, 803, 811, 877, 906, 918], "closest": 84, "pair": [84, 86, 87, 88, 90, 182, 241, 597, 639], "declar": [84, 86, 87, 88, 90, 241, 639], "sever": [84, 86, 87, 88, 90, 241, 639], "wai": [84, 86, 87, 88, 90, 132, 148, 162, 177, 196, 221, 241, 407, 443, 500, 547, 564, 575, 593, 607, 621, 639], "As": [84, 86, 87, 88, 90, 100, 241, 531, 639], "auto": [84, 86, 87, 88, 90, 105, 111, 209, 241, 639], "automat": [84, 86, 87, 88, 90, 96, 97, 98, 107, 118, 119, 190, 218, 241, 459, 465, 471, 472, 600, 617, 639, 867, 873, 879, 880, 918], "equival": [84, 86, 87, 88, 90, 99, 160, 174, 241, 460, 639, 791, 868, 881, 882, 918], "form": [84, 86, 87, 88, 90, 161, 187, 212, 241, 408, 547, 639, 811, 918], "them": [84, 86, 87, 88, 90, 138, 149, 150, 164, 171, 214, 241, 277, 368, 404, 405, 501, 547, 576, 577, 582, 591, 639, 647, 673, 807, 808, 918], "dimens": [84, 86, 88, 90, 241, 417, 547, 639, 820, 918], "construct": [84, 86, 87, 88, 89, 90, 241, 391, 547, 574, 596, 639, 918], "allow_copi": [85, 125], "interchang": [85, 125], "protocol": [85, 98, 125], "__dataframe__": 85, "convers": [85, 125, 162, 206, 241, 472, 556, 880, 898, 899, 900, 918], "detail": [85, 98, 114, 115, 125, 241, 639, 925], "latest": [85, 99, 108, 125, 363, 398, 547], "index": [85, 89, 92, 98, 113, 125, 142, 149, 150, 155, 164, 178, 184, 186, 195, 207, 214, 219, 241, 248, 260, 261, 262, 264, 265, 266, 267, 275, 285, 289, 335, 420, 421, 422, 423, 424, 426, 427, 428, 431, 441, 453, 466, 481, 547, 576, 577, 582, 606, 619, 639, 655, 656, 657, 658, 659, 660, 662, 663, 671, 681, 685, 739, 809, 834, 837, 849, 861, 874, 890, 918], "throw": [85, 298, 455, 456, 547, 693, 863, 864, 918], "runtimeerror": 85, "from_panda": [85, 100], "from_arrow": 85, "effici": [85, 162, 241], "map": [86, 87, 96, 97, 101, 102, 105, 106, 107, 109, 126, 135, 161, 182, 186, 187, 202, 241, 339, 344, 390, 391, 490, 495, 547, 566, 597, 639, 743, 748, 798, 918], "clone": [86, 87, 88, 89, 90, 127, 205, 206, 241, 560, 639, 698, 898, 899, 900, 908, 918], "dimension": [86, 88, 90, 241, 639, 918], "infer_schema_length": [87, 90, 96, 97, 100, 107, 110, 241, 639], "mani": [87, 90, 98, 138, 241, 647, 918], "scan": [87, 90, 96, 97, 105, 107, 108, 109, 110, 111, 112, 569, 578, 585, 639], "slow": [87, 90, 96, 97, 107, 253, 312, 547, 709, 918], "NOT": [87, 114, 115], "typic": 87, "clearer": 87, "after": [87, 95, 96, 97, 101, 105, 107, 109, 110, 111, 138, 211, 240, 241, 353, 391, 413, 475, 547, 613, 639, 647, 742, 798, 816, 883, 918], "load": [87, 89, 99, 108, 241, 556, 578, 585, 639], "want": [87, 126, 138, 174, 241, 301, 302, 303, 359, 389, 391, 420, 421, 422, 423, 424, 426, 427, 428, 506, 515, 547, 562, 578, 585, 639, 647, 699, 700, 701, 899, 918], "_partial_": [87, 241, 639], "omit": [87, 117, 118, 119, 174, 241], "partial": 87, "present": [87, 114, 118, 372, 547, 908, 918], "np": [88, 141, 241, 481, 547, 639, 777, 781, 782, 783, 822, 918], "ndarrai": [88, 141, 205, 241, 481, 547, 639, 713, 834, 837, 890, 899, 918], "numpi": [88, 113, 130, 205, 206, 241, 404, 405, 547, 639, 777, 781, 782, 783, 807, 808, 822, 834, 890, 899, 900, 908, 918], "columnar": [88, 90, 161, 187, 241], "interpret": [88, 90, 96, 97, 107, 241, 639], "yield": [88, 90, 96, 97, 107, 136, 138, 209, 241, 639, 647, 755, 918], "conclus": [88, 90, 241, 639], "pd": [89, 100, 485, 547, 901, 918], "nan_to_nul": [89, 241, 639, 918], "include_index": 89, "datetimeindex": [89, 713, 918], "panda": [89, 100, 113, 206, 241, 485, 547, 639, 900, 901, 918], "instal": [89, 96, 97, 98, 101, 105, 108, 113, 130, 205, 206, 241, 603, 639, 900, 918], "nan": [89, 114, 115, 118, 125, 139, 206, 241, 315, 316, 357, 367, 374, 376, 377, 378, 392, 401, 404, 405, 503, 533, 547, 570, 639, 650, 654, 714, 762, 782, 783, 807, 808, 822, 900, 918], "convert": [89, 91, 99, 100, 108, 125, 202, 203, 204, 205, 208, 241, 290, 319, 461, 472, 639, 686, 719, 869, 880, 887, 898, 899, 900, 908, 918], "pd_df": 89, "pd_seri": 89, "dummi": [91, 204, 241, 896, 918], "to_dummi": [91, 241, 918], "foo_1": [91, 204, 241], "foo_2": [91, 204, 241], "bar_3": [91, 204, 241], "bar_4": [91, 204, 241], "ham_a": [91, 204, 241], "ham_b": [91, 204, 241], "datatypeclass": 92, "get": [92, 102, 106, 120, 129, 135, 145, 146, 149, 150, 152, 153, 157, 159, 166, 173, 186, 189, 191, 195, 199, 217, 226, 235, 241, 248, 260, 261, 262, 264, 265, 274, 278, 279, 291, 307, 308, 309, 310, 311, 322, 360, 365, 369, 371, 379, 382, 384, 392, 393, 394, 397, 399, 401, 404, 405, 412, 441, 445, 457, 460, 479, 480, 487, 491, 514, 519, 523, 524, 525, 526, 534, 537, 538, 547, 563, 566, 573, 576, 577, 578, 583, 585, 599, 606, 610, 616, 626, 635, 639, 655, 656, 657, 658, 659, 660, 670, 674, 675, 687, 697, 705, 706, 707, 708, 722, 767, 770, 773, 775, 778, 789, 794, 799, 801, 802, 804, 807, 808, 812, 813, 815, 849, 852, 865, 868, 889, 895, 896, 903, 907, 908, 918], "uint32": [92, 113, 136, 241, 262, 265, 266, 267, 279, 320, 323, 326, 328, 330, 332, 333, 336, 337, 340, 345, 346, 416, 448, 457, 460, 481, 485, 547, 658, 662, 663, 675, 693, 720, 723, 729, 731, 734, 736, 737, 740, 741, 744, 749, 750, 755, 835, 856, 901, 918], "regular": [92, 161, 186, 187, 214, 241, 353, 500, 513, 523, 526, 536, 547], "uint64": [92, 151, 241, 266, 267, 364, 415, 547, 662, 663, 769, 818, 918], "bigidx": 92, "read": [93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 138, 241, 389, 547, 569, 574, 596, 639, 647, 918], "over": [93, 96, 97, 99, 107, 118, 126, 138, 161, 162, 186, 187, 209, 220, 223, 241, 253, 312, 358, 367, 389, 390, 419, 420, 421, 422, 423, 424, 426, 427, 428, 495, 506, 507, 515, 522, 530, 547, 623, 647, 648, 709, 822, 823, 824, 826, 830, 918], "fetch": [93, 107, 165, 241, 560, 562, 578, 585, 639], "ideal": 93, "read_csv_batch": [93, 557], "tpch": [93, 97], "tables_scale_100": [93, 97], "lineitem": [93, 97, 98], "tbl": [93, 97], "try_parse_d": [93, 96, 97, 107], "In": [94, 99, 108, 111, 118, 119, 122, 126, 136, 138, 149, 150, 174, 241, 253, 397, 547, 576, 577, 639, 647, 755, 817, 918], "probabl": [94, 122, 349, 547, 754, 918], "n_row": [95, 96, 97, 101, 105, 107, 109, 110, 111, 162, 241, 569, 639], "accept": [95, 96, 97, 99, 101, 105, 137, 148, 190, 196, 218, 221, 241, 353, 407, 443, 497, 499, 500, 502, 513, 535, 547, 568, 575, 600, 607, 617, 621, 639], "stop": [95, 96, 97, 101, 105, 107, 109, 110, 111, 320, 322, 323, 325, 330, 332, 336, 337, 339, 340, 343, 344, 345, 346, 348, 717, 719, 720, 722, 723, 729, 731, 734, 736, 737, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752], "textio": 96, "new_column": [96, 97, 100], "comment_char": [96, 97, 107], "quote_char": [96, 97, 107], "skip_row": [96, 97, 107], "missing_utf8_is_empty_str": [96, 97, 107], "ignore_error": [96, 97, 107], "n_thread": [96, 97], "8192": 96, "csvencod": [96, 97, 107], "low_memori": [96, 97, 105, 107, 110, 111], "storage_opt": [96, 99, 101, 105, 108, 109, 111], "skip_rows_after_head": [96, 97, 107], "row_count_nam": [96, 97, 101, 105, 107, 109, 110, 111], "row_count_offset": [96, 97, 101, 105, 107, 109, 110, 111], "sample_s": [96, 97], "eol_char": [96, 97, 107], "By": [96, 97, 100, 107, 164, 241, 461, 521, 582, 639, 852, 869, 899, 907, 918], "we": [96, 97, 100, 107, 164, 241, 272, 461, 521, 539, 582, 586, 639, 648, 668, 869, 918], "handler": [96, 97, 100], "g": [96, 97, 99, 100, 101, 105, 108, 109, 111, 212, 241, 253, 353, 435, 513, 547, 597, 639, 835, 899, 918], "via": [96, 97, 100, 107, 109, 110, 111, 161, 187, 241, 253, 547], "builtin": [96, 97, 100], "stringio": [96, 97], "fsspec": [96, 97, 101, 105, 108, 109, 111, 113], "remot": [96, 97, 101, 105], "first": [96, 97, 100, 107, 110, 126, 147, 149, 152, 164, 166, 173, 177, 178, 199, 209, 210, 214, 226, 241, 262, 264, 265, 272, 275, 276, 312, 335, 339, 365, 371, 384, 391, 431, 453, 455, 456, 462, 463, 499, 506, 515, 519, 547, 562, 576, 578, 582, 585, 593, 612, 618, 626, 639, 657, 660, 668, 671, 672, 686, 709, 711, 739, 743, 770, 778, 794, 798, 834, 861, 863, 864, 870, 871, 918], "dataset": [96, 97, 107, 112, 381, 547, 556, 586, 639, 792, 918], "autogener": [96, 97, 107], "column_x": [96, 97, 107], "enumer": [96, 97, 107, 162, 241], "everi": [96, 97, 107, 149, 200, 203, 214, 241, 266, 267, 271, 273, 275, 276, 285, 288, 307, 308, 309, 310, 311, 312, 339, 344, 355, 452, 482, 506, 507, 547, 569, 576, 611, 639, 662, 663, 667, 669, 671, 672, 681, 684, 705, 706, 707, 708, 709, 743, 748, 760, 860, 891, 918], "shorter": [96, 97], "remain": [96, 97, 107, 136, 241, 253, 468, 469, 547, 586, 639, 755, 876, 877, 918], "comment": [96, 97, 107], "instanc": [96, 97, 107, 118, 119, 138, 143, 241, 290, 298, 398, 420, 421, 422, 423, 424, 426, 427, 428, 506, 515, 547, 586, 619, 639, 647, 693, 918], "special": [96, 97, 107, 648, 918], "handl": [96, 97, 107, 112, 271, 313, 475, 547, 667, 712, 883, 918], "escap": [96, 97, 107], "dure": [96, 97, 107, 123, 138, 241, 647, 918], "equal": [96, 97, 107, 114, 115, 121, 144, 149, 164, 171, 241, 419, 420, 421, 422, 423, 424, 426, 427, 428, 457, 458, 464, 475, 496, 547, 576, 582, 591, 639, 822, 823, 824, 825, 826, 827, 829, 830, 831, 835, 865, 866, 872, 883, 918], "would": [96, 97, 107, 262, 265, 275, 397, 413, 497, 547, 586, 639, 657, 660, 671, 816, 899, 918], "prefer": [96, 97, 99, 107, 126, 138, 161, 186, 187, 223, 241, 253, 419, 547, 623, 639, 647, 822, 918], "treat": [96, 97, 107, 447, 462, 463, 855, 870, 871], "befor": [96, 107, 123, 138, 149, 164, 211, 241, 310, 311, 312, 391, 408, 419, 420, 421, 422, 423, 424, 426, 427, 428, 475, 479, 547, 576, 579, 582, 613, 639, 647, 707, 708, 709, 798, 811, 822, 823, 824, 825, 826, 827, 829, 830, 831, 883, 888, 918], "10000": [96, 162, 241, 475], "check": [96, 97, 107, 114, 115, 144, 158, 160, 241, 250, 251, 269, 293, 296, 297, 368, 372, 447, 451, 470, 547, 586, 639, 645, 646, 665, 688, 691, 692, 774, 776, 779, 780, 786, 787, 788, 790, 791, 835, 855, 859, 878, 918], "might": [96, 97, 107, 253, 397, 488, 547, 900, 918], "issu": [96, 97, 100, 107, 310, 311, 479, 547, 707, 708, 888, 918], "iso8601": [96, 97, 107], "naiv": [96, 97, 107, 318, 718], "hand": [96, 97, 107], "alwai": [96, 126, 223, 241, 397, 586, 623, 639], "physic": [96, 97, 164, 241, 299, 485, 547, 559, 581, 582, 639, 695, 901, 918], "cpu": [96, 97], "your": [96, 97, 114, 115, 161, 190, 218, 221, 241, 253, 547, 562, 578, 585, 586, 600, 617, 621, 639], "system": [96, 97], "wrongli": 96, "done": [96, 97, 107, 112, 147, 164, 241, 252, 298, 458, 464, 547, 582, 639, 693, 866, 872, 918], "buffer": [96, 97, 136, 161, 241, 755, 918], "modifi": [96, 97, 107, 123, 154, 161, 216, 241, 263, 338, 347, 547, 742, 751, 819, 881, 882, 918], "lossi": [96, 97, 107], "decod": [96, 97], "im": [96, 97], "usag": [96, 97, 107, 118, 119, 194, 241, 843, 918], "expens": [96, 97, 105, 107, 110, 111, 161, 186, 187, 209, 210, 241, 253, 547, 612, 639, 647, 918], "nativ": [96, 101, 105, 126, 161, 187, 203, 223, 241, 253, 547, 623], "parser": 96, "even": 96, "possibl": [96, 126, 148, 161, 187, 210, 223, 241, 253, 388, 397, 469, 489, 547, 575, 612, 623, 639, 877, 918], "regard": [96, 503, 533], "sens": [96, 101, 105, 109, 111, 149, 150, 171, 214, 241, 576, 577, 591, 639], "particular": [96, 101, 105, 109, 111, 136, 241, 755, 918], "storag": [96, 99, 101, 105, 108, 109, 111], "skip": [96, 97, 100, 105, 107, 111, 212, 241, 648, 918], "offset": [96, 97, 101, 105, 107, 109, 110, 111, 149, 150, 195, 214, 219, 241, 285, 335, 339, 344, 441, 466, 472, 547, 576, 577, 606, 619, 639, 681, 739, 743, 748, 849, 874, 880, 918], "row_count": [96, 97, 101, 105, 107, 109, 110, 111], "sampl": [96, 97, 223, 241, 440, 547, 623, 848, 918], "estim": [96, 97, 136, 241, 351, 352, 381, 547, 755, 757, 758, 792, 918], "alloc": [96, 97, 136, 181, 241, 755, 918], "need": [96, 97, 100, 114, 115, 149, 150, 194, 205, 241, 290, 391, 435, 457, 547, 576, 577, 639, 842, 865, 918], "scan_csv": [96, 97, 604, 605, 639], "lazili": [96, 97, 107, 108, 109, 110, 111, 391, 547], "glob": [96, 97, 107, 109, 110, 111], "pattern": [96, 97, 107, 109, 110, 111, 161, 241, 396, 447, 448, 453, 454, 462, 463, 836, 837, 855, 856, 861, 862, 870, 871, 918], "store": [96, 105, 138, 161, 187, 241, 647, 918], "continu": [96, 105, 440, 547, 848, 918], "benchmark": [96, 105], "50000": 97, "batchedcsvread": [97, 556], "batch": [97, 110, 586, 639], "upon": 97, "creation": 97, "gather": 97, "next_batch": 97, "call": [97, 118, 119, 148, 165, 240, 241, 253, 308, 311, 547, 557, 575, 638, 639, 648, 918], "big": 97, "interest": 97, "seen_group": 97, "big_fil": 97, "while": [97, 99, 100, 108, 118, 119, 161, 170, 209, 241, 590, 639], "df_current_batch": 97, "concat": [97, 501, 697, 804, 918], "partition_df": 97, "partition_bi": [97, 162, 241], "as_dict": [97, 176, 241], "fh": 97, "write_csv": [97, 107, 241], "els": 97, "partition_on": 98, "partition_rang": 98, "partition_num": 98, "dbreadengin": 98, "connectorx": [98, 113], "raw": 98, "partit": [98, 99, 105, 108, 112, 162, 176, 241], "backend": [98, 99, 108], "transfer": 98, "document": [98, 100, 456, 472, 864, 880], "redshift": 98, "mysql": 98, "mariadb": 98, "clickhous": 98, "oracl": 98, "bigqueri": 98, "pleas": [98, 108], "doc": [98, 130, 241], "github": 98, "com": [98, 350, 351, 352, 453, 547, 756, 757, 758, 861, 918], "sfu": 98, "db": 98, "connector": 98, "destin": 98, "sqlite": 98, "develop": [98, 118, 119], "flight_sql": 98, "further": [98, 900, 918], "wide": [98, 147, 170, 212, 241, 590, 639], "adopt": 98, "significantli": 98, "better": [98, 126, 223, 241, 253, 490, 547, 623, 836, 837, 918], "driver": 98, "cpp": 98, "partition_col": 98, "explicitli": [98, 117, 118, 391, 535, 547], "delta_table_opt": [99, 108], "lake": [99, 108, 556], "root": [99, 108, 380, 390, 399, 410, 444, 478, 546, 547, 851, 918], "filesystem": [99, 108], "absolut": [99, 108, 114, 115, 186, 241, 247, 350, 351, 352, 547, 643, 756, 757, 758, 918], "But": [99, 108], "gc": [99, 108], "azur": [99, 108], "thu": [99, 107, 108, 138, 241, 503, 533, 647, 918], "deltalak": [99, 108, 113], "cloud": [99, 108, 112], "configur": [99, 108], "authent": [99, 108], "keyword": [99, 105, 108, 130, 177, 186, 190, 218, 221, 241, 532, 535, 547, 593, 600, 617, 621, 639, 918], "table_path": [99, 108], "avoid": 99, "year": [99, 108, 149, 150, 164, 214, 241, 325, 335, 336, 339, 344, 345, 420, 421, 422, 423, 424, 426, 427, 428, 509, 510, 547, 576, 577, 582, 639, 725, 739, 740, 743, 748, 749], "2021": [99, 108, 131, 147, 149, 214, 241, 472, 521, 576, 639, 725, 788, 880, 918], "aw": [99, 108], "bucket": [99, 108, 339, 344, 743, 748], "aws_access_key_id": [99, 108], "the_aws_access_key_id": [99, 108], "aws_secret_access_kei": [99, 108], "the_aws_secret_access_kei": [99, 108], "googl": [99, 108], "service_account": [99, 108], "service_account_json_absolute_path": [99, 108], "az": [99, 108], "adl": [99, 108], "abf": [99, 108], "azure_storage_account_nam": [99, 108], "azure_storage_account_kei": [99, 108], "without_fil": [99, 108], "track": [99, 108, 126, 241], "sheet_id": 100, "sheet_nam": 100, "xlsx2csv_option": 100, "read_csv_opt": 100, "xlsx2csv": [100, 113], "read_csv": [100, 107], "skip_empty_lin": 100, "my": [100, 108, 112], "datasheet": 100, "correct": [100, 351, 352, 381, 425, 440, 547, 586, 639, 757, 758, 792, 828, 848, 918], "look": [100, 290, 293, 688], "fix": [100, 117, 118, 347, 420, 421, 422, 423, 424, 426, 427, 428, 547, 751], "whole": [100, 442, 443, 453, 547, 639, 861], "With": 100, "1000": [100, 136, 241, 326, 327, 475, 730], "spreadsheet": [100, 178, 241], "xl": 100, "xlsm": 100, "xlsb": 100, "odf": 100, "od": [100, 471, 879], "odt": 100, "memory_map": [101, 105, 109], "v2": [101, 109], "greatli": [101, 109], "repeat": [101, 109, 414, 416, 547], "o": [101, 109, 312, 452, 486, 547, 709, 860, 902, 918], "page": [101, 105, 109, 111, 241, 547, 556, 605, 639, 918], "give": [101, 105, 109, 110, 111, 170, 241, 322, 381, 416, 547, 556, 590, 639, 722, 792, 918], "That": [101, 586, 639], "filenam": 101, "my_fil": 101, "write_ipc": [101, 241], "read_ndjson": 103, "parallelstrategi": [105, 111], "use_statist": [105, 111], "awar": [105, 161, 187, 203, 241, 472, 880], "stabl": [105, 130, 188, 241, 590, 639], "row_group": [105, 111], "read_tabl": 105, "with_column_nam": 107, "push": [107, 109, 110, 111, 112], "down": [107, 109, 110, 111, 112, 362, 547, 766, 918], "therebi": [107, 109, 110, 111], "potenti": [107, 109, 110, 111], "overhead": [107, 109, 110, 111], "updat": [107, 241, 639], "realloc": [107, 109, 110, 138, 241, 647, 918], "my_long_fil": 107, "doesn": [107, 349, 547, 754, 908, 918], "thing": [107, 493, 514], "less": [107, 164, 241, 458, 464, 469, 475, 582, 639, 866, 872, 877, 883], "limit": [107, 140, 241, 292, 301, 302, 303, 358, 363, 547, 571, 578, 605, 639, 699, 700, 701, 763, 918], "breezah": 107, "languag": [107, 149, 150, 164, 214, 241, 335, 339, 344, 420, 421, 422, 423, 424, 426, 427, 428, 547, 576, 577, 582, 639, 739, 743, 748], "terribl": 107, "mydf": 107, "lambda": [107, 126, 143, 177, 223, 241, 253, 290, 350, 351, 352, 389, 390, 419, 495, 506, 507, 508, 515, 522, 530, 536, 547, 586, 593, 623, 639, 648, 686, 756, 757, 758, 918], "raw_filesystem": 108, "adjust": [108, 350, 351, 352, 440, 547, 756, 757, 758, 848, 918], "subtreefilesystem": 108, "reli": 108, "mention": 108, "ensur": [108, 118, 119, 121, 148, 176, 186, 241, 368, 490, 547, 575, 586, 639, 899, 906, 918], "gcsf": 108, "pyfilesystem": 108, "fsspechandl": 108, "gcsfilesystem": 108, "token": 108, "pa_f": 108, "adlf": 108, "azureblobfilesystem": 108, "account_nam": 108, "account_kei": 108, "allow_pyarrow_filt": 112, "lead": [112, 241, 432, 459, 471, 475, 481, 490, 503, 523, 526, 533, 547, 586, 623, 639, 838, 867, 879, 883, 918], "comparison": 112, "dset": 112, "folder": 112, "1970": 112, "out": [113, 150, 241, 275, 289, 294, 370, 373, 447, 449, 547, 577, 604, 605, 639, 671, 685, 689, 855, 857], "stdout": [113, 147, 241], "13": [113, 127, 128, 139, 140, 146, 150, 155, 165, 173, 218, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 241, 419, 421, 501, 506, 515, 538, 547, 560, 561, 570, 571, 577, 584, 617, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 639, 648, 743, 748, 749, 918], "platform": 113, "maco": 113, "arm64": 113, "arm": 113, "64bit": [113, 415, 547, 818, 918], "main": 113, "feb": 113, "59": [113, 318, 330, 340, 510, 718, 734, 744], "clang": 113, "14": [113, 126, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 241, 325, 367, 547, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 743], "1400": 113, "29": 113, "202": 113, "2_alpha": 113, "detect": 113, "matplotlib": [113, 594, 603, 639], "check_dtyp": [114, 115], "check_exact": [114, 115], "rtol": [114, 115], "1e": [114, 115], "atol": [114, 115], "nans_compare_equ": [114, 115], "check_column_ord": 114, "check_row_ord": 114, "assertionerror": [114, 115], "compar": [114, 115, 144, 241, 494, 835, 918], "exactli": [114, 115, 118, 119, 468, 469, 843, 876, 877, 918], "toler": [114, 115, 164, 241, 582, 639], "inexact": [114, 115], "assert": [114, 115, 117, 118, 119, 150, 241, 556, 577, 639, 768, 918], "irrespect": 114, "unsort": 114, "check_nam": 115, "s1": [115, 143, 241, 900, 909, 918], "searchstrategi": [116, 118, 119], "null_prob": [116, 118, 119], "percentag": [116, 118, 119, 408, 547, 811, 918], "chanc": [116, 118, 119], "flag": [116, 432, 547, 567, 586, 639, 838, 918], "hypothesi": [116, 117, 118, 119, 925], "sampled_from": 116, "unique_small_int": 116, "ccy": 116, "gbp": 116, "eur": [116, 131, 147, 241], "jpy": 116, "min_col": [117, 118], "max_col": [117, 118], "suitabl": [117, 431, 547, 834, 918], "standalon": [117, 118], "itself": [117, 584, 639], "mincol": 117, "exact": [117, 118, 119, 194, 241, 472, 880], "especi": 117, "punctuat": 117, "test_special_char_colname_init": 117, "z": [117, 118, 136, 157, 159, 163, 170, 241, 268, 299, 364, 416, 472, 547, 581, 590, 606, 639, 695, 763, 880, 918], "test_unique_xyz": 117, "assert_someth": 117, "min_siz": [118, 119], "max_siz": [118, 119], "include_col": 118, "allow_infin": [118, 119], "allowed_dtyp": [118, 119], "excluded_dtyp": [118, 119], "describ": [118, 147, 241, 918], "desir": 118, "ignor": [118, 119, 168, 198, 241, 271, 313, 338, 350, 351, 352, 404, 405, 547, 667, 712, 742, 756, 757, 758, 807, 808, 918], "n_chunk": [118, 119, 241, 918], "randomis": 118, "onto": 118, "independ": [118, 119], "either": [118, 150, 165, 168, 176, 186, 198, 241, 577, 584, 639], "pct": 118, "preced": 118, "disallow": [118, 119], "exclud": [118, 119, 308, 311, 368, 500, 533, 547, 773, 788, 918], "deploi": [118, 119], "characterist": [118, 119], "directli": [118, 119, 350, 351, 352, 547, 639, 756, 757, 758, 918], "concret": [118, 119], "test_repr": [118, 119], "isinst": [118, 119, 241], "repr": [118, 119], "known": [118, 623], "df_strategi": 118, "15836": 118, "1755e": 118, "38": 118, "575050513": 118, "constructor": 119, "max_data_s": 119, "distinct": [119, 176, 241, 291, 413, 511, 547, 687, 816, 918], "54666": 119, "6414": 119, "63290": 119, "pool": 120, "toggl": [121, 472, 880], "scope": 123, "lifetim": 123, "initi": [123, 506, 515], "whatev": 123, "were": 123, "enter": 123, "set_verbos": 123, "do_various_th": 123, "restor": 123, "nan_as_nul": 125, "_pyarrowdatafram": 125, "nullabl": 125, "extens": [125, 206, 241, 900, 918], "propag": [125, 168, 198, 241, 404, 405, 547, 807, 808, 918], "return_dtyp": [126, 241, 253, 389, 495, 522, 547, 648, 918], "inference_s": [126, 241], "256": [126, 241, 811, 918], "user": [126, 177, 223, 241, 253, 432, 495, 547, 593, 623, 639, 648, 838, 918], "udf": [126, 177, 223, 241, 253, 495, 547, 593, 623, 639, 648, 918], "logic": [126, 223, 241, 485, 547, 574, 581, 596, 620, 623, 639, 901, 918], "almost": [126, 223, 241, 623], "_significantly_": [126, 223, 241, 623], "intens": [126, 223, 241, 623], "becaus": [126, 136, 149, 165, 212, 223, 241, 272, 576, 623, 639, 648, 668, 755, 918], "forc": [126, 164, 223, 241, 581, 582, 623, 639], "materi": [126, 223, 241, 594, 623, 639], "parallelis": [126, 223, 241, 623], "optimis": [126, 223, 241, 623, 639, 836, 837, 918], "wherev": [126, 223, 241, 253, 547, 623], "strongli": [126, 186, 223, 241, 253, 547, 623], "achiev": [126, 223, 241, 253, 547, 623], "best": [126, 223, 241, 253, 547, 623], "tri": [126, 241], "arbitrarili": [126, 241], "rearrang": [126, 241], "preserv": [126, 206, 241, 437, 547, 845, 900, 918], "syntax": [126, 174, 241, 603, 639, 918], "column_1": [126, 209, 241], "scalar": [126, 160, 241, 431, 495, 547, 791, 834, 918], "ident": [127, 128, 241, 560, 561, 639, 698, 702, 918], "cheap": [127, 128, 241, 560, 561, 639, 647, 698, 702, 918], "deepcopi": [127, 128, 241, 560, 561, 639, 698, 702, 918], "clear": [128, 241, 561, 639, 702, 918], "properti": [129, 135, 153, 189, 191, 217, 241, 556, 563, 566, 599, 616, 639], "appl": [129, 154, 163, 182, 184, 202, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 241, 410, 418, 451, 470, 478, 547, 581, 597, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 639, 859, 878], "banana": [129, 202, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 241, 410, 418, 478, 547, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634], "pearson": [130, 241, 381, 440, 503, 528, 547, 792, 848, 918], "correl": [130, 241, 503, 528, 533], "coeffici": [130, 241, 440, 547, 848, 918], "corrcoef": [130, 241], "summari": [131, 241, 711, 918], "glimps": [131, 152, 241], "usd": [131, 147, 241], "2020": [131, 147, 150, 241, 319, 321, 324, 326, 327, 329, 331, 334, 338, 341, 342, 472, 577, 639, 719, 721, 724, 730, 732, 735, 738, 742, 745, 880], "null_count": [131, 134, 241, 312, 547, 709, 711, 918], "266667": [131, 241], "666667": [131, 168, 215, 229, 241, 350, 547, 615, 629, 639], "std": [131, 241, 419, 547, 639, 711, 829, 918], "101514": [131, 241], "707107": [131, 241, 351, 547, 757, 918], "57735": [131, 241], "median": [131, 178, 241, 422, 547, 618, 639, 825, 918], "more_column": [132, 137, 211, 241, 353, 513, 547, 564, 568, 613, 639], "Or": [132, 148, 149, 150, 164, 196, 214, 221, 241, 407, 443, 500, 539, 547, 564, 575, 576, 577, 582, 607, 621, 639], "subset": [134, 174, 210, 241, 565, 612, 639], "snippet": [134, 241, 565, 639], "is_nul": [134, 241, 547, 565, 639, 918], "sizeunit": [136, 241, 755, 918], "heap": [136, 241, 755, 918], "its": [136, 241, 318, 339, 344, 718, 743, 748, 755, 918], "bitmap": [136, 241, 755, 918], "therefor": [136, 241, 290, 755, 918], "structarrai": [136, 241, 755, 918], "constant": [136, 150, 241, 356, 547, 577, 639, 755, 761, 918], "unchang": [136, 241, 253, 485, 547, 586, 623, 639, 755, 901, 918], "visibl": [136, 241, 755, 918], "capac": [136, 194, 241, 755, 843, 918], "ffi": [136, 241, 755, 918], "kb": [136, 241, 755, 918], "mb": [136, 241, 755, 918], "gb": [136, 241, 755, 918], "tb": [136, 241, 755, 918], "revers": [136, 241, 286, 307, 308, 309, 310, 311, 390, 410, 478, 547, 639, 705, 706, 707, 708, 918], "1_000_000": [136, 241, 755, 918], "25888898": [136, 241], "689577102661133": [136, 241], "long": [137, 170, 212, 241, 568, 590, 639], "letter": [137, 226, 235, 241, 353, 513, 547, 568, 626, 635, 639], "faster": [138, 212, 241, 253, 419, 460, 488, 547, 604, 605, 639, 647, 648, 822, 868, 918], "onlin": [138, 241, 647, 918], "rerun": [138, 241, 647, 918], "latter": [138, 241, 647, 918], "fill_valu": [139, 193, 212, 241, 357, 434, 547, 570, 602, 639, 762, 841, 918], "Not": [139, 241, 374, 376, 391, 547, 570, 639], "To": [139, 241, 315, 316, 358, 523, 526, 536, 547, 570, 639], "fillnullstrategi": [140, 241, 358, 547, 571, 639, 763, 918], "matches_supertyp": [140, 241, 571, 639], "forward": [140, 164, 241, 358, 363, 547, 571, 582, 639, 763, 918], "consecut": [140, 241, 292, 358, 363, 446, 547, 571, 639, 763, 854, 918], "supertyp": [140, 241, 252, 547, 571, 639], "fill_nan": [140, 241, 547, 639, 918], "OR": [141, 241, 494, 572, 639], "reduct": [143, 241], "supercast": [143, 241], "similar": [143, 164, 241, 407, 547, 582, 639], "parent": [143, 241], "rule": [143, 241, 342, 746], "arithmet": [143, 241], "zip_with": [143, 241, 918], "foo11": [143, 241], "bar22": [143, 241], "null_equ": [144, 241, 835, 918], "retriev": [145, 241, 266, 267, 476, 662, 663, 884], "return_as_str": [147, 241], "preview": [147, 241], "nice": [147, 241], "few": [147, 241], "rather": [147, 164, 241, 475, 582, 639, 883], "head": [147, 166, 199, 241, 252, 384, 547, 585, 639, 794, 918], "tail": [147, 152, 241, 252, 440, 547, 639, 848, 918], "intoexpr": [148, 149, 150, 190, 196, 218, 221, 241, 407, 443, 497, 499, 502, 506, 515, 532, 535, 547, 575, 576, 577, 600, 607, 621, 639], "more_bi": [148, 176, 196, 241, 443, 547, 575, 607, 639], "maintain_ord": [148, 176, 178, 210, 214, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 241, 248, 253, 481, 487, 504, 547, 562, 567, 569, 575, 594, 603, 604, 605, 612, 622, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 639, 903, 918], "consist": [148, 176, 241, 472, 575, 639, 880], "agg": [148, 149, 150, 241, 248, 253, 359, 361, 442, 443, 481, 492, 504, 547, 562, 567, 569, 575, 576, 577, 594, 603, 639], "anoth": [148, 241, 289, 312, 317, 547, 575, 618, 639, 648, 685, 709, 717, 835, 918], "index_column": [149, 150, 241, 576, 577, 639], "truncat": [149, 241, 576, 594, 639], "include_boundari": [149, 241, 576, 639], "start_bi": [149, 241, 576, 639], "startbi": [149, 241, 576, 639], "dynamicgroupbi": [149, 241], "normal": [149, 241, 349, 381, 440, 547, 576, 639, 754, 792, 848, 918], "groupbi": [149, 150, 174, 241, 248, 253, 272, 312, 359, 361, 407, 442, 443, 481, 492, 495, 504, 547, 562, 567, 569, 576, 577, 594, 603, 639, 668, 709, 918], "member": [149, 241, 576, 639, 780, 918], "seen": [149, 241, 292, 363, 547, 576, 639], "roll": [149, 150, 241, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 501, 547, 576, 577, 639, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 918], "slot": [149, 241, 271, 312, 313, 547, 576, 639, 667, 709, 712, 918], "1n": [149, 150, 164, 214, 241, 335, 339, 344, 420, 421, 422, 423, 424, 426, 427, 428, 547, 576, 577, 582, 639, 739, 743, 748], "nanosecond": [149, 150, 164, 214, 241, 335, 339, 340, 344, 420, 421, 422, 423, 424, 426, 427, 428, 511, 547, 576, 577, 582, 639, 739, 743, 744, 748], "1u": [149, 150, 164, 214, 241, 335, 339, 344, 420, 421, 422, 423, 424, 426, 427, 428, 547, 576, 577, 582, 639, 739, 743, 748], "microsecond": [149, 150, 164, 214, 241, 335, 339, 340, 344, 420, 421, 422, 423, 424, 426, 427, 428, 510, 511, 547, 576, 577, 582, 594, 639, 739, 743, 748], "1m": [149, 150, 164, 214, 241, 326, 327, 329, 334, 335, 339, 341, 344, 420, 421, 422, 423, 424, 426, 427, 428, 547, 576, 577, 582, 639, 730, 732, 738, 739, 743, 745, 748], "millisecond": [149, 150, 164, 214, 241, 335, 339, 344, 420, 421, 422, 423, 424, 426, 427, 428, 511, 547, 576, 577, 582, 639, 739, 743, 748], "1h": [149, 150, 164, 214, 241, 335, 339, 344, 420, 421, 422, 423, 424, 426, 427, 428, 547, 576, 577, 582, 639, 723, 739, 743, 748], "1w": [149, 150, 164, 214, 241, 335, 339, 344, 420, 421, 422, 423, 424, 426, 427, 428, 547, 576, 577, 582, 639, 739, 743, 748], "week": [149, 150, 164, 214, 241, 335, 339, 344, 346, 420, 421, 422, 423, 424, 426, 427, 428, 511, 547, 576, 577, 582, 639, 739, 743, 748, 750], "month": [149, 150, 164, 214, 241, 320, 335, 339, 344, 420, 421, 422, 423, 424, 426, 427, 428, 509, 510, 547, 576, 577, 582, 639, 720, 739, 743, 748], "1y": [149, 150, 164, 214, 241, 335, 339, 344, 420, 421, 422, 423, 424, 426, 427, 428, 547, 576, 577, 582, 639, 739, 743, 748, 752], "1i": [149, 150, 164, 214, 241, 335, 420, 421, 422, 423, 424, 426, 427, 428, 547, 576, 577, 582, 639, 739], "10i": [149, 150, 241, 576, 577, 639], "ascend": [149, 150, 241, 576, 577, 639], "often": [149, 150, 241, 270, 416, 547, 576, 577, 639, 666], "dynam": [149, 241, 420, 421, 422, 423, 424, 426, 427, 428, 547, 576, 639], "matter": [149, 150, 161, 187, 203, 241, 576, 577, 639], "_lower_bound": [149, 241, 576, 639], "_upper_bound": [149, 241, 576, 639], "impact": [149, 241, 576, 639], "harder": [149, 241, 576, 639], "side": [149, 150, 241, 368, 420, 421, 422, 423, 424, 426, 427, 428, 431, 547, 576, 577, 639, 773, 834, 918], "inclus": [149, 150, 241, 368, 420, 421, 422, 423, 424, 426, 427, 428, 467, 468, 547, 576, 577, 639, 773, 875, 876, 918], "datapoint": [149, 241, 576, 639], "mondai": [149, 241, 346, 576, 639, 750], "date_rang": [149, 214, 241, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 576, 639, 717, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752], "30m": [149, 241, 339, 344, 576, 639, 743, 748], "time_min": [149, 241, 576, 639], "time_max": [149, 241, 576, 639], "23": [149, 150, 241, 318, 323, 339, 510, 576, 577, 639, 718, 723], "boundari": [149, 241, 301, 302, 303, 547, 576, 639, 699, 700, 701, 918], "time_count": [149, 241, 576, 639], "_lower_boundari": [149, 241, 576, 639], "_upper_boundari": [149, 241, 576, 639], "lower_bound": [149, 241, 547, 576, 639, 905, 918], "upper_bound": [149, 241, 290, 547, 576, 639, 797, 918], "time_agg_list": [149, 241, 576, 639], "idx": [149, 162, 241, 290, 576, 639, 686, 837, 918], "arang": [149, 212, 223, 241, 576, 623, 639], "2i": [149, 241, 576, 639], "3i": [149, 241, 576, 639], "a_agg_list": [149, 241, 576, 639], "rollinggroupbi": [150, 241], "dynamic_groupbi": [150, 241, 577, 639], "groupby_dynam": [150, 241, 577, 639], "45": [150, 241, 318, 339, 344, 448, 454, 577, 639, 718, 743, 748, 856, 862], "48": [150, 241, 577, 639], "18": [150, 241, 311, 339, 344, 347, 367, 380, 547, 577, 594, 639, 751], "19": [150, 164, 241, 339, 577, 582, 639, 743, 748], "43": [150, 241, 311, 547, 577, 639], "strptime": [150, 241, 342, 577, 639, 746], "2d": [150, 205, 241, 577, 639, 720], "sum_a": [150, 241, 577, 639], "min_a": [150, 241, 577, 639], "max_a": [150, 241, 577, 639], "to_list": [150, 241, 290, 577, 639, 686, 918], "seed": [151, 188, 241, 364, 430, 436, 547, 769, 833, 844, 918], "seed_1": [151, 241, 364, 547, 769, 918], "seed_2": [151, 241, 364, 547, 769, 918], "seed_3": [151, 241, 364, 547, 769, 918], "hash": [151, 241, 547, 918], "u64": [151, 241, 364, 415, 547, 594, 639, 769, 918], "10783150408545073287": [151, 241], "1438741209321515184": [151, 241], "10047419486152048166": [151, 241], "2047317070637311557": [151, 241], "last": [152, 164, 178, 196, 199, 210, 235, 241, 262, 265, 275, 288, 312, 320, 336, 345, 442, 469, 480, 537, 547, 582, 607, 610, 612, 635, 639, 657, 660, 671, 684, 709, 720, 740, 749, 877, 889, 918], "_except_": [152, 199, 241], "ab": [152, 199, 218, 241, 476, 477, 523, 526, 547, 617, 639, 918], "grown": [154, 241], "baz": [155, 156, 178, 211, 241, 467, 469, 580, 613, 639, 877], "intermedi": [156, 241, 580, 639, 772, 918], "linear": [156, 180, 233, 241, 268, 367, 394, 412, 424, 501, 502, 529, 547, 580, 595, 633, 639, 664, 772, 815, 827, 918], "mask": [157, 159, 241, 269, 293, 294, 369, 371, 379, 447, 449, 547, 665, 688, 689, 764, 773, 775, 778, 789, 812, 813, 836, 855, 857, 909, 918], "visual": [157, 159, 241], "buffer_s": [161, 241], "veri": [161, 209, 241, 253, 547, 561, 639, 702, 918], "fit": [161, 194, 212, 241, 435, 547, 842, 843, 918], "speedup": [161, 241], "signific": [161, 241, 253, 547], "4x": [161, 241], "disabl": [161, 241], "materialis": [161, 162, 186, 187, 241], "iter_row": [162, 186, 187, 241], "17_500": [162, 241], "klmnoopqrstuvwxyz": [162, 241], "__name__": [162, 241], "7500": [162, 241], "recordbatch": [162, 241], "15_000": [162, 241], "record_batch": [162, 241], "to_arrow": [162, 241, 918], "to_batch": [162, 241], "date32": [162, 241], "large_str": [162, 201, 206, 241], "15000": [162, 241], "2500": [162, 241], "left_on": [163, 164, 241, 581, 582, 639], "right_on": [163, 164, 241, 581, 582, 639], "joinstrategi": [163, 241, 581, 639], "suffix": [163, 164, 190, 218, 221, 241, 296, 374, 376, 377, 378, 407, 418, 451, 547, 581, 582, 600, 617, 618, 621, 639, 691, 859], "_right": [163, 164, 241, 581, 582, 639], "outer": [163, 241, 581, 639], "semi": [163, 241, 581, 639], "anti": [163, 241, 581, 639, 836, 837, 918], "cross": [163, 241, 581, 639], "join_asof": [163, 241, 581, 639], "stringcach": [163, 241, 556], "other_df": [163, 241], "by_left": [164, 241, 582, 639], "by_right": [164, 241, 582, 639], "asofjoinstrategi": [164, 241, 582, 639], "allow_parallel": [164, 241, 581, 582, 639], "force_parallel": [164, 241, 581, 582, 639], "asof": [164, 241, 582, 639], "asof_join": [164, 241], "search": [164, 241, 582, 639], "greater": [164, 241, 440, 469, 547, 582, 639, 848, 877, 918], "distanc": [164, 241, 582, 639], "plan": [164, 165, 241, 559, 567, 574, 581, 582, 596, 603, 620, 639], "gdp": [164, 241, 582, 639], "2016": [164, 241, 582, 639], "2017": [164, 241, 582, 639], "2018": [164, 241, 582, 639], "2019": [164, 241, 582, 639], "record": [164, 241, 582, 639], "jan": [164, 241, 582, 639], "1st": [164, 241, 582, 639], "4164": [164, 241, 582, 639], "4411": [164, 241, 582, 639], "4566": [164, 241, 582, 639], "4696": [164, 241, 582, 639], "popul": [164, 241, 582, 639], "12th": [164, 241, 582, 639], "82": [164, 241, 582, 639], "66": [164, 241, 582, 639, 827, 918], "83": [164, 241, 582, 639], "52": [164, 218, 241, 429, 547, 582, 617, 639], "request": [165, 241], "small": [165, 241, 339, 569, 639], "describe_plan": [165, 241, 639], "unoptim": [165, 241, 639], "describe_optimized_plan": [165, 241, 639], "show_graph": [165, 241, 639], "un": [165, 241], "graphviz": [165, 241, 603, 639], "advis": [165, 241], "axi": [167, 168, 170, 172, 198, 241, 590, 639], "null_strategi": [168, 198, 241], "nullstrategi": [168, 198, 241], "spam": [168, 241], "id_var": [170, 241, 590, 639], "value_var": [170, 241, 590, 639], "variable_nam": [170, 241, 590, 639], "value_nam": [170, 241, 590, 639], "unpivot": [170, 241, 590, 639], "leav": [170, 241, 590, 639], "identifi": [170, 176, 210, 241, 590, 612, 639], "massag": [170, 241, 590, 639], "measur": [170, 241, 590, 639], "merg": [171, 241, 591, 639], "caller": [171, 241, 290, 586, 591, 623, 639], "respons": [171, 241, 591, 639], "One": [174, 178, 241, 918], "what": [174, 241, 899, 908, 918], "struct": [174, 190, 208, 211, 218, 241, 290, 391, 455, 468, 469, 490, 506, 507, 508, 522, 547, 600, 613, 617, 639, 686, 863, 876, 877], "pack": [174, 241], "expr_unique_subset": [174, 241], "df_nuniqu": [174, 241], "df_agg_nuniqu": [174, 241], "simpl": [174, 241], "func": [177, 241, 593, 639], "offer": [177, 241, 547, 593, 639], "recommend": [177, 241], "fulli": [177, 188, 241], "advantag": [177, 241], "cast_str_to_int": [177, 241, 593, 639], "col_nam": [177, 241, 593, 639], "tdf": [177, 241, 593, 639], "aggregate_funct": [178, 241], "pivotagg": [178, 241], "sort_column": [178, 241], "predefin": [178, 241], "predict": [178, 181, 214, 241], "transpos": [178, 241], "discoveri": [178, 241], "interpol": [180, 233, 241, 358, 394, 412, 424, 529, 547, 595, 633, 639, 815, 827, 918], "rollinginterpolationmethod": [180, 233, 241, 412, 424, 529, 547, 595, 633, 639, 815, 827, 918], "midpoint": [180, 233, 241, 412, 424, 529, 547, 595, 633, 639, 815, 827, 918], "old": [182, 241, 597, 639], "new_col": [183, 241], "by_pred": [186, 241], "accord": [186, 241, 391, 547, 725], "never": [186, 241], "mutual": [186, 241], "exclus": [186, 241], "addition": [186, 241], "clariti": [186, 241], "anyth": [186, 241], "toomanyrowsreturn": [186, 241, 556], "norowsreturn": [186, 241, 556], "inherit": [186, 241], "rowsexcept": [186, 241, 556], "frac": [188, 241, 350, 351, 352, 430, 440, 486, 547, 756, 757, 758, 833, 848, 902, 918], "with_replac": [188, 241, 430, 547, 833, 918], "shuffl": [188, 223, 241, 430, 547, 623, 833, 918], "neither": [188, 241], "nor": [188, 241], "modul": [188, 241, 430, 436, 546, 547, 833, 844, 918], "more_expr": [190, 218, 241, 407, 499, 532, 547, 600, 617, 639], "named_expr": [190, 218, 241, 532, 535, 600, 617, 639], "threshold": [190, 241, 600, 639], "set_auto_structifi": [190, 218, 241, 600, 617, 639], "is_odd": [190, 241, 600, 639], "_is_odd": [190, 241, 600, 639], "shift_and_fil": [192, 241, 547, 639, 918], "shift": [193, 241, 271, 313, 408, 434, 501, 547, 602, 639, 667, 712, 811, 841, 918], "shrink": [194, 241, 435, 547, 842, 843, 918], "hold": [194, 241], "nulls_last": [196, 241, 262, 265, 442, 547, 607, 639, 657, 660, 918], "ddof": [197, 215, 241, 445, 491, 503, 528, 533, 534, 538, 547, 608, 615, 639, 852, 907, 918], "standard": [197, 241, 325, 351, 426, 440, 445, 456, 534, 547, 608, 639, 725, 757, 848, 852, 864, 918], "deviat": [197, 241, 351, 426, 445, 534, 547, 608, 639, 757, 852, 918], "degre": [197, 215, 241, 445, 491, 503, 528, 533, 547, 852, 907, 918], "freedom": [197, 215, 241, 445, 491, 503, 528, 533, 547, 852, 907, 918], "816497": [197, 241], "21": [198, 241, 517], "16a": [198, 241], "27b": [198, 241], "38c": [198, 241], "nth": [200, 241, 469, 482, 547, 611, 639, 877, 891, 918], "mostli": [201, 241, 359, 547], "categoricaltyp": [201, 241], "as_seri": [202, 241], "fruit": [202, 241, 410, 418, 451, 470, 478, 547, 859, 878], "car": [202, 241, 410, 418, 478, 547], "beetl": [202, 241, 410, 418, 478, 547], "audi": [202, 241, 410, 418, 478, 547], "28": [202, 241, 347, 751], "300": [202, 241, 823, 824, 826, 918], "re": [205, 241], "ll": [205, 241], "numpy_arrai": [205, 241], "use_pyarrow_extension_arrai": [206, 241, 900, 918], "trigger": [206, 241, 900, 918], "sent": [206, 241, 899, 900, 918], "pandas_df1": [206, 241], "pandas_df2": [206, 241], "pandas_df2_pa": [206, 241], "na": [206, 241, 900, 918], "four": [208, 241], "five": [208, 241], "include_head": [209, 241], "header_nam": [209, 241], "column_nam": [209, 241], "perhap": [209, 241], "column_2": [209, 241], "name_gener": [209, 241, 290, 686], "base_nam": [209, 241], "my_column_": [209, 241], "my_column_0": [209, 241], "my_column_1": [209, 241], "my_column_2": [209, 241], "uniquekeepstrategi": [210, 241, 612, 639], "decompos": [211, 241, 613, 639], "t_a": [211, 241, 613, 639], "t_b": [211, 241, 613, 639], "t_c": [211, 241, 613, 639], "t_d": [211, 241, 613, 639], "womp": [211, 241, 613, 639], "t_": [211, 241, 613, 639], "t_struct": [211, 241, 613, 639], "step": [212, 241, 496], "unstackdirect": [212, 241], "much": [212, 241, 289, 312, 547, 685, 709, 918], "pivot": [212, 241], "phase": [212, 241], "subject": [212, 241], "ascii_uppercas": [212, 241], "col1": [212, 241, 639], "col2": [212, 241, 639], "h": [212, 241, 342, 435, 472, 547, 880], "col1_0": [212, 241], "col1_1": [212, 241], "col1_2": [212, 241], "col2_0": [212, 241], "col2_1": [212, 241], "col2_2": [212, 241], "syntact": [213, 241, 508, 513, 514, 518, 529, 532, 536, 614, 639, 851, 918], "sugar": [213, 241, 508, 513, 514, 518, 529, 532, 536, 614, 639, 851, 918], "coalesc": [213, 241, 614, 639], "400": [213, 241, 614, 639, 823, 824, 826, 918], "600": [213, 241, 614, 639], "700": [213, 241, 614, 639], "new_df": [213, 241, 614, 639], "time_column": [214, 241], "frequenc": [214, 241], "forward_fil": [214, 241, 308, 311, 547], "06": [214, 241, 318, 325, 337, 338, 348, 743, 750], "varianc": [215, 241, 352, 381, 428, 491, 538, 547, 615, 639, 758, 792, 831, 907, 918], "grow": [216, 241], "is_not": [218, 241, 547, 617, 639], "not_c": [218, 241, 617, 639], "diff": [218, 241, 321, 324, 327, 329, 331, 334, 341, 547, 617, 639, 721, 724, 730, 732, 735, 738, 745, 918], "_diff": [218, 241, 617, 639], "row_nr": [219, 241, 391, 547, 619, 639, 837, 918], "more_agg": [221, 621], "named_agg": [221, 621], "_sum": [221, 621], "_mean_squar": [221, 621], "b_sum": [221, 621], "c_mean_squar": [221, 621], "17": [221, 429, 517, 547, 621, 703, 743, 918], "sub": [223, 296, 297, 451, 470, 691, 692, 859, 878], "triangl": [223, 623], "group_df": [223, 623], "nr": [226, 235, 626, 635], "maxim": [228, 260, 547, 628, 655, 918], "833333": [229, 629], "minim": [231, 261, 267, 435, 547, 631, 656, 663, 802, 842, 918], "overview": [241, 547, 556, 639, 918], "public": [241, 547, 556, 639, 918], "frameinittyp": [241, 639], "variou": [241, 547, 639, 918], "entri": [241, 639], "prevent": [241, 310, 311, 380, 479, 547, 639, 707, 708, 888, 918], "come": [241, 381, 547, 557, 638, 639, 792, 918], "behavior": [241, 253, 289, 495, 523, 526, 547, 685], "mydatafram": 241, "notic": [241, 639, 918], "df4": 241, "df5": 241, "df6": 241, "corr": [241, 528, 533], "drop_in_plac": 241, "drop_nul": [241, 315, 547, 639, 918], "estimated_s": [241, 918], "explod": [241, 361, 417, 547, 639, 820, 918], "find_idx_by_nam": 241, "fold": [241, 398, 499, 506, 507, 530, 536], "frame_equ": [241, 339, 344], "get_column": [241, 536], "groupby_rol": [241, 420, 421, 422, 423, 424, 426, 427, 428, 547, 576, 639], "hash_row": 241, "hstack": 241, "insert_at_idx": 241, "is_dupl": [241, 547, 918], "is_empti": [241, 918], "is_uniqu": [241, 547, 918], "iter_slic": 241, "melt": [241, 639], "merge_sort": [241, 639], "n_uniqu": [241, 547, 918], "pipe": [241, 547, 639], "quantil": [241, 424, 547, 639, 827, 918], "replace_at_idx": 241, "shrink_to_fit": [241, 918], "take_everi": [241, 547, 639, 918], "to_dict": 241, "to_numpi": [241, 389, 547, 918], "to_panda": [241, 918], "to_struct": 241, "unnest": [241, 468, 469, 477, 639, 876, 877], "unstack": 241, "upsampl": 241, "write_avro": 241, "write_databas": 241, "write_excel": 241, "write_json": [241, 596, 639], "write_parquet": 241, "94": [248, 547], "confus": [250, 374, 376, 547], "tt": [250, 547], "tf": [250, 251, 547], "ff": [250, 251, 547], "upcast": [252, 547], "skip_nul": [253, 547, 648, 918], "pass_nam": [253, 547], "applystrategi": [253, 547], "thread_loc": [253, 547], "assum": [253, 547, 586, 623, 639], "considd": [253, 547], "code": [253, 432, 547, 584, 639, 838, 918], "amount": [253, 547], "releas": [253, 547], "gil": [253, 547], "discourag": [253, 547], "loop": [253, 547], "a_times_2": [253, 547], "invers": [254, 255, 256, 257, 258, 259, 547, 649, 650, 651, 652, 653, 654, 918], "cosin": [254, 255, 304, 305, 389, 547, 649, 650, 703, 704, 918], "570796": [254, 256, 547, 649, 651, 918], "hyperbol": [255, 257, 259, 305, 439, 484, 547, 650, 652, 654, 704, 847, 893, 918], "sine": [256, 257, 389, 438, 439, 547, 651, 652, 846, 847, 918], "881374": [257, 547, 652, 918], "tangent": [258, 259, 483, 484, 547, 653, 654, 892, 893, 918], "785398": [258, 547, 653, 918], "arg_wher": [263, 547], "arg_sort": [265, 547, 660, 918], "favour": [265, 355, 547, 660, 760, 918], "sublist": [266, 267, 269, 271, 274, 275, 276, 277, 278, 285, 288, 289, 662, 663, 665, 667, 670, 671, 672, 673, 674, 681, 684, 685, 686, 780, 918], "membership": [269, 665], "listcol": 270, "number_of_two": 270, "null_behavior": [271, 313, 547, 667, 712, 918], "nullbehavior": [271, 313, 547, 667, 712, 918], "th": [271, 313, 440, 547, 667, 712, 848, 918], "against": [272, 639, 668, 924], "blindli": [272, 668], "worth": [272, 668], "enough": [272, 440, 547, 668, 848, 918], "concat_list": [272, 512, 668], "rank": [272, 503, 512, 533, 547, 668, 918], "exprnamespac": 273, "reshap": [273, 547, 669, 918], "flat": [273, 417, 547, 669, 820, 918], "taken": [285, 466, 481, 547, 681, 874], "null_on_oob": [289, 685], "cheaper": [289, 685], "n_field_strategi": [290, 686], "tostructstrategi": [290, 686], "first_non_nul": [290, 686], "max_width": [290, 686], "field_0": [290, 686], "field_1": [290, 686], "field_n": [290, 686], "know": [290, 460, 868, 899, 908, 918], "incorrectli": 290, "downstream": [290, 432, 547, 838, 918], "advic": 290, "col_name_": [290, 686], "col_name_0": [290, 686], "col_name_1": [290, 686], "col_name_2": [290, 686], "substr": [293, 296, 297, 447, 451, 462, 463, 467, 468, 469, 470, 688, 691, 692, 855, 859, 870, 871, 875, 876, 877, 878], "transferencod": [294, 295, 449, 450, 689, 690, 857, 858], "strict": [294, 298, 447, 449, 461, 472, 547, 689, 693, 835, 855, 857, 869, 880, 918], "hex": [294, 295, 449, 450, 461, 689, 690, 857, 858, 869], "base64": [294, 295, 449, 450, 689, 690, 857, 858], "prefix": [297, 470, 475, 547, 692, 878, 883], "due": [298, 547, 693, 918], "overflow": [298, 310, 311, 461, 479, 547, 693, 707, 708, 869, 888, 918], "categoricalord": [299, 695], "lexic": [299, 695], "k": [299, 381, 486, 547, 695, 792, 902, 918], "min_val": [301, 303, 547, 699, 701, 918], "max_val": [301, 302, 547, 699, 700, 918], "foo_clip": [301, 302, 303, 547], "clip": [302, 303, 547, 700, 701, 918], "543081": [305, 547, 704, 918], "cumul": [307, 308, 309, 310, 311, 506, 507, 508, 547, 705, 706, 707, 708, 918], "a_revers": [307, 308, 309, 310, 311, 390, 418, 478, 547], "value_cummax": [308, 547], "value_cummax_all_fil": [308, 547], "uint16": [310, 311, 479, 547, 707, 708, 888, 918], "value_cumsum": [311, 547], "value_cumsum_all_fil": [311, 547], "min_period": [312, 350, 351, 352, 419, 420, 421, 422, 423, 424, 426, 427, 428, 547, 709, 756, 757, 758, 822, 823, 824, 825, 826, 827, 829, 830, 831, 918], "slide": [312, 547, 709, 918], "realli": [312, 547, 709, 918], "complex": [312, 486, 547, 709, 902, 918], "visit": [312, 547, 709, 918], "44": [314, 547], "drop_nan": [316, 547, 918], "tu": [317, 318, 322, 343, 347, 717, 718, 722, 742, 747, 751], "lose": [317, 717], "2001": [317, 320, 322, 323, 325, 330, 332, 335, 336, 337, 339, 340, 343, 344, 345, 346, 347, 348, 472, 717, 720, 722, 723, 726, 727, 728, 729, 731, 733, 734, 736, 737, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 880], "tu_m": [317, 717], "tu_n": [317, 717], "tm": [318, 718], "compon": [318, 340, 472, 511, 718, 744], "resolv": 318, "456000": [318, 718], "101000": 318, "456": [318, 718, 897, 918], "101": [318, 461, 869], "d1": 318, "d2": 318, "d3": 318, "utc": [319, 338, 472, 719, 742, 880], "tz": [319, 338, 719, 742], "europ": [319, 338, 719, 742], "london": [319, 338, 719, 742], "gmt": [319, 338, 719, 742], "bst": [319, 338, 719, 742], "extract": [320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 340, 341, 345, 346, 348, 454, 455, 456, 547, 720, 721, 723, 724, 725, 729, 730, 731, 732, 734, 735, 736, 737, 738, 740, 741, 744, 745, 749, 750, 752, 862, 863, 864], "weekdai": [320, 336], "day_of_month": [320, 336, 346], "ordinal_dai": [320, 346], "day_of_year": [320, 336, 346], "days_diff": 321, "epochtimeunit": [322, 517, 722], "unix": [322, 517, 722], "epoch_n": [322, 722], "epoch_": [322, 722], "978307200000000": [322, 343, 722, 747], "978307200": [322, 722], "978393600000000": [322, 343, 722, 747], "978393600": [322, 722], "978480000000000": [322, 343, 722, 747], "978480000": [322, 722], "hours_diff": 324, "iso": [325, 345, 346, 725, 749, 750], "correspond": [325, 413, 547, 725, 816, 918], "2006": [325, 335, 739], "180": [325, 337, 348], "2002": [325, 335, 337, 348, 739, 752], "2004": [325, 335, 739], "2005": [325, 335, 739], "1001": [326, 327, 329, 334], "002": [326, 327, 329, 334, 511, 730, 732, 738], "2000": [326, 335, 739], "003": [326, 327, 329, 334], "3000": 326, "997": [326, 327, 329, 334], "997000": 326, "998": [326, 327, 329, 334], "998000": 326, "999": [326, 327, 329, 334], "999000": 326, "microseconds_diff": 327, "milliseconds_diff": 329, "minutes_diff": 331, "1440": [331, 735], "nanoseconds_diff": 334, "1000000": [334, 475, 738], "leap": [335, 739], "minu": [335, 739], "dictat": [335, 739], "date_plus_1i": [335, 739], "1y2mo": [335, 739], "date_min": 335, "1998": [335, 739], "1999": [335, 739], "2003": [335, 517, 739], "ordin": [336, 413, 547, 740, 816, 918], "366": [336, 740], "convert_time_zon": [338, 742], "timestamp": [338, 517, 742], "unset": [338, 742], "london_timezon": 338, "amsterdam": 338, "london_to_amsterdam": 338, "cet": 338, "cest": 338, "half": [339, 350, 351, 352, 547, 743, 756, 757, 758, 918], "225": [339, 344], "to_fram": [339, 344, 472, 836, 837, 876, 877, 880, 918], "10m": [339, 344, 743, 748], "milli": [340, 744], "micro": [340, 744], "456789": 340, "654321": 340, "111110": 340, "765431": 340, "sec": 340, "11111": 340, "seconds_diff": 341, "timestamp_n": [343, 747], "timestamp_m": 343, "978307200000": 343, "978393600000": 343, "978480000000": 343, "53": [345, 749], "sundai": [346, 750], "incorrect": [347, 432, 547, 623, 751, 838, 918], "tu_u": [347, 751], "32971": [347, 751], "32974": [347, 751], "32976": [347, 751], "718281828459045": [349, 386, 547, 754, 795, 918], "pk": [349, 547, 754, 918], "459148": [349, 547], "754888": [349, 547], "span": [350, 351, 352, 547, 756, 757, 758, 918], "half_lif": [350, 351, 352, 547, 756, 757, 758, 918], "ignore_nul": [350, 351, 352, 547, 756, 757, 758, 908, 918], "exponenti": [350, 351, 352, 354, 547, 756, 757, 758, 759, 918], "weight": [350, 351, 352, 419, 420, 421, 422, 423, 424, 426, 427, 428, 440, 547, 756, 757, 758, 822, 823, 824, 825, 826, 827, 829, 830, 831, 848, 918], "decai": [350, 351, 352, 547, 756, 757, 758, 918], "term": [350, 351, 352, 457, 460, 547, 756, 757, 758, 865, 868, 918], "mass": [350, 351, 352, 547, 756, 757, 758, 918], "gamma": [350, 351, 352, 547, 756, 757, 758, 918], "foral": [350, 351, 352, 547, 756, 757, 758, 918], "geq": [350, 351, 352, 547, 756, 757, 758, 918], "theta": [350, 351, 352, 547, 756, 757, 758, 918], "life": [350, 351, 352, 547, 756, 757, 758, 918], "exp": [350, 351, 352, 547, 756, 757, 758, 918], "ln": [350, 351, 352, 547, 756, 757, 758, 918], "smooth": [350, 351, 352, 547, 756, 757, 758, 918], "factor": [350, 351, 352, 485, 547, 756, 757, 758, 901, 918], "leq": [350, 351, 352, 547, 756, 757, 758, 918], "begin": [350, 351, 352, 453, 547, 756, 757, 758, 861, 918], "imbal": [350, 351, 352, 547, 756, 757, 758, 918], "ew": [350, 351, 352, 547, 756, 757, 758, 918], "w_i": [350, 351, 352, 547, 756, 757, 758, 918], "recurs": [350, 351, 352, 547, 756, 757, 758, 918], "y_0": [350, 351, 352, 547, 756, 757, 758, 918], "x_0": [350, 351, 352, 547, 756, 757, 758, 918], "y_t": [350, 351, 352, 547, 756, 757, 758, 918], "y_": [350, 351, 352, 547, 756, 757, 758, 918], "x_t": [350, 351, 352, 547, 756, 757, 758, 918], "observ": [350, 351, 352, 547, 756, 757, 758, 918], "x_2": [350, 351, 352, 547, 756, 757, 758, 918], "428571": [350, 547], "bia": [351, 352, 381, 425, 440, 547, 757, 758, 792, 828, 848, 918], "unbias": [351, 352, 547, 757, 758, 918], "963624": [351, 547, 757, 918], "928571": [352, 547, 758, 918], "wildcard": [353, 493, 500, 506, 507, 515, 530, 547], "regex": [353, 396, 447, 448, 451, 453, 454, 462, 463, 470, 513, 523, 526, 536, 547, 855, 856, 859, 861, 862, 870, 871, 878], "aa": [353, 513, 547], "ba": [353, 513, 547], "cc": [353, 513, 547], "718282": [354, 547], "389056": [354, 547], "54": [354, 547], "59815": [354, 547], "expand": [355, 395, 396, 416, 547, 760, 918], "arr": [355, 512, 540, 547, 760, 899, 910, 918], "exprlistnamespac": [355, 361, 417, 547], "exprstringnamespac": [355, 547], "pythonliter": [356, 547, 617, 639, 761, 918], "extrem": [356, 547, 761, 918], "group_col": [359, 492, 547], "g1": [359, 492, 547], "g2": [359, 492, 547], "lt": [359, 492, 547, 918], "gte": [359, 492, 547], "9774092659964970114": [364, 547], "13614470193936745724": [364, 547], "1101441246220388612": [364, 547], "11638928888656214026": [364, 547], "13382926553367784577": [364, 547], "cumsum": [366, 547, 579, 639, 918], "interpolationmethod": [367, 547, 772, 918], "regrid": [367, 547], "grid": [367, 547], "df_original_grid": [367, 547], "grid_point": [367, 547], "df_new_grid": [367, 547], "conflat": [368, 547], "finit": [370, 503, 533, 547, 777, 918], "primit": [372, 547, 899, 918], "optional_memb": [372, 547, 780, 918], "infinit": [373, 547, 781, 918], "_isnan": [374, 547], "b_isnan": [374, 547], "negat": [375, 547], "_is_not_nan": [376, 547], "b_is_not_nan": [376, 547], "_not_nul": [377, 547], "a_not_nul": [377, 547], "b_not_nul": [377, 547], "_isnul": [378, 547], "a_isnul": [378, 547], "b_isnul": [378, 547], "undo": [380, 400, 547], "duplicateerror": [380, 547, 556], "occurr": [380, 547], "333333": [380, 428, 547, 811, 831, 918], "fisher": [381, 440, 547, 792, 848, 918], "fourth": [381, 547, 792, 918], "central": [381, 440, 547, 792, 848, 918], "subtract": [381, 547, 792, 918], "distribut": [381, 440, 547, 792, 848, 918], "elimin": [381, 547, 792, 918], "bias": [381, 440, 547, 792, 848, 918], "scipi": [381, 440, 547, 792, 848, 918], "stat": [381, 440, 547, 792, 848, 918], "153061": [381, 547], "logarithm": [386, 387, 547, 795, 796, 918], "584963": [386, 547], "30103": [387, 547], "60206": [387, 547], "lowest": [388, 547], "9223372036854775808": [388, 547], "agg_list": [389, 547], "elementwis": [389, 419, 420, 421, 422, 423, 424, 426, 427, 428, 493, 494, 547, 822, 823, 824, 825, 826, 827, 829, 830, 831, 918], "third": [389, 547], "parti": [389, 547], "book": [389, 547], "argmax": [389, 547], "_revers": [390, 418, 478, 547], "b_revers": [390, 418, 478, 547], "remap": [391, 547, 798, 918], "lookup": [391, 547, 798, 918], "country_code_dict": [391, 547], "ca": [391, 547], "canada": [391, 547], "de": [391, 547], "germani": [391, 547], "fr": [391, 547], "franc": [391, 547], "country_cod": [391, 547], "unknown": [391, 521, 547], "rest": [391, 547], "computeerror": [397, 461, 556, 869], "keep_nam": [400, 547], "poison": [404, 405, 547, 807, 808, 918], "nanmax": [404, 405, 547, 807, 808, 918], "wherea": [404, 405, 547, 578, 585, 639, 807, 808, 918], "outcom": [407, 547], "_max": [407, 547], "c_max": [407, 547], "_min": [407, 547], "c_min": [407, 547], "recent": [408, 547, 811, 918], "percent": [408, 547, 811, 918], "090909": [408, 547], "expon": [409, 547], "power": [409, 547], "reverse_": [410, 547], "reverse_a": [410, 547], "reverse_fruit": [410, 547], "reverse_b": [410, 547], "reverse_car": [410, 547], "rankmethod": [413, 547, 816, 918], "ti": [413, 547, 816, 918], "appropri": [413, 547, 816, 918], "competit": [413, 547, 816, 918], "highest": [413, 489, 503, 533, 547, 639, 816, 918], "safe": [415, 547, 818, 899, 918], "coerc": [416, 547], "dim": [417, 547, 820, 918], "fruits_revers": [418, 478, 547], "cars_revers": [418, 478, 547], "window_s": [419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 547, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 918], "rolling_min": [419, 547, 822, 918], "rolling_max": [419, 547, 822, 918], "rolling_mean": [419, 547, 822, 918], "rolling_sum": [419, 547, 822, 918], "multipli": [419, 420, 421, 422, 423, 424, 426, 427, 428, 547, 822, 823, 824, 825, 826, 827, 829, 830, 831, 918], "358899": [419, 547], "041452": [419, 547], "567764": [419, 547], "travers": [420, 421, 423, 426, 427, 428, 547, 823, 824, 826, 829, 830, 831, 918], "vector": [420, 421, 423, 426, 427, 428, 547, 823, 824, 826, 829, 830, 831, 918], "5h": [420, 421, 422, 423, 424, 426, 427, 428, 547], "33": [424, 429, 500, 547, 827, 918], "skew": [425, 547, 828, 918], "527525": [426, 547, 829, 918], "digit": [429, 475, 547, 832, 856, 883, 918], "searchsortedsid": [431, 547, 834, 918], "maintain": [431, 487, 547, 604, 605, 639, 834, 903, 918], "leftmost": [431, 547, 834, 918], "rightmost": [431, 547, 834, 918], "six": [431, 547], "extrema": [435, 547, 842, 918], "112": [435, 547], "129": [435, 547], "i8": [435, 547, 712, 821, 905, 918], "8589934592": [435, 547], "1073741824": [435, 547], "content": [436, 490, 547, 844, 918], "175201": [439, 547, 847, 918], "about": [440, 547, 848, 918], "unimod": [440, 547, 848, 918], "skewtest": [440, 547, 848, 918], "speak": [440, 547, 848, 918], "g_1": [440, 547, 848, 918], "m_3": [440, 547, 848, 918], "m_2": [440, 547, 848, 918], "m_i": [440, 547, 848, 918], "sum_": [440, 547, 848, 918], "texttt": [440, 547, 848, 918], "k_3": [440, 547, 848, 918], "k_2": [440, 547, 848, 918], "sqrt": [440, 547, 848, 918], "343622": [440, 547], "value1": [443, 547], "value2": [443, 547], "414214": [444, 547, 851, 918], "ends_with": [447, 470, 878], "crab": [447, 855], "dog": [447, 473, 474, 502, 855], "rab": [447, 855], "success": [448, 454, 856, 862], "overlap": [448, 454, 856, 862], "captur": [448, 453, 454, 856, 861, 862], "123": [448, 454, 463, 856, 862, 871, 897, 918], "bla": [448, 454, 856, 862], "asd": [448, 454, 856, 862], "678": [448, 454, 856, 862], "910t": [448, 454, 856, 862], "r": [448, 452, 453, 454, 462, 547, 856, 860, 861, 862, 870], "count_digit": 448, "666f6f": [450, 858], "626172": [450, 858], "mango": [451, 470, 859, 878], "go": [451, 859], "has_suffix": 451, "group_index": [453, 861], "vote": [453, 861], "ballon_dor": [453, 861], "candid": [453, 861], "messi": [453, 861], "ref": [453, 861], "candidat": [453, 861], "jorginho": [453, 861], "ronaldo": [453, 861], "extracted_nr": 454, "910": [454, 862], "json_path_match": [455, 863], "jsonpath": [455, 456, 863, 864], "json_path": [456, 864], "regardless": [456, 864], "json_val": [456, 864], "n_char": [457, 865], "caf\u00e9": [457, 460, 865, 868], "345": [457, 460, 865, 868], "\u6771\u4eac": [457, 460, 865, 868], "nchar": [457, 460], "fillchar": [458, 464, 866, 872], "justifi": [458, 464, 866, 872], "pad": [458, 464, 475, 866, 872, 883], "cow": [458, 464, 866, 872], "monkei": [458, 464, 866, 872], "hippopotamu": [458, 464, 866, 872], "strip": [459, 465, 867, 873], "whitespac": [459, 465, 471, 867, 873, 879], "tworld": [459, 471, 867, 879], "wod": [459, 465, 867, 873], "rld": [459, 867], "text": [460, 462, 463, 868], "radix": [461, 869], "parseerror": [461, 869], "becom": [461, 869], "defult": [461, 869], "silent": [461, 869], "110": [461, 869], "010": [461, 869], "fa1e": [461, 869], "ff00": [461, 869], "cafe": [461, 869], "64030": [461, 869], "65280": [461, 869], "51966": [461, 869], "replace_al": [462, 870], "123abc": [462, 870], "abc456": [462, 870], "abcabc": [463, 871], "123a123": [463, 871], "bc": [463, 536, 871], "trail": [465, 471, 873, 879], "worl": [465, 471, 873, 879], "subslic": [466, 874], "pear": [466, 874], "papaya": [466, 874], "dragonfruit": [466, 874], "s_slice": 466, "ear": [466, 874], "aya": [466, 874], "uit": [466, 874], "ya": [466, 874], "onf": [466, 874], "a_1": [468, 876, 896, 918], "d_4": [468, 876], "rename_field": [468, 469, 876, 877], "first_part": [468, 469, 876, 877], "second_part": [468, 469, 876, 877], "remaind": [469, 877], "app": [470, 878], "has_prefix": 470, "polarstemporaltyp": [472, 880], "tz_awar": [472, 880], "strftime": [472, 880], "anywher": [472, 880], "3f": 472, "00z": [472, 880], "sun": [472, 880], "jul": [472, 880], "34": [472, 880], "lowercas": [473, 881], "variant": [473, 474], "uppercas": [474, 882], "100000": 475, "0010": 475, "0001": 475, "00000": 475, "00001": 475, "cd": [476, 477], "struct_col": [476, 477], "www": 477, "xxx": 477, "yyi": 477, "zzz": 477, "obvious": 477, "referenc": 477, "structfieldnotfounderror": [477, 556], "56": [483, 547], "761594": [484, 547, 893, 918], "replic": [485, 547, 901, 918], "vals_phys": [485, 547], "largest": [486, 547, 902, 918], "smallest": [486, 547, 902, 918], "bottom_k": [486, 547], "value_count": [488, 547, 918], "9223372036854775807": [489, 547], "multithread": [490, 547], "columnwis": [493, 494], "AND": 493, "bitwis": [493, 494], "returns_scalar": 495, "product_a": 495, "49": 495, "Be": 496, "more_nam": 500, "hamburg": 500, "lag": 501, "mimic": 501, "a_lag_": 501, "a_rol": 501, "plai": 502, "swim": 502, "walk": 502, "full_sent": 502, "correlationmethod": 503, "propagate_nan": [503, 533], "spearman": [503, 533], "larger": [503, 533, 604, 605, 639], "544705": [503, 528], "covari": 505, "acc": [506, 507, 515, 530], "include_init": 506, "accumul": [506, 507, 515, 530], "fn": [506, 507, 515, 530], "new_valu": [506, 507, 515, 530], "simpli": [506, 515], "cumreduc": 506, "cumfold": 508, "999999": 510, "add_week": 511, "add_dai": 511, "add_second": 511, "add_millisecond": 511, "add_hour": 511, "add_millisec": 511, "ond": 511, "eval": 512, "mathemat": 512, "a_b_doubl": 512, "fstring": 516, "placehold": 516, "hello_": 516, "_world": 516, "foo_": 516, "_bar_": 516, "foo_a_bar_1": 516, "foo_b_bar_2": 516, "foo_c_bar_3": 516, "epoch": [517, 742], "timestep": 517, "1666683077": 517, "1666683099": 517, "39": 517, "12345": [517, 696, 766, 832, 918], "12346": 517, "agg_group": [518, 547], "allow_object": 521, "valueexcept": 521, "test_func": 522, "selector": [523, 526, 536], "favor": [528, 533], "605551": 534, "605551275463989": 534, "my_struct": 535, "q": 535, "isn": 539, "thens": 539, "chain": 539, "sometim": 546, "arcco": [547, 918], "arccosh": [547, 918], "arcsin": [547, 918], "arcsinh": [547, 918], "arctan": [547, 918], "arctanh": [547, 918], "arg_max": [547, 918], "arg_min": [547, 918], "arg_uniqu": [547, 918], "argsort": [547, 918], "backward_fil": 547, "clip_max": [547, 918], "clip_min": [547, 918], "co": [547, 918], "cosh": [547, 918], "cumcount": 547, "cummax": [547, 918], "cummin": [547, 918], "cumprod": [547, 918], "cumulative_ev": [547, 918], "entropi": [547, 918], "ewm_mean": [547, 918], "ewm_std": [547, 918], "ewm_var": [547, 918], "extend_const": [547, 918], "flatten": 547, "inspect": [547, 639], "is_between": [547, 918], "is_finit": [547, 918], "is_first": [547, 918], "is_in": [547, 918], "is_infinit": [547, 918], "is_nan": [547, 918], "is_not_nan": [547, 918], "is_not_nul": [547, 918], "kurtosi": [547, 918], "log10": [547, 918], "map_alia": 547, "map_dict": [547, 918], "nan_max": [547, 918], "nan_min": [547, 918], "pct_chang": [547, 918], "extract_numb": 547, "pow": 547, "reinterpret": [547, 918], "repeat_bi": 547, "rolling_appli": [547, 918], "rolling_median": [547, 918], "rolling_quantil": [547, 918], "rolling_skew": [547, 918], "rolling_std": [547, 918], "rolling_var": [547, 918], "search_sort": [547, 918], "set_sort": [547, 918], "shrink_dtyp": [547, 918], "sin": [547, 918], "sinh": [547, 918], "sort_bi": 547, "tan": [547, 918], "tanh": [547, 918], "to_phys": [547, 918], "top_k": [547, 918], "unique_count": [547, 918], "expos": 556, "registr": 556, "miscellan": 556, "arrowerror": 556, "columnnotfounderror": 556, "invalidoperationerror": 556, "nodataerror": 556, "panicexcept": 556, "schemaerror": 556, "schemafieldnotfounderror": 556, "shapeerror": 556, "build_info": 556, "get_index_typ": 556, "show_vers": 556, "threadpool_s": 556, "sqlcontext": [556, 924], "hit": [559, 639], "node": [559, 579, 586, 590, 594, 597, 639], "huge": [562, 639], "saver": [562, 639], "purpos": [569, 639], "influenc": [569, 586, 639], "read_json": [574, 620, 639], "lazygroupbi": [575, 576, 577, 639], "other_lf": [581, 639], "validate_output_schema": [586, 639], "streamabl": [586, 590, 639], "past": [586, 639], "paramount": [586, 639], "hard": [586, 639], "bug": [586, 623, 639], "elig": [586, 639], "ot": [586, 639], "exectut": [586, 639], "invari": [586, 639], "upheld": [586, 639], "prune": [586, 639], "show_plot": [594, 639], "truncate_nod": [594, 639], "figsiz": [594, 603, 639], "gantt": [594, 639], "plot": [594, 603, 639], "groupby_partit": [594, 639], "470": [594, 639], "475": [594, 639], "1964": [594, 639], "from_json": [596, 639], "swap": [597, 639], "output_path": [603, 639], "raw_output": [603, 639], "figur": [603, 639], "persist": [604, 605, 639], "ram": [604, 605, 639], "slightli": [604, 605, 639], "my_larger_than_ram_fil": [604, 605, 639], "data_pagesize_limit": [605, 639], "290994": [608, 639], "118034": [608, 639], "433013": [608, 639], "1875": [615, 639], "polarsexprtyp": [617, 639], "extern": [618, 639], "lf_other": [618, 639], "afoo": [618, 639], "cfoo": [618, 639], "train_lf": [618, 639], "feature_0": [618, 639], "feature_1": [618, 639], "test_lf": [618, 639], "_train": [618, 639], "feature_0_train": [618, 639], "dataframescan": [620, 639], "output_schema": [620, 639], "initialis": 639, "lf2": 639, "lf3": 639, "lf4": 639, "lf5": 639, "lf6": 639, "explain": 639, "profil": 639, "sink_ipc": 639, "sink_parquet": 639, "with_context": 639, "sr": [644, 918], "new_aliased_sr": [644, 918], "append_chunk": [647, 918], "super": [647, 918], "141593": [649, 918], "292432": [650, 918], "549306": [654, 918], "listnamespac": [661, 760, 820, 918], "catnamespac": 694, "56789": [696, 766, 832, 918], "901234": [696, 766, 832, 918], "pi": [703, 846, 892, 918], "1232e": [703, 918], "quick": [711, 918], "series_num": [711, 918], "581139": [711, 918], "series_str": [711, 918], "datetimenamespac": 716, "500m": [729, 731, 737, 744], "500000": 729, "2m": 734, "500000000": 737, "date_minus_1y_2mon": 739, "1583020800": 742, "1585699200": 742, "1588291200": 742, "nyc": 742, "edt": 742, "1583038800": 742, "1585717200": 742, "1588309200": 742, "165": [743, 748], "series_equ": [743, 748, 918], "timestamp_u": 747, "978307200000000000": 747, "978393600000000000": 747, "978480000000000000": 747, "005": [754, 918], "06293300616044681": [754, 918], "65": [754, 918], "8568409950394724": [754, 918], "4000000": [755, 918], "814697265625": [755, 918], "stringnamespac": [760, 853, 918], "bitmask": [768, 918], "swiftli": [768, 918], "10734580197236529959": [769, 918], "3022416320763508302": [769, 918], "13756996518000038261": [769, 918], "fall": [773, 918], "2147483648": [797, 918], "iso3166": [798, 918], "tur": [798, 918], "jpn": [798, 918], "nld": [798, 918], "country_lookup": [798, 918], "japan": [798, 918], "t\u00fcrkiy": [798, 918], "netherland": [798, 918], "unrecognis": [798, 918], "unspecifi": [798, 918], "country_nam": [798, 918], "166667": [811, 918], "142857": [811, 918], "512": [811, 918], "peak": [812, 813, 918], "nanstd": [822, 918], "858612": [822, 918], "200": [823, 824, 826, 918], "150": [824, 918], "250": [824, 918], "350": [824, 918], "450": [824, 918], "381802": [828, 918], "dev": [829, 918], "57": [832, 918], "frequent": [836, 837, 918], "mutat": [837, 918], "2246e": [846, 892, 918], "divisor": [852, 907, 918], "6331e16": [892, 918], "lib": [895, 918], "int64arrai": [895, 918], "a_2": [896, 918], "a_3": [896, 918], "zero_copy_onli": [899, 918], "writabl": [899, 918], "complet": [899, 918], "view": [899, 918], "presenc": [899, 918], "immut": [899, 918], "127": [905, 918], "seriesview": [908, 918], "arraylik": 918, "dtype_if_empti": 918, "position": 918, "scenario": 918, "through": 918, "chunk_length": 918, "cut": 918, "eq": 918, "ge": 918, "get_chunk": 918, "gt": 918, "has_valid": 918, "is_boolean": 918, "is_float": 918, "is_numer": 918, "is_sort": 918, "is_tempor": 918, "is_utf8": 918, "le": 918, "ne": 918, "new_from_index": 918, "peak_max": 918, "peak_min": 918, "set_at_idx": 918}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [33, 0, 1, "", "DataType"], [34, 0, 1, "", "Date"], [35, 0, 1, "", "Datetime"], [36, 0, 1, "", "Decimal"], [37, 0, 1, "", "Duration"], [38, 0, 1, "", "Float32"], [39, 0, 1, "", "Float64"], [40, 0, 1, "", "Int16"], [41, 0, 1, "", "Int32"], [42, 0, 1, "", "Int64"], [43, 0, 1, "", "Int8"], [44, 0, 1, "", "List"], [45, 0, 1, "", "Null"], [46, 0, 1, "", "Object"], [924, 0, 1, "", "SQLContext"], [50, 0, 1, "", "StringCache"], [51, 0, 1, "", "Struct"], [52, 0, 1, "", "Time"], [53, 0, 1, "", "UInt16"], [54, 0, 1, "", "UInt32"], [55, 0, 1, "", "UInt64"], [56, 0, 1, "", "UInt8"], [57, 0, 1, "", "Unknown"], [58, 0, 1, "", "Utf8"], [59, 4, 1, "", "align_frames"], [493, 4, 1, "", "all"], [494, 4, 1, "", "any"], [495, 4, 1, "", "apply"], [496, 4, 1, "", "arange"], [497, 4, 1, "", "arg_sort_by"], [64, 4, 1, "", "arg_where"], [498, 4, 1, "", "avg"], [65, 4, 1, "", "build_info"], [499, 4, 1, "", "coalesce"], [500, 4, 1, "", "col"], [66, 4, 1, "", "collect_all"], [67, 4, 1, "", "concat"], [501, 4, 1, "", "concat_list"], [502, 4, 1, "", "concat_str"], [503, 4, 1, "", "corr"], [504, 4, 1, "", "count"], [505, 4, 1, "", "cov"], [506, 4, 1, "", "cumfold"], [507, 4, 1, "", "cumreduce"], [508, 4, 1, "", "cumsum"], [68, 4, 1, "", "cut"], [509, 4, 1, "", "date"], [69, 4, 1, "", "date_range"], [510, 4, 1, "", "datetime"], [511, 4, 1, "", "duration"], [512, 4, 1, "", "element"], [513, 4, 1, "", "exclude"], [514, 4, 1, "", "first"], [515, 4, 1, "", "fold"], [516, 4, 1, "", "format"], [84, 4, 1, "", "from_arrow"], [85, 4, 1, "", "from_dataframe"], [86, 4, 1, "", "from_dict"], [87, 4, 1, "", "from_dicts"], [517, 4, 1, "", "from_epoch"], [88, 4, 1, "", "from_numpy"], [89, 4, 1, "", "from_pandas"], [90, 4, 1, "", "from_records"], [91, 4, 1, "", "get_dummies"], [92, 4, 1, "", "get_index_type"], [518, 4, 1, "", "groups"], [519, 4, 1, "", "head"], [520, 4, 1, "", "list"], [521, 4, 1, "", "lit"], [522, 4, 1, "", "map"], [523, 4, 1, "", "max"], [524, 4, 1, "", "mean"], [525, 4, 1, "", "median"], [526, 4, 1, "", "min"], [527, 4, 1, "", "n_unique"], [94, 4, 1, "", "ones"], [528, 4, 1, "", "pearson_corr"], [529, 4, 1, "", "quantile"], [95, 4, 1, "", "read_avro"], [96, 4, 1, "", "read_csv"], [97, 4, 1, "", "read_csv_batched"], [98, 4, 1, "", "read_database"], [99, 4, 1, "", "read_delta"], [100, 4, 1, "", "read_excel"], [101, 4, 1, "", "read_ipc"], [102, 4, 1, "", "read_ipc_schema"], [103, 4, 1, "", "read_json"], [104, 4, 1, "", "read_ndjson"], [105, 4, 1, "", "read_parquet"], [106, 4, 1, "", "read_parquet_schema"], [530, 4, 1, "", "reduce"], [531, 4, 1, "", "repeat"], [107, 4, 1, "", "scan_csv"], [108, 4, 1, "", "scan_delta"], [109, 4, 1, "", "scan_ipc"], [110, 4, 1, "", "scan_ndjson"], [111, 4, 1, "", "scan_parquet"], [112, 4, 1, "", "scan_pyarrow_dataset"], [532, 4, 1, "", "select"], [113, 4, 1, "", "show_versions"], [533, 4, 1, "", "spearman_rank_corr"], [534, 4, 1, "", "std"], [535, 4, 1, "", "struct"], [536, 4, 1, "", "sum"], [537, 4, 1, "", "tail"], [120, 4, 1, "", "threadpool_size"], [121, 4, 1, "", "toggle_string_cache"], [538, 4, 1, "", "var"], [539, 4, 1, "", "when"], [122, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "activate_decimals"], [6, 1, 1, "", "load"], [7, 1, 1, "", "restore_defaults"], [8, 1, 1, "", "save"], [9, 1, 1, "", "set_ascii_tables"], [10, 1, 1, "", "set_fmt_float"], [11, 1, 1, "", "set_fmt_str_lengths"], [12, 1, 1, "", "set_tbl_cell_alignment"], [13, 1, 1, "", "set_tbl_cols"], [14, 1, 1, "", "set_tbl_column_data_type_inline"], [15, 1, 1, "", "set_tbl_dataframe_shape_below"], [16, 1, 1, "", "set_tbl_formatting"], [17, 1, 1, "", "set_tbl_hide_column_data_types"], [18, 1, 1, "", "set_tbl_hide_column_names"], [19, 1, 1, "", "set_tbl_hide_dataframe_shape"], [20, 1, 1, "", "set_tbl_hide_dtype_separator"], [21, 1, 1, "", "set_tbl_rows"], [22, 1, 1, "", "set_tbl_width_chars"], [23, 1, 1, "", "set_verbose"], [24, 1, 1, "", "state"]], "polars.DataFrame": [[125, 1, 1, "", "__dataframe__"], [126, 1, 1, "", "apply"], [127, 1, 1, "", "clear"], [128, 1, 1, "", "clone"], [129, 2, 1, "", "columns"], [130, 1, 1, "", "corr"], [131, 1, 1, "", "describe"], [132, 1, 1, "", "drop"], [133, 1, 1, "", "drop_in_place"], [134, 1, 1, "", "drop_nulls"], [135, 2, 1, "", "dtypes"], [136, 1, 1, "", "estimated_size"], [137, 1, 1, "", "explode"], [138, 1, 1, "", "extend"], [139, 1, 1, "", "fill_nan"], [140, 1, 1, "", "fill_null"], [141, 1, 1, "", "filter"], [142, 1, 1, "", "find_idx_by_name"], [143, 1, 1, "", "fold"], [144, 1, 1, "", "frame_equal"], [145, 1, 1, "", "get_column"], [146, 1, 1, "", "get_columns"], [147, 1, 1, "", "glimpse"], [148, 1, 1, "", "groupby"], [149, 1, 1, "", "groupby_dynamic"], [150, 1, 1, "", "groupby_rolling"], [151, 1, 1, "", "hash_rows"], [152, 1, 1, "", "head"], [153, 2, 1, "", "height"], [154, 1, 1, "", "hstack"], [155, 1, 1, "", "insert_at_idx"], [156, 1, 1, "", "interpolate"], [157, 1, 1, "", "is_duplicated"], [158, 1, 1, "", "is_empty"], [159, 1, 1, "", "is_unique"], [160, 1, 1, "", "item"], [161, 1, 1, "", "iter_rows"], [162, 1, 1, "", "iter_slices"], [163, 1, 1, "", "join"], [164, 1, 1, "", "join_asof"], [165, 1, 1, "", "lazy"], [166, 1, 1, "", "limit"], [167, 1, 1, "", "max"], [168, 1, 1, "", "mean"], [169, 1, 1, "", "median"], [170, 1, 1, "", "melt"], [171, 1, 1, "", "merge_sorted"], [172, 1, 1, "", "min"], [173, 1, 1, "", "n_chunks"], [174, 1, 1, "", "n_unique"], [175, 1, 1, "", "null_count"], [176, 1, 1, "", "partition_by"], [177, 1, 1, "", "pipe"], [178, 1, 1, "", "pivot"], [179, 1, 1, "", "product"], [180, 1, 1, "", "quantile"], [181, 1, 1, "", "rechunk"], [182, 1, 1, "", "rename"], [183, 1, 1, "", "replace"], [184, 1, 1, "", "replace_at_idx"], [185, 1, 1, "", "reverse"], [186, 1, 1, "", "row"], [187, 1, 1, "", "rows"], [188, 1, 1, "", "sample"], [189, 2, 1, "", "schema"], [190, 1, 1, "", "select"], [191, 2, 1, "", "shape"], [192, 1, 1, "", "shift"], [193, 1, 1, "", "shift_and_fill"], [194, 1, 1, "", "shrink_to_fit"], [195, 1, 1, "", "slice"], [196, 1, 1, "", "sort"], [197, 1, 1, "", "std"], [198, 1, 1, "", "sum"], [199, 1, 1, "", "tail"], [200, 1, 1, "", "take_every"], [201, 1, 1, "", "to_arrow"], [202, 1, 1, "", "to_dict"], [203, 1, 1, "", "to_dicts"], [204, 1, 1, "", "to_dummies"], [205, 1, 1, "", "to_numpy"], [206, 1, 1, "", "to_pandas"], [207, 1, 1, "", "to_series"], [208, 1, 1, "", "to_struct"], [209, 1, 1, "", "transpose"], [210, 1, 1, "", "unique"], [211, 1, 1, "", "unnest"], [212, 1, 1, "", "unstack"], [213, 1, 1, "", "update"], [214, 1, 1, "", "upsample"], [215, 1, 1, "", "var"], [216, 1, 1, "", "vstack"], [217, 2, 1, "", "width"], [218, 1, 1, "", "with_columns"], [219, 1, 1, "", "with_row_count"], [25, 1, 1, "", "write_avro"], [26, 1, 1, "", "write_csv"], [27, 1, 1, "", "write_database"], [28, 1, 1, "", "write_excel"], [29, 1, 1, "", "write_ipc"], [30, 1, 1, "", "write_json"], [31, 1, 1, "", "write_ndjson"], [32, 1, 1, "", "write_parquet"]], "polars.DataType": [[33, 1, 1, "", "__init__"]], "polars.Date": [[34, 1, 1, "", "__init__"]], "polars.Datetime": [[35, 1, 1, "", "__init__"]], "polars.Decimal": [[36, 1, 1, "", "__init__"]], "polars.Duration": [[37, 1, 1, "", "__init__"]], "polars.Expr": [[247, 1, 1, "", "abs"], [248, 1, 1, "", "agg_groups"], [249, 1, 1, "", "alias"], [250, 1, 1, "", "all"], [251, 1, 1, "", "any"], [252, 1, 1, "", "append"], [253, 1, 1, "", "apply"], [254, 1, 1, "", "arccos"], [255, 1, 1, "", "arccosh"], [256, 1, 1, "", "arcsin"], [257, 1, 1, "", "arcsinh"], [258, 1, 1, "", "arctan"], [259, 1, 1, "", "arctanh"], [260, 1, 1, "", "arg_max"], [261, 1, 1, "", "arg_min"], [262, 1, 1, "", "arg_sort"], [263, 1, 1, "", "arg_true"], [264, 1, 1, "", "arg_unique"], [265, 1, 1, "", "argsort"], [292, 1, 1, "", "backward_fill"], [298, 1, 1, "", "cast"], [300, 1, 1, "", "ceil"], [301, 1, 1, "", "clip"], [302, 1, 1, "", "clip_max"], [303, 1, 1, "", "clip_min"], [304, 1, 1, "", "cos"], [305, 1, 1, "", "cosh"], [306, 1, 1, "", "count"], [307, 1, 1, "", "cumcount"], [308, 1, 1, "", "cummax"], [309, 1, 1, "", "cummin"], [310, 1, 1, "", "cumprod"], [311, 1, 1, "", "cumsum"], [312, 1, 1, "", "cumulative_eval"], [313, 1, 1, "", "diff"], [314, 1, 1, "", "dot"], [315, 1, 1, "", "drop_nans"], [316, 1, 1, "", "drop_nulls"], [349, 1, 1, "", "entropy"], [350, 1, 1, "", "ewm_mean"], [351, 1, 1, "", "ewm_std"], [352, 1, 1, "", "ewm_var"], [353, 1, 1, "", "exclude"], [354, 1, 1, "", "exp"], [355, 1, 1, "", "explode"], [356, 1, 1, "", "extend_constant"], [357, 1, 1, "", "fill_nan"], [358, 1, 1, "", "fill_null"], [359, 1, 1, "", "filter"], [360, 1, 1, "", "first"], [361, 1, 1, "", "flatten"], [362, 1, 1, "", "floor"], [363, 1, 1, "", "forward_fill"], [364, 1, 1, "", "hash"], [365, 1, 1, "", "head"], [366, 1, 1, "", "inspect"], [367, 1, 1, "", "interpolate"], [368, 1, 1, "", "is_between"], [369, 1, 1, "", "is_duplicated"], [370, 1, 1, "", "is_finite"], [371, 1, 1, "", "is_first"], [372, 1, 1, "", "is_in"], [373, 1, 1, "", "is_infinite"], [374, 1, 1, "", "is_nan"], [375, 1, 1, "", "is_not"], [376, 1, 1, "", "is_not_nan"], [377, 1, 1, "", "is_not_null"], [378, 1, 1, "", "is_null"], [379, 1, 1, "", "is_unique"], [380, 1, 1, "", "keep_name"], [381, 1, 1, "", "kurtosis"], [382, 1, 1, "", "last"], [383, 1, 1, "", "len"], [384, 1, 1, "", "limit"], [385, 1, 1, "", "list"], [386, 1, 1, "", "log"], [387, 1, 1, "", "log10"], [388, 1, 1, "", "lower_bound"], [389, 1, 1, "", "map"], [390, 1, 1, "", "map_alias"], [391, 1, 1, "", "map_dict"], [392, 1, 1, "", "max"], [393, 1, 1, "", "mean"], [394, 1, 1, "", "median"], [401, 1, 1, "", "min"], [402, 1, 1, "", "mode"], [403, 1, 1, "", "n_unique"], [404, 1, 1, "", "nan_max"], [405, 1, 1, "", "nan_min"], [406, 1, 1, "", "null_count"], [407, 1, 1, "", "over"], [408, 1, 1, "", "pct_change"], [409, 1, 1, "", "pow"], [410, 1, 1, "", "prefix"], [411, 1, 1, "", "product"], [412, 1, 1, "", "quantile"], [413, 1, 1, "", "rank"], [414, 1, 1, "", "rechunk"], [415, 1, 1, "", "reinterpret"], [416, 1, 1, "", "repeat_by"], [417, 1, 1, "", "reshape"], [418, 1, 1, "", "reverse"], [419, 1, 1, "", "rolling_apply"], [420, 1, 1, "", "rolling_max"], [421, 1, 1, "", "rolling_mean"], [422, 1, 1, "", "rolling_median"], [423, 1, 1, "", "rolling_min"], [424, 1, 1, "", "rolling_quantile"], [425, 1, 1, "", "rolling_skew"], [426, 1, 1, "", "rolling_std"], [427, 1, 1, "", "rolling_sum"], [428, 1, 1, "", "rolling_var"], [429, 1, 1, "", "round"], [430, 1, 1, "", "sample"], [431, 1, 1, "", "search_sorted"], [432, 1, 1, "", "set_sorted"], [433, 1, 1, "", "shift"], [434, 1, 1, "", "shift_and_fill"], [435, 1, 1, "", "shrink_dtype"], [436, 1, 1, "", "shuffle"], [437, 1, 1, "", "sign"], [438, 1, 1, "", "sin"], [439, 1, 1, "", "sinh"], [440, 1, 1, "", "skew"], [441, 1, 1, "", "slice"], [442, 1, 1, "", "sort"], [443, 1, 1, "", "sort_by"], [444, 1, 1, "", "sqrt"], [445, 1, 1, "", "std"], [478, 1, 1, "", "suffix"], [479, 1, 1, "", "sum"], [480, 1, 1, "", "tail"], [481, 1, 1, "", "take"], [482, 1, 1, "", "take_every"], [483, 1, 1, "", "tan"], [484, 1, 1, "", "tanh"], [485, 1, 1, "", "to_physical"], [486, 1, 1, "", "top_k"], [487, 1, 1, "", "unique"], [488, 1, 1, "", "unique_counts"], [489, 1, 1, "", "upper_bound"], [490, 1, 1, "", "value_counts"], [491, 1, 1, "", "var"], [492, 1, 1, "", "where"]], "polars.Expr.arr": [[266, 1, 1, "", "arg_max"], [267, 1, 1, "", "arg_min"], [268, 1, 1, "", "concat"], [269, 1, 1, "", "contains"], [270, 1, 1, "", "count_match"], [271, 1, 1, "", "diff"], [272, 1, 1, "", "eval"], [273, 1, 1, "", "explode"], [274, 1, 1, "", "first"], [275, 1, 1, "", "get"], [276, 1, 1, "", "head"], [277, 1, 1, "", "join"], [278, 1, 1, "", "last"], [279, 1, 1, "", "lengths"], [280, 1, 1, "", "max"], [281, 1, 1, "", "mean"], [282, 1, 1, "", "min"], [283, 1, 1, "", "reverse"], [284, 1, 1, "", "shift"], [285, 1, 1, "", "slice"], [286, 1, 1, "", "sort"], [287, 1, 1, "", "sum"], [288, 1, 1, "", "tail"], [289, 1, 1, "", "take"], [290, 1, 1, "", "to_struct"], [291, 1, 1, "", "unique"]], "polars.Expr.bin": [[293, 1, 1, "", "contains"], [294, 1, 1, "", "decode"], [295, 1, 1, "", "encode"], [296, 1, 1, "", "ends_with"], [297, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[299, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[317, 1, 1, "", "cast_time_unit"], [318, 1, 1, "", "combine"], [319, 1, 1, "", "convert_time_zone"], [320, 1, 1, "", "day"], [321, 1, 1, "", "days"], [322, 1, 1, "", "epoch"], [323, 1, 1, "", "hour"], [324, 1, 1, "", "hours"], [325, 1, 1, "", "iso_year"], [326, 1, 1, "", "microsecond"], [327, 1, 1, "", "microseconds"], [328, 1, 1, "", "millisecond"], [329, 1, 1, "", "milliseconds"], [330, 1, 1, "", "minute"], [331, 1, 1, "", "minutes"], [332, 1, 1, "", "month"], [333, 1, 1, "", "nanosecond"], [334, 1, 1, "", "nanoseconds"], [335, 1, 1, "", "offset_by"], [336, 1, 1, "", "ordinal_day"], [337, 1, 1, "", "quarter"], [338, 1, 1, "", "replace_time_zone"], [339, 1, 1, "", "round"], [340, 1, 1, "", "second"], [341, 1, 1, "", "seconds"], [342, 1, 1, "", "strftime"], [343, 1, 1, "", "timestamp"], [344, 1, 1, "", "truncate"], [345, 1, 1, "", "week"], [346, 1, 1, "", "weekday"], [347, 1, 1, "", "with_time_unit"], [348, 1, 1, "", "year"]], "polars.Expr.meta": [[395, 1, 1, "", "has_multiple_outputs"], [396, 1, 1, "", "is_regex_projection"], [397, 1, 1, "", "output_name"], [398, 1, 1, "", "pop"], [399, 1, 1, "", "root_names"], [400, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[446, 1, 1, "", "concat"], [447, 1, 1, "", "contains"], [448, 1, 1, "", "count_match"], [449, 1, 1, "", "decode"], [450, 1, 1, "", "encode"], [451, 1, 1, "", "ends_with"], [452, 1, 1, "", "explode"], [453, 1, 1, "", "extract"], [454, 1, 1, "", "extract_all"], [455, 1, 1, "", "json_extract"], [456, 1, 1, "", "json_path_match"], [457, 1, 1, "", "lengths"], [458, 1, 1, "", "ljust"], [459, 1, 1, "", "lstrip"], [460, 1, 1, "", "n_chars"], [461, 1, 1, "", "parse_int"], [462, 1, 1, "", "replace"], [463, 1, 1, "", "replace_all"], [464, 1, 1, "", "rjust"], [465, 1, 1, "", "rstrip"], [466, 1, 1, "", "slice"], [467, 1, 1, "", "split"], [468, 1, 1, "", "split_exact"], [469, 1, 1, "", "splitn"], [470, 1, 1, "", "starts_with"], [471, 1, 1, "", "strip"], [472, 1, 1, "", "strptime"], [473, 1, 1, "", "to_lowercase"], [474, 1, 1, "", "to_uppercase"], [475, 1, 1, "", "zfill"]], "polars.Expr.struct": [[476, 1, 1, "", "field"], [477, 1, 1, "", "rename_fields"]], "polars.Float32": [[38, 1, 1, "", "__init__"]], "polars.Float64": [[39, 1, 1, "", "__init__"]], "polars.Int16": [[40, 1, 1, "", "__init__"]], "polars.Int32": [[41, 1, 1, "", "__init__"]], "polars.Int64": [[42, 1, 1, "", "__init__"]], "polars.Int8": [[43, 1, 1, "", "__init__"]], "polars.LazyFrame": [[559, 1, 1, "", "cache"], [560, 1, 1, "", "clear"], [561, 1, 1, "", "clone"], [562, 1, 1, "", "collect"], [563, 2, 1, "", "columns"], [564, 1, 1, "", "drop"], [565, 1, 1, "", "drop_nulls"], [566, 2, 1, "", "dtypes"], [567, 1, 1, "", "explain"], [568, 1, 1, "", "explode"], [569, 1, 1, "", "fetch"], [570, 1, 1, "", "fill_nan"], [571, 1, 1, "", "fill_null"], [572, 1, 1, "", "filter"], [573, 1, 1, "", "first"], [574, 1, 1, "", "from_json"], [575, 1, 1, "", "groupby"], [576, 1, 1, "", "groupby_dynamic"], [577, 1, 1, "", "groupby_rolling"], [578, 1, 1, "", "head"], [579, 1, 1, "", "inspect"], [580, 1, 1, "", "interpolate"], [581, 1, 1, "", "join"], [582, 1, 1, "", "join_asof"], [583, 1, 1, "", "last"], [584, 1, 1, "", "lazy"], [585, 1, 1, "", "limit"], [586, 1, 1, "", "map"], [587, 1, 1, "", "max"], [588, 1, 1, "", "mean"], [589, 1, 1, "", "median"], [590, 1, 1, "", "melt"], [591, 1, 1, "", "merge_sorted"], [592, 1, 1, "", "min"], [593, 1, 1, "", "pipe"], [594, 1, 1, "", "profile"], [595, 1, 1, "", "quantile"], [596, 1, 1, "", "read_json"], [597, 1, 1, "", "rename"], [598, 1, 1, "", "reverse"], [599, 2, 1, "", "schema"], [600, 1, 1, "", "select"], [601, 1, 1, "", "shift"], [602, 1, 1, "", "shift_and_fill"], [603, 1, 1, "", "show_graph"], [604, 1, 1, "", "sink_ipc"], [605, 1, 1, "", "sink_parquet"], [606, 1, 1, "", "slice"], [607, 1, 1, "", "sort"], [608, 1, 1, "", "std"], [609, 1, 1, "", "sum"], [610, 1, 1, "", "tail"], [611, 1, 1, "", "take_every"], [612, 1, 1, "", "unique"], [613, 1, 1, "", "unnest"], [614, 1, 1, "", "update"], [615, 1, 1, "", "var"], [616, 2, 1, "", "width"], [617, 1, 1, "", "with_columns"], [618, 1, 1, "", "with_context"], [619, 1, 1, "", "with_row_count"], [620, 1, 1, "", "write_json"]], "polars.List": [[44, 1, 1, "", "__init__"]], "polars.Null": [[45, 1, 1, "", "__init__"]], "polars.Object": [[46, 1, 1, "", "__init__"]], "polars.SQLContext": [[47, 1, 1, "", "execute"], [48, 1, 1, "", "query"], [49, 1, 1, "", "register"]], "polars.Series": [[643, 1, 1, "", "abs"], [644, 1, 1, "", "alias"], [645, 1, 1, "", "all"], [646, 1, 1, "", "any"], [647, 1, 1, "", "append"], [648, 1, 1, "", "apply"], [649, 1, 1, "", "arccos"], [650, 1, 1, "", "arccosh"], [651, 1, 1, "", "arcsin"], [652, 1, 1, "", "arcsinh"], [653, 1, 1, "", "arctan"], [654, 1, 1, "", "arctanh"], [655, 1, 1, "", "arg_max"], [656, 1, 1, "", "arg_min"], [657, 1, 1, "", "arg_sort"], [658, 1, 1, "", "arg_true"], [659, 1, 1, "", "arg_unique"], [660, 1, 1, "", "argsort"], [661, 3, 1, "", "arr"], [693, 1, 1, "", "cast"], [694, 3, 1, "", "cat"], [696, 1, 1, "", "ceil"], [697, 1, 1, "", "chunk_lengths"], [698, 1, 1, "", "clear"], [699, 1, 1, "", "clip"], [700, 1, 1, "", "clip_max"], [701, 1, 1, "", "clip_min"], [702, 1, 1, "", "clone"], [703, 1, 1, "", "cos"], [704, 1, 1, "", "cosh"], [705, 1, 1, "", "cummax"], [706, 1, 1, "", "cummin"], [707, 1, 1, "", "cumprod"], [708, 1, 1, "", "cumsum"], [709, 1, 1, "", "cumulative_eval"], [710, 1, 1, "", "cut"], [711, 1, 1, "", "describe"], [712, 1, 1, "", "diff"], [713, 1, 1, "", "dot"], [714, 1, 1, "", "drop_nans"], [715, 1, 1, "", "drop_nulls"], [716, 3, 1, "", "dt"], [753, 3, 1, "", "dtype"], [754, 1, 1, "", "entropy"], [755, 1, 1, "", "estimated_size"], [756, 1, 1, "", "ewm_mean"], [757, 1, 1, "", "ewm_std"], [758, 1, 1, "", "ewm_var"], [759, 1, 1, "", "exp"], [760, 1, 1, "", "explode"], [761, 1, 1, "", "extend_constant"], [762, 1, 1, "", "fill_nan"], [763, 1, 1, "", "fill_null"], [764, 1, 1, "", "filter"], [765, 3, 1, "", "flags"], [766, 1, 1, "", "floor"], [767, 1, 1, "", "get_chunks"], [768, 1, 1, "", "has_validity"], [769, 1, 1, "", "hash"], [770, 1, 1, "", "head"], [771, 3, 1, "", "inner_dtype"], [772, 1, 1, "", "interpolate"], [773, 1, 1, "", "is_between"], [774, 1, 1, "", "is_boolean"], [775, 1, 1, "", "is_duplicated"], [776, 1, 1, "", "is_empty"], [777, 1, 1, "", "is_finite"], [778, 1, 1, "", "is_first"], [779, 1, 1, "", "is_float"], [780, 1, 1, "", "is_in"], [781, 1, 1, "", "is_infinite"], [782, 1, 1, "", "is_nan"], [783, 1, 1, "", "is_not_nan"], [784, 1, 1, "", "is_not_null"], [785, 1, 1, "", "is_null"], [786, 1, 1, "", "is_numeric"], [787, 1, 1, "", "is_sorted"], [788, 1, 1, "", "is_temporal"], [789, 1, 1, "", "is_unique"], [790, 1, 1, "", "is_utf8"], [791, 1, 1, "", "item"], [792, 1, 1, "", "kurtosis"], [793, 1, 1, "", "len"], [794, 1, 1, "", "limit"], [795, 1, 1, "", "log"], [796, 1, 1, "", "log10"], [797, 1, 1, "", "lower_bound"], [798, 1, 1, "", "map_dict"], [799, 1, 1, "", "max"], [800, 1, 1, "", "mean"], [801, 1, 1, "", "median"], [802, 1, 1, "", "min"], [803, 1, 1, "", "mode"], [804, 1, 1, "", "n_chunks"], [805, 1, 1, "", "n_unique"], [806, 3, 1, "", "name"], [807, 1, 1, "", "nan_max"], [808, 1, 1, "", "nan_min"], [809, 1, 1, "", "new_from_index"], [810, 1, 1, "", "null_count"], [811, 1, 1, "", "pct_change"], [812, 1, 1, "", "peak_max"], [813, 1, 1, "", "peak_min"], [814, 1, 1, "", "product"], [815, 1, 1, "", "quantile"], [816, 1, 1, "", "rank"], [817, 1, 1, "", "rechunk"], [818, 1, 1, "", "reinterpret"], [819, 1, 1, "", "rename"], [820, 1, 1, "", "reshape"], [821, 1, 1, "", "reverse"], [822, 1, 1, "", "rolling_apply"], [823, 1, 1, "", "rolling_max"], [824, 1, 1, "", "rolling_mean"], [825, 1, 1, "", "rolling_median"], [826, 1, 1, "", "rolling_min"], [827, 1, 1, "", "rolling_quantile"], [828, 1, 1, "", "rolling_skew"], [829, 1, 1, "", "rolling_std"], [830, 1, 1, "", "rolling_sum"], [831, 1, 1, "", "rolling_var"], [832, 1, 1, "", "round"], [833, 1, 1, "", "sample"], [834, 1, 1, "", "search_sorted"], [835, 1, 1, "", "series_equal"], [836, 1, 1, "", "set"], [837, 1, 1, "", "set_at_idx"], [838, 1, 1, "", "set_sorted"], [839, 3, 1, "", "shape"], [840, 1, 1, "", "shift"], [841, 1, 1, "", "shift_and_fill"], [842, 1, 1, "", "shrink_dtype"], [843, 1, 1, "", "shrink_to_fit"], [844, 1, 1, "", "shuffle"], [845, 1, 1, "", "sign"], [846, 1, 1, "", "sin"], [847, 1, 1, "", "sinh"], [848, 1, 1, "", "skew"], [849, 1, 1, "", "slice"], [850, 1, 1, "", "sort"], [851, 1, 1, "", "sqrt"], [852, 1, 1, "", "std"], [853, 3, 1, "", "str"], [888, 1, 1, "", "sum"], [889, 1, 1, "", "tail"], [890, 1, 1, "", "take"], [891, 1, 1, "", "take_every"], [892, 1, 1, "", "tan"], [893, 1, 1, "", "tanh"], [894, 3, 1, "", "time_unit"], [895, 1, 1, "", "to_arrow"], [896, 1, 1, "", "to_dummies"], [897, 1, 1, "", "to_frame"], [898, 1, 1, "", "to_list"], [899, 1, 1, "", "to_numpy"], [900, 1, 1, "", "to_pandas"], [901, 1, 1, "", "to_physical"], [902, 1, 1, "", "top_k"], [903, 1, 1, "", "unique"], [904, 1, 1, "", "unique_counts"], [905, 1, 1, "", "upper_bound"], [906, 1, 1, "", "value_counts"], [907, 1, 1, "", "var"], [908, 1, 1, "", "view"], [909, 1, 1, "", "zip_with"]], "polars.Series.arr": [[662, 1, 1, "", "arg_max"], [663, 1, 1, "", "arg_min"], [664, 1, 1, "", "concat"], [665, 1, 1, "", "contains"], [666, 1, 1, "", "count_match"], [667, 1, 1, "", "diff"], [668, 1, 1, "", "eval"], [669, 1, 1, "", "explode"], [670, 1, 1, "", "first"], [671, 1, 1, "", "get"], [672, 1, 1, "", "head"], [673, 1, 1, "", "join"], [674, 1, 1, "", "last"], [675, 1, 1, "", "lengths"], [676, 1, 1, "", "max"], [677, 1, 1, "", "mean"], [678, 1, 1, "", "min"], [679, 1, 1, "", "reverse"], [680, 1, 1, "", "shift"], [681, 1, 1, "", "slice"], [682, 1, 1, "", "sort"], [683, 1, 1, "", "sum"], [684, 1, 1, "", "tail"], [685, 1, 1, "", "take"], [686, 1, 1, "", "to_struct"], [687, 1, 1, "", "unique"]], "polars.Series.bin": [[688, 1, 1, "", "contains"], [689, 1, 1, "", "decode"], [690, 1, 1, "", "encode"], [691, 1, 1, "", "ends_with"], [692, 1, 1, "", "starts_with"]], "polars.Series.cat": [[695, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[717, 1, 1, "", "cast_time_unit"], [718, 1, 1, "", "combine"], [719, 1, 1, "", "convert_time_zone"], [720, 1, 1, "", "day"], [721, 1, 1, "", "days"], [722, 1, 1, "", "epoch"], [723, 1, 1, "", "hour"], [724, 1, 1, "", "hours"], [725, 1, 1, "", "iso_year"], [726, 1, 1, "", "max"], [727, 1, 1, "", "mean"], [728, 1, 1, "", "median"], [729, 1, 1, "", "microsecond"], [730, 1, 1, "", "microseconds"], [731, 1, 1, "", "millisecond"], [732, 1, 1, "", "milliseconds"], [733, 1, 1, "", "min"], [734, 1, 1, "", "minute"], [735, 1, 1, "", "minutes"], [736, 1, 1, "", "month"], [737, 1, 1, "", "nanosecond"], [738, 1, 1, "", "nanoseconds"], [739, 1, 1, "", "offset_by"], [740, 1, 1, "", "ordinal_day"], [741, 1, 1, "", "quarter"], [742, 1, 1, "", "replace_time_zone"], [743, 1, 1, "", "round"], [744, 1, 1, "", "second"], [745, 1, 1, "", "seconds"], [746, 1, 1, "", "strftime"], [747, 1, 1, "", "timestamp"], [748, 1, 1, "", "truncate"], [749, 1, 1, "", "week"], [750, 1, 1, "", "weekday"], [751, 1, 1, "", "with_time_unit"], [752, 1, 1, "", "year"]], "polars.Series.str": [[854, 1, 1, "", "concat"], [855, 1, 1, "", "contains"], [856, 1, 1, "", "count_match"], [857, 1, 1, "", "decode"], [858, 1, 1, "", "encode"], [859, 1, 1, "", "ends_with"], [860, 1, 1, "", "explode"], [861, 1, 1, "", "extract"], [862, 1, 1, "", "extract_all"], [863, 1, 1, "", "json_extract"], [864, 1, 1, "", "json_path_match"], [865, 1, 1, "", "lengths"], [866, 1, 1, "", "ljust"], [867, 1, 1, "", "lstrip"], [868, 1, 1, "", "n_chars"], [869, 1, 1, "", "parse_int"], [870, 1, 1, "", "replace"], [871, 1, 1, "", "replace_all"], [872, 1, 1, "", "rjust"], [873, 1, 1, "", "rstrip"], [874, 1, 1, "", "slice"], [875, 1, 1, "", "split"], [876, 1, 1, "", "split_exact"], [877, 1, 1, "", "splitn"], [878, 1, 1, "", "starts_with"], [879, 1, 1, "", "strip"], [880, 1, 1, "", "strptime"], [881, 1, 1, "", "to_lowercase"], [882, 1, 1, "", "to_uppercase"], [883, 1, 1, "", "zfill"]], "polars.Series.struct": [[884, 1, 1, "", "field"], [885, 3, 1, "", "fields"], [886, 1, 1, "", "rename_fields"], [887, 1, 1, "", "unnest"]], "polars.StringCache": [[50, 1, 1, "", "__init__"]], "polars.Struct": [[51, 1, 1, "", "__init__"]], "polars.Time": [[52, 1, 1, "", "__init__"]], "polars.UInt16": [[53, 1, 1, "", "__init__"]], "polars.UInt32": [[54, 1, 1, "", "__init__"]], "polars.UInt64": [[55, 1, 1, "", "__init__"]], "polars.UInt8": [[56, 1, 1, "", "__init__"]], "polars.Unknown": [[57, 1, 1, "", "__init__"]], "polars.Utf8": [[58, 1, 1, "", "__init__"]], "polars.api": [[60, 4, 1, "", "register_dataframe_namespace"], [61, 4, 1, "", "register_expr_namespace"], [62, 4, 1, "", "register_lazyframe_namespace"], [63, 4, 1, "", "register_series_namespace"]], "polars.exceptions": [[70, 5, 1, "", "ArrowError"], [71, 5, 1, "", "ColumnNotFoundError"], [72, 5, 1, "", "ComputeError"], [73, 5, 1, "", "DuplicateError"], [74, 5, 1, "", "InvalidOperationError"], [75, 5, 1, "", "NoDataError"], [76, 5, 1, "", "NoRowsReturned"], [77, 5, 1, "", "PanicException"], [78, 5, 1, "", "RowsException"], [79, 5, 1, "", "SchemaError"], [80, 5, 1, "", "SchemaFieldNotFoundError"], [81, 5, 1, "", "ShapeError"], [82, 5, 1, "", "StructFieldNotFoundError"], [83, 5, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[93, 1, 1, "", "next_batches"]], "polars.internals.dataframe.groupby.GroupBy": [[220, 1, 1, "", "__iter__"], [221, 1, 1, "", "agg"], [222, 1, 1, "", "all"], [223, 1, 1, "", "apply"], [224, 1, 1, "", "count"], [225, 1, 1, "", "first"], [226, 1, 1, "", "head"], [227, 1, 1, "", "last"], [228, 1, 1, "", "max"], [229, 1, 1, "", "mean"], [230, 1, 1, "", "median"], [231, 1, 1, "", "min"], [232, 1, 1, "", "n_unique"], [233, 1, 1, "", "quantile"], [234, 1, 1, "", "sum"], [235, 1, 1, "", "tail"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[621, 1, 1, "", "agg"], [622, 1, 1, "", "all"], [623, 1, 1, "", "apply"], [624, 1, 1, "", "count"], [625, 1, 1, "", "first"], [626, 1, 1, "", "head"], [627, 1, 1, "", "last"], [628, 1, 1, "", "max"], [629, 1, 1, "", "mean"], [630, 1, 1, "", "median"], [631, 1, 1, "", "min"], [632, 1, 1, "", "n_unique"], [633, 1, 1, "", "quantile"], [634, 1, 1, "", "sum"], [635, 1, 1, "", "tail"]], "polars.testing": [[114, 4, 1, "", "assert_frame_equal"], [115, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[116, 0, 1, "", "column"], [117, 4, 1, "", "columns"], [118, 4, 1, "", "dataframes"], [119, 4, 1, "", "series"]], "polars.testing.parametric.column": [[116, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 138], "api": [1, 60, 61, 62, 63, 556], "provid": 1, "new": 1, "function": [1, 546, 555], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909], "binari": [2, 541, 912], "boolean": [3, 542, 913], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 123], "activate_decim": 5, "load": [6, 123], "restore_default": 7, "save": [8, 123], "set_ascii_t": 9, "set_fmt_float": 10, "set_fmt_str_length": 11, "set_tbl_cell_align": 12, "set_tbl_col": 13, "set_tbl_column_data_type_inlin": 14, "set_tbl_dataframe_shape_below": 15, "set_tbl_format": 16, "set_tbl_hide_column_data_typ": 17, "set_tbl_hide_column_nam": 18, "set_tbl_hide_dataframe_shap": 19, "set_tbl_hide_dtype_separ": 20, "set_tbl_row": 21, "set_tbl_width_char": 22, "set_verbos": 23, "state": [24, 123], "datafram": [25, 26, 27, 28, 29, 30, 31, 32, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 241], "write_avro": 25, "write_csv": 26, "write_databas": 27, "write_excel": 28, "write_ipc": 29, "write_json": [30, 620], "write_ndjson": 31, "write_parquet": 32, "datatyp": 33, "date": [34, 509], "datetim": [35, 510], "decim": 36, "durat": [37, 511], "float32": 38, "float64": 39, "int16": 40, "int32": 41, "int64": 42, "int8": 43, "list": [44, 385, 520], "null": 45, "object": 46, "sqlcontext": [47, 48, 49], "execut": 47, "queri": 48, "regist": 49, "stringcach": [50, 555], "struct": [51, 476, 477, 535, 552, 884, 885, 886, 887, 922], "time": 52, "uint16": 53, "uint32": 54, "uint64": 55, "uint8": 56, "unknown": 57, "utf8": 58, "align_fram": 59, "register_dataframe_namespac": 60, "register_expr_namespac": 61, "register_lazyframe_namespac": 62, "register_series_namespac": 63, "arg_wher": 64, "build_info": 65, "collect_al": 66, "concat": [67, 268, 446, 664, 854], "cut": [68, 710], "date_rang": 69, "except": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 245], "arrowerror": 70, "columnnotfounderror": 71, "computeerror": 72, "duplicateerror": 73, "invalidoperationerror": 74, "nodataerror": 75, "norowsreturn": 76, "panicexcept": 77, "rowsexcept": 78, "schemaerror": 79, "schemafieldnotfounderror": 80, "shapeerror": 81, "structfieldnotfounderror": 82, "toomanyrowsreturn": 83, "from_arrow": 84, "from_datafram": 85, "from_dict": [86, 87], "from_numpi": 88, "from_panda": 89, "from_record": 90, "get_dummi": 91, "get_index_typ": 92, "intern": [93, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635], "batch": 93, "batchedcsvread": [93, 557], "next_batch": 93, "ones": 94, "read_avro": 95, "read_csv": 96, "read_csv_batch": 97, "read_databas": 98, "read_delta": 99, "read_excel": 100, "read_ipc": 101, "read_ipc_schema": 102, "read_json": [103, 596], "read_ndjson": 104, "read_parquet": 105, "read_parquet_schema": 106, "scan_csv": 107, "scan_delta": 108, "scan_ipc": 109, "scan_ndjson": 110, "scan_parquet": 111, "scan_pyarrow_dataset": 112, "show_vers": 113, "test": [114, 115, 116, 117, 118, 119, 925], "assert_frame_equ": 114, "assert_series_equ": 115, "parametr": [116, 117, 118, 119], "column": [116, 117, 129, 544, 563], "seri": [119, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 918], "threadpool_s": 120, "toggle_string_cach": 121, "zero": 122, "option": 123, "current": 123, "us": 123, "context": 123, "manag": 123, "aggreg": [124, 246, 558, 642], "__dataframe__": 125, "appli": [126, 223, 253, 495, 623, 648], "clear": [127, 560, 698], "clone": [128, 561, 702], "corr": [130, 503], "describ": [131, 711], "drop": [132, 564], "drop_in_plac": 133, "drop_nul": [134, 316, 565, 715], "dtype": [135, 566, 753], "estimated_s": [136, 755], "explod": [137, 273, 355, 452, 568, 669, 760, 860], "fill_nan": [139, 357, 570, 762], "fill_nul": [140, 358, 571, 763], "filter": [141, 359, 572, 764], "find_idx_by_nam": 142, "fold": [143, 515], "frame_equ": 144, "get_column": [145, 146], "glimps": 147, "groupbi": [148, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 575, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638], "groupby_dynam": [149, 576], "groupby_rol": [150, 577], "hash_row": 151, "head": [152, 226, 276, 365, 519, 578, 626, 672, 770], "height": 153, "hstack": 154, "insert_at_idx": 155, "interpol": [156, 367, 580, 772], "is_dupl": [157, 369, 775], "is_empti": [158, 776], "is_uniqu": [159, 379, 789], "item": [160, 791], "iter_row": 161, "iter_slic": 162, "join": [163, 277, 581, 673], "join_asof": [164, 582], "lazi": [165, 555, 584], "limit": [166, 384, 585, 794], "max": [167, 228, 280, 392, 523, 587, 628, 676, 726, 799], "mean": [168, 229, 281, 393, 524, 588, 629, 677, 727, 800], "median": [169, 230, 394, 525, 589, 630, 728, 801], "melt": [170, 590], "merge_sort": [171, 591], "min": [172, 231, 282, 401, 526, 592, 631, 678, 733, 802], "n_chunk": [173, 804], "n_uniqu": [174, 232, 403, 527, 632, 805], "null_count": [175, 406, 810], "partition_bi": 176, "pipe": [177, 593], "pivot": 178, "product": [179, 411, 814], "quantil": [180, 233, 412, 529, 595, 633, 815], "rechunk": [181, 414, 817], "renam": [182, 597, 819], "replac": [183, 462, 870], "replace_at_idx": 184, "revers": [185, 283, 418, 598, 679, 821], "row": [186, 187], "sampl": [188, 430, 833], "schema": [189, 599], "select": [190, 243, 532, 550, 600, 641, 920], "shape": [191, 839], "shift": [192, 284, 433, 601, 680, 840], "shift_and_fil": [193, 434, 602, 841], "shrink_to_fit": [194, 843], "slice": [195, 285, 441, 466, 606, 681, 849, 874], "sort": [196, 286, 442, 607, 682, 850], "std": [197, 445, 534, 608, 852], "sum": [198, 234, 287, 479, 536, 609, 634, 683, 888], "tail": [199, 235, 288, 480, 537, 610, 635, 684, 889], "take_everi": [200, 482, 611, 891], "to_arrow": [201, 895], "to_dict": [202, 203], "to_dummi": [204, 896], "to_numpi": [205, 899], "to_panda": [206, 900], "to_seri": 207, "to_struct": [208, 290, 686], "transpos": 209, "uniqu": [210, 291, 487, 612, 687, 903], "unnest": [211, 613, 887], "unstack": 212, "updat": [213, 614], "upsampl": 214, "var": [215, 491, 538, 615, 907], "vstack": 216, "width": [217, 616], "with_column": [218, 617], "with_row_count": [219, 619], "__iter__": 220, "agg": [221, 621], "all": [222, 250, 493, 622, 645], "count": [224, 306, 504, 624], "first": [225, 274, 360, 514, 573, 625, 670], "last": [227, 278, 382, 583, 627, 674], "attribut": [236, 636, 911], "comput": [237, 545, 915], "descript": [238, 637, 916], "export": [239, 917], "miscellan": [242, 549, 555, 640, 919], "manipul": [243, 550, 641, 920], "data": 244, "type": 244, "numer": 244, "tempor": [244, 553, 923], "nest": 244, "other": 244, "expr": [247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492], "ab": [247, 643], "agg_group": 248, "alia": [249, 644], "ani": [251, 494, 646], "append": [252, 647], "arcco": [254, 649], "arccosh": [255, 650], "arcsin": [256, 651], "arcsinh": [257, 652], "arctan": [258, 653], "arctanh": [259, 654], "arg_max": [260, 266, 655, 662], "arg_min": [261, 267, 656, 663], "arg_sort": [262, 657], "arg_tru": [263, 658], "arg_uniqu": [264, 659], "argsort": [265, 660], "arr": [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687], "contain": [269, 293, 447, 665, 688, 855], "count_match": [270, 448, 666, 856], "diff": [271, 313, 667, 712], "eval": [272, 668], "get": [275, 671], "length": [279, 457, 675, 865], "take": [289, 481, 685, 890], "backward_fil": 292, "bin": [293, 294, 295, 296, 297, 688, 689, 690, 691, 692], "decod": [294, 449, 689, 857], "encod": [295, 450, 690, 858], "ends_with": [296, 451, 691, 859], "starts_with": [297, 470, 692, 878], "cast": [298, 693], "cat": [299, 694, 695], "set_ord": [299, 695], "ceil": [300, 696], "clip": [301, 699], "clip_max": [302, 700], "clip_min": [303, 701], "co": [304, 703], "cosh": [305, 704], "cumcount": 307, "cummax": [308, 705], "cummin": [309, 706], "cumprod": [310, 707], "cumsum": [311, 508, 708], "cumulative_ev": [312, 709], "dot": [314, 713], "drop_nan": [315, 714], "dt": [317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752], "cast_time_unit": [317, 717], "combin": [318, 718], "convert_time_zon": [319, 719], "dai": [320, 321, 720, 721], "epoch": [322, 722], "hour": [323, 324, 723, 724], "iso_year": [325, 725], "microsecond": [326, 327, 729, 730], "millisecond": [328, 329, 731, 732], "minut": [330, 331, 734, 735], "month": [332, 736], "nanosecond": [333, 334, 737, 738], "offset_bi": [335, 739], "ordinal_dai": [336, 740], "quarter": [337, 741], "replace_time_zon": [338, 742], "round": [339, 429, 743, 832], "second": [340, 341, 744, 745], "strftime": [342, 746], "timestamp": [343, 747], "truncat": [344, 748], "week": [345, 749], "weekdai": [346, 750], "with_time_unit": [347, 751], "year": [348, 752], "entropi": [349, 754], "ewm_mean": [350, 756], "ewm_std": [351, 757], "ewm_var": [352, 758], "exclud": [353, 513], "exp": [354, 759], "extend_const": [356, 761], "flatten": 361, "floor": [362, 766], "forward_fil": 363, "hash": [364, 769], "inspect": [366, 579], "is_between": [368, 773], "is_finit": [370, 777], "is_first": [371, 778], "is_in": [372, 780], "is_infinit": [373, 781], "is_nan": [374, 782], "is_not": 375, "is_not_nan": [376, 783], "is_not_nul": [377, 784], "is_nul": [378, 785], "keep_nam": 380, "kurtosi": [381, 792], "len": [383, 793], "log": [386, 795], "log10": [387, 796], "lower_bound": [388, 797], "map": [389, 522, 586], "map_alia": 390, "map_dict": [391, 798], "meta": [395, 396, 397, 398, 399, 400, 548], "has_multiple_output": 395, "is_regex_project": 396, "output_nam": 397, "pop": 398, "root_nam": 399, "undo_alias": 400, "mode": [402, 803], "nan_max": [404, 807], "nan_min": [405, 808], "over": 407, "pct_chang": [408, 811], "pow": 409, "prefix": 410, "rank": [413, 816], "reinterpret": [415, 818], "repeat_bi": 416, "reshap": [417, 820], "rolling_appli": [419, 822], "rolling_max": [420, 823], "rolling_mean": [421, 824], "rolling_median": [422, 825], "rolling_min": [423, 826], "rolling_quantil": [424, 827], "rolling_skew": [425, 828], "rolling_std": [426, 829], "rolling_sum": [427, 830], "rolling_var": [428, 831], "search_sort": [431, 834], "set_sort": [432, 838], "shrink_dtyp": [435, 842], "shuffl": [436, 844], "sign": [437, 845], "sin": [438, 846], "sinh": [439, 847], "skew": [440, 848], "sort_bi": 443, "sqrt": [444, 851], "str": [446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883], "extract": [453, 861], "extract_al": [454, 862], "json_extract": [455, 863], "json_path_match": [456, 864], "ljust": [458, 866], "lstrip": [459, 867], "n_char": [460, 868], "parse_int": [461, 869], "replace_al": [463, 871], "rjust": [464, 872], "rstrip": [465, 873], "split": [467, 875], "split_exact": [468, 876], "splitn": [469, 877], "strip": [471, 879], "strptime": [472, 880], "to_lowercas": [473, 881], "to_uppercas": [474, 882], "zfill": [475, 883], "field": [476, 884, 885], "rename_field": [477, 886], "suffix": 478, "tan": [483, 892], "tanh": [484, 893], "to_phys": [485, 901], "top_k": [486, 902], "unique_count": [488, 904], "upper_bound": [489, 905], "value_count": [490, 906], "where": 492, "arang": 496, "arg_sort_bi": 497, "avg": 498, "coalesc": 499, "col": 500, "concat_list": 501, "concat_str": 502, "cov": 505, "cumfold": 506, "cumreduc": 507, "element": 512, "format": 516, "from_epoch": 517, "group": 518, "lit": 521, "pearson_corr": 528, "reduc": 530, "repeat": 531, "spearman_rank_corr": 533, "when": 539, "arrai": [540, 910], "categori": [543, 914], "name": [544, 806], "express": 547, "string": [551, 921], "window": 554, "convers": 555, "eager": 555, "parallel": 555, "refer": 556, "input": 557, "output": 557, "csv": 557, "feather": 557, "ipc": 557, "parquet": 557, "databas": 557, "json": 557, "avro": 557, "excel": 557, "delta": 557, "lake": 557, "dataset": 557, "lazyfram": [559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639], "cach": 559, "collect": 562, "explain": 567, "fetch": 569, "from_json": 574, "profil": 594, "show_graph": 603, "sink_ipc": 604, "sink_parquet": 605, "with_context": 618, "lazygroupbi": [621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635], "read": 640, "write": 640, "logic": 640, "plan": 640, "chunk_length": 697, "flag": 765, "get_chunk": 767, "has_valid": 768, "inner_dtyp": 771, "is_boolean": 774, "is_float": 779, "is_numer": 786, "is_sort": 787, "is_tempor": 788, "is_utf8": 790, "new_from_index": 809, "peak_max": 812, "peak_min": 813, "series_equ": 835, "set": 836, "set_at_idx": 837, "time_unit": 894, "to_fram": 897, "to_list": 898, "view": 908, "zip_with": 909, "sql": 924, "method": 924, "assert": 925, "properti": 925, "base": 925, "strategi": 925, "helper": 925, "util": 926}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.get_index_type": [[92, "polars-get-index-type"]], "polars.read_csv_batched": [[97, "polars-read-csv-batched"]], "polars.exceptions.ComputeError": [[72, "polars-exceptions-computeerror"]], "polars.from_arrow": [[84, "polars-from-arrow"]], "polars.from_numpy": [[88, "polars-from-numpy"]], "polars.zeros": [[122, "polars-zeros"]], "polars.testing.assert_series_equal": [[115, "polars-testing-assert-series-equal"]], "polars.testing.parametric.dataframes": [[118, "polars-testing-parametric-dataframes"]], "polars.read_parquet": [[105, "polars-read-parquet"]], "polars.DataFrame.__dataframe__": [[125, "polars-dataframe-dataframe"]], "polars.from_dicts": [[87, "polars-from-dicts"]], "polars.scan_pyarrow_dataset": [[112, "polars-scan-pyarrow-dataset"]], "polars.DataFrame.drop_in_place": [[133, "polars-dataframe-drop-in-place"]], "polars.read_delta": [[99, "polars-read-delta"]], "Config": [[123, "config"]], "Config options": [[123, "config-options"]], "Config load, save, and current state": [[123, "config-load-save-and-current-state"]], "Use as a context manager": [[123, "use-as-a-context-manager"]], "polars.get_dummies": [[91, "polars-get-dummies"]], "polars.from_dataframe": [[85, "polars-from-dataframe"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[93, "polars-internals-batched-batchedcsvreader-next-batches"]], "polars.from_dict": [[86, "polars-from-dict"]], "polars.scan_ndjson": [[110, "polars-scan-ndjson"]], "polars.testing.assert_frame_equal": [[114, "polars-testing-assert-frame-equal"]], "polars.testing.parametric.series": [[119, "polars-testing-parametric-series"]], "polars.read_database": [[98, "polars-read-database"]], "polars.exceptions.TooManyRowsReturned": [[83, "polars-exceptions-toomanyrowsreturned"]], "polars.DataFrame.dtypes": [[135, "polars-dataframe-dtypes"]], "polars.read_ipc_schema": [[102, "polars-read-ipc-schema"]], "polars.threadpool_size": [[120, "polars-threadpool-size"]], "polars.DataFrame.columns": [[129, "polars-dataframe-columns"]], "polars.exceptions.NoDataError": [[75, "polars-exceptions-nodataerror"]], "polars.DataFrame.describe": [[131, "polars-dataframe-describe"]], "polars.scan_csv": [[107, "polars-scan-csv"]], "polars.exceptions.StructFieldNotFoundError": [[82, "polars-exceptions-structfieldnotfounderror"]], "polars.DataFrame.apply": [[126, "polars-dataframe-apply"]], "Aggregation": [[124, "aggregation"], [642, "aggregation"], [558, "aggregation"], [246, "aggregation"]], "polars.scan_parquet": [[111, "polars-scan-parquet"]], "polars.scan_ipc": [[109, "polars-scan-ipc"]], "polars.DataFrame.clone": [[128, "polars-dataframe-clone"]], "polars.exceptions.SchemaError": [[79, "polars-exceptions-schemaerror"]], "polars.from_records": [[90, "polars-from-records"]], "polars.ones": [[94, "polars-ones"]], "polars.DataFrame.drop_nulls": [[134, "polars-dataframe-drop-nulls"]], "polars.read_avro": [[95, "polars-read-avro"]], "polars.exceptions.ShapeError": [[81, "polars-exceptions-shapeerror"]], "polars.scan_delta": [[108, "polars-scan-delta"]], "polars.exceptions.PanicException": [[77, "polars-exceptions-panicexception"]], "polars.read_ndjson": [[104, "polars-read-ndjson"]], "polars.show_versions": [[113, "polars-show-versions"]], "polars.toggle_string_cache": [[121, "polars-toggle-string-cache"]], "polars.exceptions.DuplicateError": [[73, "polars-exceptions-duplicateerror"]], "polars.read_ipc": [[101, "polars-read-ipc"]], "polars.exceptions.ColumnNotFoundError": [[71, "polars-exceptions-columnnotfounderror"]], "polars.read_csv": [[96, "polars-read-csv"]], "polars.testing.parametric.columns": [[117, "polars-testing-parametric-columns"]], "polars.DataFrame.drop": [[132, "polars-dataframe-drop"]], "polars.date_range": [[69, "polars-date-range"]], "polars.cut": [[68, "polars-cut"]], "polars.from_pandas": [[89, "polars-from-pandas"]], "polars.DataFrame.clear": [[127, "polars-dataframe-clear"]], "polars.read_json": [[103, "polars-read-json"]], "polars.read_parquet_schema": [[106, "polars-read-parquet-schema"]], "polars.exceptions.NoRowsReturned": [[76, "polars-exceptions-norowsreturned"]], "polars.exceptions.RowsException": [[78, "polars-exceptions-rowsexception"]], "polars.exceptions.SchemaFieldNotFoundError": [[80, "polars-exceptions-schemafieldnotfounderror"]], "polars.testing.parametric.column": [[116, "polars-testing-parametric-column"]], "polars.DataFrame.corr": [[130, "polars-dataframe-corr"]], "polars.read_excel": [[100, "polars-read-excel"]], "polars.exceptions.ArrowError": [[70, "polars-exceptions-arrowerror"]], "polars.exceptions.InvalidOperationError": [[74, "polars-exceptions-invalidoperationerror"]], "polars.Config.restore_defaults": [[7, "polars-config-restore-defaults"]], "polars.Time": [[52, "polars-time"]], "polars.Object": [[46, "polars-object"]], "polars.List": [[44, "polars-list"]], "polars.Config.load": [[6, "polars-config-load"]], "polars.UInt64": [[55, "polars-uint64"]], "polars.Config.activate_decimals": [[5, "polars-config-activate-decimals"]], "polars.DataFrame.write_ndjson": [[31, "polars-dataframe-write-ndjson"]], "polars.Int64": [[42, "polars-int64"]], "polars.Date": [[34, "polars-date"]], "polars.Struct": [[51, "polars-struct"]], "polars.arg_where": [[64, "polars-arg-where"]], "polars.Config.set_tbl_hide_column_names": [[18, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_width_chars": [[22, "polars-config-set-tbl-width-chars"]], "polars.Config.set_tbl_cols": [[13, "polars-config-set-tbl-cols"]], "polars.Datetime": [[35, "polars-datetime"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Config.save": [[8, "polars-config-save"]], "polars.Config.set_tbl_cell_alignment": [[12, "polars-config-set-tbl-cell-alignment"]], "polars.Duration": [[37, "polars-duration"]], "polars.Null": [[45, "polars-null"]], "polars.build_info": [[65, "polars-build-info"]], "polars.api.register_dataframe_namespace": [[60, "polars-api-register-dataframe-namespace"]], "polars.Utf8": [[58, "polars-utf8"]], "polars.Config.set_verbose": [[23, "polars-config-set-verbose"]], "polars.Config.set_tbl_hide_dtype_separator": [[20, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_hide_column_data_types": [[17, "polars-config-set-tbl-hide-column-data-types"]], "polars.api.register_series_namespace": [[63, "polars-api-register-series-namespace"]], "polars.DataFrame.write_database": [[27, "polars-dataframe-write-database"]], "polars.DataFrame.write_excel": [[28, "polars-dataframe-write-excel"]], "polars.Config.state": [[24, "polars-config-state"]], "polars.DataFrame.write_ipc": [[29, "polars-dataframe-write-ipc"]], "polars.UInt32": [[54, "polars-uint32"]], "polars.DataFrame.write_json": [[30, "polars-dataframe-write-json"]], "polars.UInt16": [[53, "polars-uint16"]], "polars.Unknown": [[57, "polars-unknown"]], "polars.api.register_lazyframe_namespace": [[62, "polars-api-register-lazyframe-namespace"]], "polars.collect_all": [[66, "polars-collect-all"]], "polars.SQLContext.query": [[48, "polars-sqlcontext-query"]], "polars.Decimal": [[36, "polars-decimal"]], "polars.api.register_expr_namespace": [[61, "polars-api-register-expr-namespace"]], "polars.Binary": [[2, "polars-binary"]], "polars.Config.set_tbl_formatting": [[16, "polars-config-set-tbl-formatting"]], "polars.DataFrame.write_parquet": [[32, "polars-dataframe-write-parquet"]], "polars.Int8": [[43, "polars-int8"]], "polars.Config.set_fmt_str_lengths": [[11, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_ascii_tables": [[9, "polars-config-set-ascii-tables"]], "polars.SQLContext.register": [[49, "polars-sqlcontext-register"]], "polars.StringCache": [[50, "polars-stringcache"]], "polars.Int32": [[41, "polars-int32"]], "polars.Config.set_tbl_column_data_type_inline": [[14, "polars-config-set-tbl-column-data-type-inline"]], "polars.Int16": [[40, "polars-int16"]], "polars.Config.set_tbl_rows": [[21, "polars-config-set-tbl-rows"]], "polars.align_frames": [[59, "polars-align-frames"]], "polars.Float32": [[38, "polars-float32"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.DataType": [[33, "polars-datatype"]], "polars.Float64": [[39, "polars-float64"]], "polars.concat": [[67, "polars-concat"]], "polars.SQLContext.execute": [[47, "polars-sqlcontext-execute"]], "polars.Config.set_fmt_float": [[10, "polars-config-set-fmt-float"]], "polars.UInt8": [[56, "polars-uint8"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.Config.set_tbl_hide_dataframe_shape": [[19, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_dataframe_shape_below": [[15, "polars-config-set-tbl-dataframe-shape-below"]], "polars.DataFrame.write_csv": [[26, "polars-dataframe-write-csv"]], "polars.DataFrame.write_avro": [[25, "polars-dataframe-write-avro"]], "polars.Series.str.replace_all": [[871, "polars-series-str-replace-all"]], "polars.Series.str.starts_with": [[878, "polars-series-str-starts-with"]], "polars.Series.str.strptime": [[880, "polars-series-str-strptime"]], "polars.Series.rank": [[816, "polars-series-rank"]], "polars.Series.rename": [[819, "polars-series-rename"]], "polars.Series.set": [[836, "polars-series-set"]], "polars.Series.shift_and_fill": [[841, "polars-series-shift-and-fill"]], "polars.Series.rolling_max": [[823, "polars-series-rolling-max"]], "polars.Series.sinh": [[847, "polars-series-sinh"]], "polars.Series.str.json_extract": [[863, "polars-series-str-json-extract"]], "polars.Series.sin": [[846, "polars-series-sin"]], "polars.Series.str.extract": [[861, "polars-series-str-extract"]], "polars.Series.str.replace": [[870, "polars-series-str-replace"]], "polars.Series.str.extract_all": [[862, "polars-series-str-extract-all"]], "polars.Series.str.json_path_match": [[864, "polars-series-str-json-path-match"]], "polars.Series.str.to_lowercase": [[881, "polars-series-str-to-lowercase"]], "polars.Series.rolling_quantile": [[827, "polars-series-rolling-quantile"]], "polars.Series.sign": [[845, "polars-series-sign"]], "polars.Series.reverse": [[821, "polars-series-reverse"]], "polars.Series.str.decode": [[857, "polars-series-str-decode"]], "polars.Series.str.split_exact": [[876, "polars-series-str-split-exact"]], "polars.Series.str.encode": [[858, "polars-series-str-encode"]], "polars.Series.sort": [[850, "polars-series-sort"]], "polars.Series.str.rstrip": [[873, "polars-series-str-rstrip"]], "polars.Series.str.split": [[875, "polars-series-str-split"]], "polars.Series.rolling_mean": [[824, "polars-series-rolling-mean"]], "polars.Series.sample": [[833, "polars-series-sample"]], "polars.Series.skew": [[848, "polars-series-skew"]], "polars.Series.sqrt": [[851, "polars-series-sqrt"]], "polars.Series.shrink_to_fit": [[843, "polars-series-shrink-to-fit"]], "polars.Series.str": [[853, "polars-series-str"]], "polars.Series.shuffle": [[844, "polars-series-shuffle"]], "polars.Series.set_at_idx": [[837, "polars-series-set-at-idx"]], "polars.Series.str.strip": [[879, "polars-series-str-strip"]], "polars.Series.shrink_dtype": [[842, "polars-series-shrink-dtype"]], "polars.Series.reinterpret": [[818, "polars-series-reinterpret"]], "polars.Series.rolling_apply": [[822, "polars-series-rolling-apply"]], "polars.Series.str.contains": [[855, "polars-series-str-contains"]], "polars.Series.str.concat": [[854, "polars-series-str-concat"]], "polars.Series.rechunk": [[817, "polars-series-rechunk"]], "polars.Series.rolling_std": [[829, "polars-series-rolling-std"]], "polars.Series.str.ljust": [[866, "polars-series-str-ljust"]], "polars.Series.shift": [[840, "polars-series-shift"]], "polars.Series.search_sorted": [[834, "polars-series-search-sorted"]], "polars.Series.round": [[832, "polars-series-round"]], "polars.Series.str.ends_with": [[859, "polars-series-str-ends-with"]], "polars.Series.str.n_chars": [[868, "polars-series-str-n-chars"]], "polars.Series.str.slice": [[874, "polars-series-str-slice"]], "polars.Series.str.parse_int": [[869, "polars-series-str-parse-int"]], "polars.Series.reshape": [[820, "polars-series-reshape"]], "polars.Series.str.to_uppercase": [[882, "polars-series-str-to-uppercase"]], "polars.Series.rolling_min": [[826, "polars-series-rolling-min"]], "polars.Series.set_sorted": [[838, "polars-series-set-sorted"]], "polars.Series.str.zfill": [[883, "polars-series-str-zfill"]], "polars.Series.rolling_median": [[825, "polars-series-rolling-median"]], "polars.Series.rolling_var": [[831, "polars-series-rolling-var"]], "polars.Series.str.count_match": [[856, "polars-series-str-count-match"]], "polars.Series.str.lstrip": [[867, "polars-series-str-lstrip"]], "polars.Series.str.splitn": [[877, "polars-series-str-splitn"]], "polars.Series.str.lengths": [[865, "polars-series-str-lengths"]], "polars.Series.str.rjust": [[872, "polars-series-str-rjust"]], "polars.Series.std": [[852, "polars-series-std"]], "polars.Series.rolling_sum": [[830, "polars-series-rolling-sum"]], "polars.Series.series_equal": [[835, "polars-series-series-equal"]], "polars.Series.slice": [[849, "polars-series-slice"]], "polars.Series.rolling_skew": [[828, "polars-series-rolling-skew"]], "polars.Series.str.explode": [[860, "polars-series-str-explode"]], "polars.Series.shape": [[839, "polars-series-shape"]], "polars.Series.is_finite": [[777, "polars-series-is-finite"]], "polars.Series.map_dict": [[798, "polars-series-map-dict"]], "polars.Series.is_empty": [[776, "polars-series-is-empty"]], "polars.Series.n_unique": [[805, "polars-series-n-unique"]], "polars.Series.is_null": [[785, "polars-series-is-null"]], "polars.Series.has_validity": [[768, "polars-series-has-validity"]], "polars.Series.is_sorted": [[787, "polars-series-is-sorted"]], "polars.Series.max": [[799, "polars-series-max"]], "polars.Series.is_first": [[778, "polars-series-is-first"]], "polars.Series.extend_constant": [[761, "polars-series-extend-constant"]], "polars.Series.is_infinite": [[781, "polars-series-is-infinite"]], "polars.Series.ewm_mean": [[756, "polars-series-ewm-mean"]], "polars.Series.nan_max": [[807, "polars-series-nan-max"]], "polars.Series.lower_bound": [[797, "polars-series-lower-bound"]], "polars.Series.estimated_size": [[755, "polars-series-estimated-size"]], "polars.Series.is_unique": [[789, "polars-series-is-unique"]], "polars.Series.peak_min": [[813, "polars-series-peak-min"]], "polars.Series.is_between": [[773, "polars-series-is-between"]], "polars.Series.entropy": [[754, "polars-series-entropy"]], "polars.Series.dt.week": [[749, "polars-series-dt-week"]], "polars.Series.inner_dtype": [[771, "polars-series-inner-dtype"]], "polars.Series.exp": [[759, "polars-series-exp"]], "polars.Series.limit": [[794, "polars-series-limit"]], "polars.Series.fill_nan": [[762, "polars-series-fill-nan"]], "polars.Series.kurtosis": [[792, "polars-series-kurtosis"]], "polars.Series.dt.with_time_unit": [[751, "polars-series-dt-with-time-unit"]], "polars.Series.mode": [[803, "polars-series-mode"]], "polars.Series.null_count": [[810, "polars-series-null-count"]], "polars.Series.quantile": [[815, "polars-series-quantile"]], "polars.Series.head": [[770, "polars-series-head"]], "polars.Series.is_boolean": [[774, "polars-series-is-boolean"]], "polars.Series.name": [[806, "polars-series-name"]], "polars.Series.dtype": [[753, "polars-series-dtype"]], "polars.Series.item": [[791, "polars-series-item"]], "polars.Series.filter": [[764, "polars-series-filter"]], "polars.Series.n_chunks": [[804, "polars-series-n-chunks"]], "polars.Series.is_not_nan": [[783, "polars-series-is-not-nan"]], "polars.Series.log10": [[796, "polars-series-log10"]], "polars.Series.product": [[814, "polars-series-product"]], "polars.Series.ewm_var": [[758, "polars-series-ewm-var"]], "polars.Series.floor": [[766, "polars-series-floor"]], "polars.Series.dt.weekday": [[750, "polars-series-dt-weekday"]], "polars.Series.log": [[795, "polars-series-log"]], "polars.Series.is_numeric": [[786, "polars-series-is-numeric"]], "polars.Series.is_float": [[779, "polars-series-is-float"]], "polars.Series.hash": [[769, "polars-series-hash"]], "polars.Series.fill_null": [[763, "polars-series-fill-null"]], "polars.Series.dt.truncate": [[748, "polars-series-dt-truncate"]], "polars.Series.ewm_std": [[757, "polars-series-ewm-std"]], "polars.Series.is_not_null": [[784, "polars-series-is-not-null"]], "polars.Series.is_nan": [[782, "polars-series-is-nan"]], "polars.Series.is_utf8": [[790, "polars-series-is-utf8"]], "polars.Series.is_in": [[780, "polars-series-is-in"]], "polars.Series.median": [[801, "polars-series-median"]], "polars.Series.nan_min": [[808, "polars-series-nan-min"]], "polars.Series.len": [[793, "polars-series-len"]], "polars.Series.new_from_index": [[809, "polars-series-new-from-index"]], "polars.Series.mean": [[800, "polars-series-mean"]], "polars.Series.get_chunks": [[767, "polars-series-get-chunks"]], "polars.Series.is_temporal": [[788, "polars-series-is-temporal"]], "polars.Series.interpolate": [[772, "polars-series-interpolate"]], "polars.Series.dt.year": [[752, "polars-series-dt-year"]], "polars.Series.pct_change": [[811, "polars-series-pct-change"]], "polars.Series.peak_max": [[812, "polars-series-peak-max"]], "polars.Series.explode": [[760, "polars-series-explode"]], "polars.Series.min": [[802, "polars-series-min"]], "polars.Series.flags": [[765, "polars-series-flags"]], "polars.Series.is_duplicated": [[775, "polars-series-is-duplicated"]], "polars.Series.dt.replace_time_zone": [[742, "polars-series-dt-replace-time-zone"]], "polars.Series.arr.tail": [[684, "polars-series-arr-tail"]], "polars.Series.arr.take": [[685, "polars-series-arr-take"]], "polars.Series.arr.to_struct": [[686, "polars-series-arr-to-struct"]], "polars.Series.dt.quarter": [[741, "polars-series-dt-quarter"]], "polars.Series.chunk_lengths": [[697, "polars-series-chunk-lengths"]], "polars.Series.dt.mean": [[727, "polars-series-dt-mean"]], "polars.Series.bin.ends_with": [[691, "polars-series-bin-ends-with"]], "polars.Series.dt.microsecond": [[729, "polars-series-dt-microsecond"]], "polars.Series.clone": [[702, "polars-series-clone"]], "polars.Series.dot": [[713, "polars-series-dot"]], "polars.Series.cat.set_ordering": [[695, "polars-series-cat-set-ordering"]], "polars.Series.cast": [[693, "polars-series-cast"]], "polars.Series.dt": [[716, "polars-series-dt"]], "polars.Series.dt.max": [[726, "polars-series-dt-max"]], "polars.Series.dt.hour": [[723, "polars-series-dt-hour"]], "polars.Series.bin.starts_with": [[692, "polars-series-bin-starts-with"]], "polars.Series.dt.minutes": [[735, "polars-series-dt-minutes"]], "polars.Series.arr.slice": [[681, "polars-series-arr-slice"]], "polars.Series.dt.round": [[743, "polars-series-dt-round"]], "polars.Series.dt.timestamp": [[747, "polars-series-dt-timestamp"]], "polars.Series.ceil": [[696, "polars-series-ceil"]], "polars.Series.dt.combine": [[718, "polars-series-dt-combine"]], "polars.Series.dt.seconds": [[745, "polars-series-dt-seconds"]], "polars.Series.dt.strftime": [[746, "polars-series-dt-strftime"]], "polars.Series.dt.min": [[733, "polars-series-dt-min"]], "polars.Series.dt.median": [[728, "polars-series-dt-median"]], "polars.Series.dt.nanosecond": [[737, "polars-series-dt-nanosecond"]], "polars.Series.dt.hours": [[724, "polars-series-dt-hours"]], "polars.Series.cat": [[694, "polars-series-cat"]], "polars.Series.cumsum": [[708, "polars-series-cumsum"]], "polars.Series.clip_max": [[700, "polars-series-clip-max"]], "polars.Series.drop_nans": [[714, "polars-series-drop-nans"]], "polars.Series.dt.iso_year": [[725, "polars-series-dt-iso-year"]], "polars.Series.cummin": [[706, "polars-series-cummin"]], "polars.Series.dt.cast_time_unit": [[717, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.milliseconds": [[732, "polars-series-dt-milliseconds"]], "polars.Series.arr.shift": [[680, "polars-series-arr-shift"]], "polars.Series.diff": [[712, "polars-series-diff"]], "polars.Series.cummax": [[705, "polars-series-cummax"]], "polars.Series.cumulative_eval": [[709, "polars-series-cumulative-eval"]], "polars.Series.cut": [[710, "polars-series-cut"]], "polars.Series.dt.month": [[736, "polars-series-dt-month"]], "polars.Series.dt.day": [[720, "polars-series-dt-day"]], "polars.Series.cosh": [[704, "polars-series-cosh"]], "polars.Series.dt.convert_time_zone": [[719, "polars-series-dt-convert-time-zone"]], "polars.Series.describe": [[711, "polars-series-describe"]], "polars.Series.dt.epoch": [[722, "polars-series-dt-epoch"]], "polars.Series.arr.sort": [[682, "polars-series-arr-sort"]], "polars.Series.dt.millisecond": [[731, "polars-series-dt-millisecond"]], "polars.Series.bin.contains": [[688, "polars-series-bin-contains"]], "polars.Series.clip_min": [[701, "polars-series-clip-min"]], "polars.Series.clip": [[699, "polars-series-clip"]], "polars.Series.dt.days": [[721, "polars-series-dt-days"]], "polars.Series.bin.decode": [[689, "polars-series-bin-decode"]], "polars.Series.dt.offset_by": [[739, "polars-series-dt-offset-by"]], "polars.Series.dt.nanoseconds": [[738, "polars-series-dt-nanoseconds"]], "polars.Series.dt.ordinal_day": [[740, "polars-series-dt-ordinal-day"]], "polars.Series.clear": [[698, "polars-series-clear"]], "polars.Series.dt.minute": [[734, "polars-series-dt-minute"]], "polars.Series.arr.sum": [[683, "polars-series-arr-sum"]], "polars.Series.drop_nulls": [[715, "polars-series-drop-nulls"]], "polars.Series.arr.unique": [[687, "polars-series-arr-unique"]], "polars.Series.bin.encode": [[690, "polars-series-bin-encode"]], "polars.Series.dt.microseconds": [[730, "polars-series-dt-microseconds"]], "polars.Series.cumprod": [[707, "polars-series-cumprod"]], "polars.Series.dt.second": [[744, "polars-series-dt-second"]], "polars.Series.cos": [[703, "polars-series-cos"]], "polars.Series.to_physical": [[901, "polars-series-to-physical"]], "polars.Series.take_every": [[891, "polars-series-take-every"]], "polars.Series.to_dummies": [[896, "polars-series-to-dummies"]], "SQL": [[924, "sql"]], "Methods": [[924, "methods"]], "polars.Series.struct.fields": [[885, "polars-series-struct-fields"]], "Manipulation/selection": [[920, "manipulation-selection"], [641, "manipulation-selection"], [550, "manipulation-selection"], [243, "manipulation-selection"]], "Struct": [[922, "struct"], [552, "struct"]], "Testing": [[925, "testing"]], "Asserts": [[925, "asserts"]], "Property-based testing": [[925, "property-based-testing"]], "Strategies": [[925, "strategies"]], "Strategy helpers": [[925, "strategy-helpers"]], "polars.Series.tail": [[889, "polars-series-tail"]], "Categories": [[914, "categories"], [543, "categories"]], "polars.Series.struct.unnest": [[887, "polars-series-struct-unnest"]], "polars.Series.view": [[908, "polars-series-view"]], "Computation": [[915, "computation"], [545, "computation"], [237, "computation"]], "Strings": [[921, "strings"], [551, "strings"]], "Binary": [[912, "binary"], [541, "binary"]], "polars.Series.time_unit": [[894, "polars-series-time-unit"]], "polars.Series.to_numpy": [[899, "polars-series-to-numpy"]], "polars.Series.zip_with": [[909, "polars-series-zip-with"]], "polars.Series.var": [[907, "polars-series-var"]], "polars.Series.to_arrow": [[895, "polars-series-to-arrow"]], "polars.Series.take": [[890, "polars-series-take"]], "Series": [[918, "series"]], "Miscellaneous": [[919, "miscellaneous"], [640, "miscellaneous"], [555, "miscellaneous"], [549, "miscellaneous"], [242, "miscellaneous"]], "polars.Series.struct.field": [[884, "polars-series-struct-field"]], "Attributes": [[911, "attributes"], [636, "attributes"], [236, "attributes"]], "polars.Series.to_pandas": [[900, "polars-series-to-pandas"]], "polars.Series.sum": [[888, "polars-series-sum"]], "Export": [[917, "export"], [239, "export"]], "polars.Series.unique_counts": [[904, "polars-series-unique-counts"]], "Utils": [[926, "utils"]], "Descriptive": [[916, "descriptive"], [637, "descriptive"], [238, "descriptive"]], "polars.Series.tanh": [[893, "polars-series-tanh"]], "Array": [[910, "array"], [540, "array"]], "polars.Series.unique": [[903, "polars-series-unique"]], "polars.Series.to_list": [[898, "polars-series-to-list"]], "polars.Series.top_k": [[902, "polars-series-top-k"]], "polars.Series.to_frame": [[897, "polars-series-to-frame"]], "Boolean": [[913, "boolean"], [542, "boolean"]], "Temporal": [[923, "temporal"], [553, "temporal"], [244, "temporal"]], "polars.Series.struct.rename_fields": [[886, "polars-series-struct-rename-fields"]], "polars.Series.tan": [[892, "polars-series-tan"]], "polars.Series.upper_bound": [[905, "polars-series-upper-bound"]], "polars.Series.value_counts": [[906, "polars-series-value-counts"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[623, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.Series.arcsin": [[651, "polars-series-arcsin"]], "polars.LazyFrame.width": [[616, "polars-lazyframe-width"]], "polars.Series.alias": [[644, "polars-series-alias"]], "polars.Series.arg_unique": [[659, "polars-series-arg-unique"]], "polars.Series.arr.diff": [[667, "polars-series-arr-diff"]], "polars.Series.arg_true": [[658, "polars-series-arg-true"]], "polars.Series.arg_min": [[656, "polars-series-arg-min"]], "polars.Series.arr.mean": [[677, "polars-series-arr-mean"]], "polars.Series.arr.join": [[673, "polars-series-arr-join"]], "polars.LazyFrame.write_json": [[620, "polars-lazyframe-write-json"]], "polars.LazyFrame.update": [[614, "polars-lazyframe-update"]], "polars.Series.abs": [[643, "polars-series-abs"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[635, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.arccos": [[649, "polars-series-arccos"]], "polars.internals.lazyframe.groupby.LazyGroupBy.quantile": [[633, "polars-internals-lazyframe-groupby-lazygroupby-quantile"]], "polars.Series.apply": [[648, "polars-series-apply"]], "polars.Series.arctanh": [[654, "polars-series-arctanh"]], "polars.Series.arr.max": [[676, "polars-series-arr-max"]], "polars.LazyFrame.with_context": [[618, "polars-lazyframe-with-context"]], "polars.Series.arr.eval": [[668, "polars-series-arr-eval"]], "polars.Series.arr.last": [[674, "polars-series-arr-last"]], "polars.Series.arr.concat": [[664, "polars-series-arr-concat"]], "polars.Series.arr.explode": [[669, "polars-series-arr-explode"]], "polars.Series.arr": [[661, "polars-series-arr"]], "polars.Series.arg_max": [[655, "polars-series-arg-max"]], "polars.internals.lazyframe.groupby.LazyGroupBy.first": [[625, "polars-internals-lazyframe-groupby-lazygroupby-first"]], "polars.internals.lazyframe.groupby.LazyGroupBy.all": [[622, "polars-internals-lazyframe-groupby-lazygroupby-all"]], "polars.Series.arccosh": [[650, "polars-series-arccosh"]], "polars.Series.arctan": [[653, "polars-series-arctan"]], "polars.Series.arr.arg_max": [[662, "polars-series-arr-arg-max"]], "polars.internals.lazyframe.groupby.LazyGroupBy.median": [[630, "polars-internals-lazyframe-groupby-lazygroupby-median"]], "polars.Series.arr.head": [[672, "polars-series-arr-head"]], "polars.Series.arr.get": [[671, "polars-series-arr-get"]], "polars.LazyFrame.unnest": [[613, "polars-lazyframe-unnest"]], "polars.Series.arr.min": [[678, "polars-series-arr-min"]], "polars.Series.any": [[646, "polars-series-any"]], "polars.internals.lazyframe.groupby.LazyGroupBy.n_unique": [[632, "polars-internals-lazyframe-groupby-lazygroupby-n-unique"]], "polars.internals.lazyframe.groupby.LazyGroupBy.last": [[627, "polars-internals-lazyframe-groupby-lazygroupby-last"]], "polars.LazyFrame.with_row_count": [[619, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.var": [[615, "polars-lazyframe-var"]], "polars.internals.lazyframe.groupby.LazyGroupBy.mean": [[629, "polars-internals-lazyframe-groupby-lazygroupby-mean"]], "LazyFrame": [[639, "lazyframe"]], "polars.internals.lazyframe.groupby.LazyGroupBy.sum": [[634, "polars-internals-lazyframe-groupby-lazygroupby-sum"]], "polars.Series.arr.count_match": [[666, "polars-series-arr-count-match"]], "polars.Series.arr.contains": [[665, "polars-series-arr-contains"]], "polars.Series.all": [[645, "polars-series-all"]], "polars.Series.argsort": [[660, "polars-series-argsort"]], "Read/write logical plan": [[640, "read-write-logical-plan"]], "polars.internals.lazyframe.groupby.LazyGroupBy.min": [[631, "polars-internals-lazyframe-groupby-lazygroupby-min"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[621, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.Series.arr.reverse": [[679, "polars-series-arr-reverse"]], "polars.LazyFrame.unique": [[612, "polars-lazyframe-unique"]], "polars.Series.arcsinh": [[652, "polars-series-arcsinh"]], "polars.Series.arr.arg_min": [[663, "polars-series-arr-arg-min"]], "polars.Series.arr.lengths": [[675, "polars-series-arr-lengths"]], "polars.Series.arr.first": [[670, "polars-series-arr-first"]], "polars.internals.lazyframe.groupby.LazyGroupBy.count": [[624, "polars-internals-lazyframe-groupby-lazygroupby-count"]], "polars.internals.lazyframe.groupby.LazyGroupBy.max": [[628, "polars-internals-lazyframe-groupby-lazygroupby-max"]], "GroupBy": [[638, "groupby"], [240, "groupby"]], "polars.Series.arg_sort": [[657, "polars-series-arg-sort"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[626, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "polars.LazyFrame.with_columns": [[617, "polars-lazyframe-with-columns"]], "polars.Series.append": [[647, "polars-series-append"]], "polars.apply": [[495, "polars-apply"]], "polars.coalesce": [[499, "polars-coalesce"]], "polars.count": [[504, "polars-count"]], "polars.struct": [[535, "polars-struct"]], "polars.all": [[493, "polars-all"]], "polars.Expr.var": [[491, "polars-expr-var"]], "polars.Expr.where": [[492, "polars-expr-where"]], "polars.Expr.struct.rename_fields": [[477, "polars-expr-struct-rename-fields"]], "polars.date": [[509, "polars-date"]], "polars.cov": [[505, "polars-cov"]], "polars.groups": [[518, "polars-groups"]], "polars.quantile": [[529, "polars-quantile"]], "polars.Expr.to_physical": [[485, "polars-expr-to-physical"]], "polars.std": [[534, "polars-std"]], "polars.Expr.value_counts": [[490, "polars-expr-value-counts"]], "polars.Expr.tanh": [[484, "polars-expr-tanh"]], "polars.concat_list": [[501, "polars-concat-list"]], "polars.cumreduce": [[507, "polars-cumreduce"]], "polars.repeat": [[531, "polars-repeat"]], "polars.avg": [[498, "polars-avg"]], "polars.sum": [[536, "polars-sum"]], "polars.reduce": [[530, "polars-reduce"]], "polars.Expr.take_every": [[482, "polars-expr-take-every"]], "polars.median": [[525, "polars-median"]], "polars.datetime": [[510, "polars-datetime"]], "polars.head": [[519, "polars-head"]], "polars.corr": [[503, "polars-corr"]], "polars.select": [[532, "polars-select"]], "polars.tail": [[537, "polars-tail"]], "polars.first": [[514, "polars-first"]], "polars.Expr.tan": [[483, "polars-expr-tan"]], "polars.Expr.unique": [[487, "polars-expr-unique"]], "polars.Expr.take": [[481, "polars-expr-take"]], "polars.min": [[526, "polars-min"]], "polars.n_unique": [[527, "polars-n-unique"]], "polars.arange": [[496, "polars-arange"]], "polars.any": [[494, "polars-any"]], "polars.Expr.suffix": [[478, "polars-expr-suffix"]], "polars.max": [[523, "polars-max"]], "polars.concat_str": [[502, "polars-concat-str"]], "polars.Expr.top_k": [[486, "polars-expr-top-k"]], "polars.cumfold": [[506, "polars-cumfold"]], "polars.col": [[500, "polars-col"]], "polars.Expr.unique_counts": [[488, "polars-expr-unique-counts"]], "polars.from_epoch": [[517, "polars-from-epoch"]], "polars.Expr.sum": [[479, "polars-expr-sum"]], "polars.cumsum": [[508, "polars-cumsum"]], "polars.lit": [[521, "polars-lit"]], "polars.map": [[522, "polars-map"]], "polars.format": [[516, "polars-format"]], "polars.Expr.upper_bound": [[489, "polars-expr-upper-bound"]], "polars.arg_sort_by": [[497, "polars-arg-sort-by"]], "polars.mean": [[524, "polars-mean"]], "polars.Expr.tail": [[480, "polars-expr-tail"]], "polars.fold": [[515, "polars-fold"]], "polars.spearman_rank_corr": [[533, "polars-spearman-rank-corr"]], "polars.pearson_corr": [[528, "polars-pearson-corr"]], "polars.element": [[512, "polars-element"]], "polars.duration": [[511, "polars-duration"]], "polars.Expr.struct.field": [[476, "polars-expr-struct-field"]], "polars.exclude": [[513, "polars-exclude"]], "polars.list": [[520, "polars-list"]], "polars.when": [[539, "polars-when"]], "polars.var": [[538, "polars-var"]], "polars.Expr.rolling_apply": [[419, "polars-expr-rolling-apply"]], "polars.Expr.str.to_lowercase": [[473, "polars-expr-str-to-lowercase"]], "polars.Expr.str.zfill": [[475, "polars-expr-str-zfill"]], "polars.Expr.str.extract_all": [[454, "polars-expr-str-extract-all"]], "polars.Expr.str.strip": [[471, "polars-expr-str-strip"]], "polars.Expr.str.split_exact": [[468, "polars-expr-str-split-exact"]], "polars.Expr.reinterpret": [[415, "polars-expr-reinterpret"]], "polars.Expr.str.extract": [[453, "polars-expr-str-extract"]], "polars.Expr.rank": [[413, "polars-expr-rank"]], "polars.Expr.str.replace": [[462, "polars-expr-str-replace"]], "polars.Expr.str.json_path_match": [[456, "polars-expr-str-json-path-match"]], "polars.Expr.pow": [[409, "polars-expr-pow"]], "polars.Expr.set_sorted": [[432, "polars-expr-set-sorted"]], "polars.Expr.str.lstrip": [[459, "polars-expr-str-lstrip"]], "polars.Expr.repeat_by": [[416, "polars-expr-repeat-by"]], "polars.Expr.rolling_sum": [[427, "polars-expr-rolling-sum"]], "polars.Expr.sinh": [[439, "polars-expr-sinh"]], "polars.Expr.rechunk": [[414, "polars-expr-rechunk"]], "polars.Expr.rolling_skew": [[425, "polars-expr-rolling-skew"]], "polars.Expr.rolling_max": [[420, "polars-expr-rolling-max"]], "polars.Expr.str.decode": [[449, "polars-expr-str-decode"]], "polars.Expr.str.concat": [[446, "polars-expr-str-concat"]], "polars.Expr.shrink_dtype": [[435, "polars-expr-shrink-dtype"]], "polars.Expr.str.ends_with": [[451, "polars-expr-str-ends-with"]], "polars.Expr.rolling_median": [[422, "polars-expr-rolling-median"]], "polars.Expr.prefix": [[410, "polars-expr-prefix"]], "polars.Expr.sin": [[438, "polars-expr-sin"]], "polars.Expr.str.count_match": [[448, "polars-expr-str-count-match"]], "polars.Expr.str.starts_with": [[470, "polars-expr-str-starts-with"]], "polars.Expr.rolling_var": [[428, "polars-expr-rolling-var"]], "polars.Expr.shift": [[433, "polars-expr-shift"]], "polars.Expr.shift_and_fill": [[434, "polars-expr-shift-and-fill"]], "polars.Expr.shuffle": [[436, "polars-expr-shuffle"]], "polars.Expr.skew": [[440, "polars-expr-skew"]], "polars.Expr.rolling_quantile": [[424, "polars-expr-rolling-quantile"]], "polars.Expr.str.contains": [[447, "polars-expr-str-contains"]], "polars.Expr.str.encode": [[450, "polars-expr-str-encode"]], "polars.Expr.rolling_min": [[423, "polars-expr-rolling-min"]], "polars.Expr.str.lengths": [[457, "polars-expr-str-lengths"]], "polars.Expr.str.rstrip": [[465, "polars-expr-str-rstrip"]], "polars.Expr.reverse": [[418, "polars-expr-reverse"]], "polars.Expr.str.split": [[467, "polars-expr-str-split"]], "polars.Expr.round": [[429, "polars-expr-round"]], "polars.Expr.str.splitn": [[469, "polars-expr-str-splitn"]], "polars.Expr.pct_change": [[408, "polars-expr-pct-change"]], "polars.Expr.str.parse_int": [[461, "polars-expr-str-parse-int"]], "polars.Expr.reshape": [[417, "polars-expr-reshape"]], "polars.Expr.sort_by": [[443, "polars-expr-sort-by"]], "polars.Expr.str.n_chars": [[460, "polars-expr-str-n-chars"]], "polars.Expr.str.replace_all": [[463, "polars-expr-str-replace-all"]], "polars.Expr.str.strptime": [[472, "polars-expr-str-strptime"]], "polars.Expr.str.ljust": [[458, "polars-expr-str-ljust"]], "polars.Expr.rolling_mean": [[421, "polars-expr-rolling-mean"]], "polars.Expr.sort": [[442, "polars-expr-sort"]], "polars.Expr.rolling_std": [[426, "polars-expr-rolling-std"]], "polars.Expr.search_sorted": [[431, "polars-expr-search-sorted"]], "polars.Expr.str.slice": [[466, "polars-expr-str-slice"]], "polars.Expr.product": [[411, "polars-expr-product"]], "polars.Expr.quantile": [[412, "polars-expr-quantile"]], "polars.Expr.std": [[445, "polars-expr-std"]], "polars.Expr.sign": [[437, "polars-expr-sign"]], "polars.Expr.str.explode": [[452, "polars-expr-str-explode"]], "polars.Expr.str.to_uppercase": [[474, "polars-expr-str-to-uppercase"]], "polars.Expr.sqrt": [[444, "polars-expr-sqrt"]], "polars.Expr.str.rjust": [[464, "polars-expr-str-rjust"]], "polars.Expr.slice": [[441, "polars-expr-slice"]], "polars.Expr.sample": [[430, "polars-expr-sample"]], "polars.Expr.str.json_extract": [[455, "polars-expr-str-json-extract"]], "polars.Expr.max": [[392, "polars-expr-max"]], "polars.Expr.is_unique": [[379, "polars-expr-is-unique"]], "polars.Expr.is_in": [[372, "polars-expr-is-in"]], "polars.Expr.meta.undo_aliases": [[400, "polars-expr-meta-undo-aliases"]], "polars.Expr.min": [[401, "polars-expr-min"]], "polars.Expr.meta.is_regex_projection": [[396, "polars-expr-meta-is-regex-projection"]], "polars.Expr.is_nan": [[374, "polars-expr-is-nan"]], "polars.Expr.ewm_var": [[352, "polars-expr-ewm-var"]], "polars.Expr.inspect": [[366, "polars-expr-inspect"]], "polars.Expr.ewm_mean": [[350, "polars-expr-ewm-mean"]], "polars.Expr.is_finite": [[370, "polars-expr-is-finite"]], "polars.Expr.meta.root_names": [[399, "polars-expr-meta-root-names"]], "polars.Expr.lower_bound": [[388, "polars-expr-lower-bound"]], "polars.Expr.nan_max": [[404, "polars-expr-nan-max"]], "polars.Expr.meta.output_name": [[397, "polars-expr-meta-output-name"]], "polars.Expr.is_first": [[371, "polars-expr-is-first"]], "polars.Expr.floor": [[362, "polars-expr-floor"]], "polars.Expr.dt.with_time_unit": [[347, "polars-expr-dt-with-time-unit"]], "polars.Expr.head": [[365, "polars-expr-head"]], "polars.Expr.len": [[383, "polars-expr-len"]], "polars.Expr.dt.year": [[348, "polars-expr-dt-year"]], "polars.Expr.filter": [[359, "polars-expr-filter"]], "polars.Expr.is_not_nan": [[376, "polars-expr-is-not-nan"]], "polars.Expr.list": [[385, "polars-expr-list"]], "polars.Expr.is_duplicated": [[369, "polars-expr-is-duplicated"]], "polars.Expr.is_not": [[375, "polars-expr-is-not"]], "polars.Expr.fill_nan": [[357, "polars-expr-fill-nan"]], "polars.Expr.interpolate": [[367, "polars-expr-interpolate"]], "polars.Expr.map_alias": [[390, "polars-expr-map-alias"]], "polars.Expr.meta.pop": [[398, "polars-expr-meta-pop"]], "polars.Expr.hash": [[364, "polars-expr-hash"]], "polars.Expr.log10": [[387, "polars-expr-log10"]], "polars.Expr.mode": [[402, "polars-expr-mode"]], "polars.Expr.forward_fill": [[363, "polars-expr-forward-fill"]], "polars.Expr.log": [[386, "polars-expr-log"]], "polars.Expr.is_null": [[378, "polars-expr-is-null"]], "polars.Expr.ewm_std": [[351, "polars-expr-ewm-std"]], "polars.Expr.null_count": [[406, "polars-expr-null-count"]], "polars.Expr.limit": [[384, "polars-expr-limit"]], "polars.Expr.dt.truncate": [[344, "polars-expr-dt-truncate"]], "polars.Expr.is_between": [[368, "polars-expr-is-between"]], "polars.Expr.exp": [[354, "polars-expr-exp"]], "polars.Expr.explode": [[355, "polars-expr-explode"]], "polars.Expr.dt.strftime": [[342, "polars-expr-dt-strftime"]], "polars.Expr.meta.has_multiple_outputs": [[395, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.nan_min": [[405, "polars-expr-nan-min"]], "polars.Expr.over": [[407, "polars-expr-over"]], "polars.Expr.last": [[382, "polars-expr-last"]], "polars.Expr.is_infinite": [[373, "polars-expr-is-infinite"]], "polars.Expr.extend_constant": [[356, "polars-expr-extend-constant"]], "polars.Expr.entropy": [[349, "polars-expr-entropy"]], "polars.Expr.median": [[394, "polars-expr-median"]], "polars.Expr.dt.weekday": [[346, "polars-expr-dt-weekday"]], "polars.Expr.keep_name": [[380, "polars-expr-keep-name"]], "polars.Expr.kurtosis": [[381, "polars-expr-kurtosis"]], "polars.Expr.map_dict": [[391, "polars-expr-map-dict"]], "polars.Expr.flatten": [[361, "polars-expr-flatten"]], "polars.Expr.dt.timestamp": [[343, "polars-expr-dt-timestamp"]], "polars.Expr.first": [[360, "polars-expr-first"]], "polars.Expr.dt.second": [[340, "polars-expr-dt-second"]], "polars.Expr.is_not_null": [[377, "polars-expr-is-not-null"]], "polars.Expr.dt.week": [[345, "polars-expr-dt-week"]], "polars.Expr.map": [[389, "polars-expr-map"]], "polars.Expr.mean": [[393, "polars-expr-mean"]], "polars.Expr.dt.seconds": [[341, "polars-expr-dt-seconds"]], "polars.Expr.n_unique": [[403, "polars-expr-n-unique"]], "polars.Expr.exclude": [[353, "polars-expr-exclude"]], "polars.Expr.fill_null": [[358, "polars-expr-fill-null"]], "polars.LazyFrame.cache": [[559, "polars-lazyframe-cache"]], "polars.LazyFrame.mean": [[588, "polars-lazyframe-mean"]], "polars.LazyFrame.slice": [[606, "polars-lazyframe-slice"]], "polars.LazyFrame.groupby_dynamic": [[576, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.filter": [[572, "polars-lazyframe-filter"]], "polars.LazyFrame.sink_parquet": [[605, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.inspect": [[579, "polars-lazyframe-inspect"]], "polars.LazyFrame.take_every": [[611, "polars-lazyframe-take-every"]], "API reference": [[556, "api-reference"]], "polars.LazyFrame.join_asof": [[582, "polars-lazyframe-join-asof"]], "polars.LazyFrame.median": [[589, "polars-lazyframe-median"]], "polars.LazyFrame.interpolate": [[580, "polars-lazyframe-interpolate"]], "polars.LazyFrame.fetch": [[569, "polars-lazyframe-fetch"]], "polars.LazyFrame.quantile": [[595, "polars-lazyframe-quantile"]], "polars.LazyFrame.schema": [[599, "polars-lazyframe-schema"]], "polars.LazyFrame.tail": [[610, "polars-lazyframe-tail"]], "Functions": [[555, "functions"], [546, "functions"]], "Conversion": [[555, "conversion"]], "Eager/Lazy functions": [[555, "eager-lazy-functions"]], "Parallelization": [[555, "parallelization"]], "StringCache": [[555, "stringcache"]], "polars.LazyFrame.fill_nan": [[570, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.first": [[573, "polars-lazyframe-first"]], "polars.LazyFrame.drop_nulls": [[565, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.head": [[578, "polars-lazyframe-head"]], "polars.LazyFrame.reverse": [[598, "polars-lazyframe-reverse"]], "polars.LazyFrame.select": [[600, "polars-lazyframe-select"]], "polars.LazyFrame.shift": [[601, "polars-lazyframe-shift"]], "Expressions": [[547, "expressions"]], "polars.LazyFrame.from_json": [[574, "polars-lazyframe-from-json"]], "polars.LazyFrame.pipe": [[593, "polars-lazyframe-pipe"]], "Window": [[554, "window"]], "polars.LazyFrame.shift_and_fill": [[602, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.dtypes": [[566, "polars-lazyframe-dtypes"]], "polars.LazyFrame.limit": [[585, "polars-lazyframe-limit"]], "polars.LazyFrame.melt": [[590, "polars-lazyframe-melt"]], "polars.LazyFrame.read_json": [[596, "polars-lazyframe-read-json"]], "polars.LazyFrame.lazy": [[584, "polars-lazyframe-lazy"]], "polars.LazyFrame.rename": [[597, "polars-lazyframe-rename"]], "polars.LazyFrame.sink_ipc": [[604, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.merge_sorted": [[591, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.show_graph": [[603, "polars-lazyframe-show-graph"]], "polars.LazyFrame.profile": [[594, "polars-lazyframe-profile"]], "polars.LazyFrame.join": [[581, "polars-lazyframe-join"]], "polars.LazyFrame.groupby_rolling": [[577, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.sum": [[609, "polars-lazyframe-sum"]], "polars.LazyFrame.clear": [[560, "polars-lazyframe-clear"]], "polars.LazyFrame.min": [[592, "polars-lazyframe-min"]], "Input/output": [[557, "input-output"]], "CSV": [[557, "csv"]], "Feather/ IPC": [[557, "feather-ipc"]], "Parquet": [[557, "parquet"]], "Database": [[557, "database"]], "JSON": [[557, "json"]], "AVRO": [[557, "avro"]], "Excel": [[557, "excel"]], "Delta Lake": [[557, "delta-lake"]], "Datasets": [[557, "datasets"]], "BatchedCsvReader": [[557, "batchedcsvreader"]], "polars.LazyFrame.clone": [[561, "polars-lazyframe-clone"]], "polars.LazyFrame.explain": [[567, "polars-lazyframe-explain"]], "polars.LazyFrame.last": [[583, "polars-lazyframe-last"]], "polars.LazyFrame.drop": [[564, "polars-lazyframe-drop"]], "polars.LazyFrame.std": [[608, "polars-lazyframe-std"]], "polars.LazyFrame.max": [[587, "polars-lazyframe-max"]], "polars.LazyFrame.groupby": [[575, "polars-lazyframe-groupby"]], "polars.LazyFrame.fill_null": [[571, "polars-lazyframe-fill-null"]], "polars.LazyFrame.explode": [[568, "polars-lazyframe-explode"]], "Meta": [[548, "meta"]], "polars.LazyFrame.sort": [[607, "polars-lazyframe-sort"]], "Columns / names": [[544, "columns-names"]], "polars.LazyFrame.map": [[586, "polars-lazyframe-map"]], "polars.LazyFrame.columns": [[563, "polars-lazyframe-columns"]], "polars.LazyFrame.collect": [[562, "polars-lazyframe-collect"]], "polars.Expr.arr.slice": [[285, "polars-expr-arr-slice"]], "polars.Expr.bin.decode": [[294, "polars-expr-bin-decode"]], "polars.Expr.dt.minute": [[330, "polars-expr-dt-minute"]], "polars.Expr.arr.max": [[280, "polars-expr-arr-max"]], "polars.Expr.cast": [[298, "polars-expr-cast"]], "polars.Expr.arr.tail": [[288, "polars-expr-arr-tail"]], "polars.Expr.arr.eval": [[272, "polars-expr-arr-eval"]], "polars.Expr.dt.microsecond": [[326, "polars-expr-dt-microsecond"]], "polars.Expr.cosh": [[305, "polars-expr-cosh"]], "polars.Expr.bin.encode": [[295, "polars-expr-bin-encode"]], "polars.Expr.arr.head": [[276, "polars-expr-arr-head"]], "polars.Expr.cummin": [[309, "polars-expr-cummin"]], "polars.Expr.dt.convert_time_zone": [[319, "polars-expr-dt-convert-time-zone"]], "polars.Expr.bin.ends_with": [[296, "polars-expr-bin-ends-with"]], "polars.Expr.arr.get": [[275, "polars-expr-arr-get"]], "polars.Expr.dt.millisecond": [[328, "polars-expr-dt-millisecond"]], "polars.Expr.dt.days": [[321, "polars-expr-dt-days"]], "polars.Expr.dt.microseconds": [[327, "polars-expr-dt-microseconds"]], "polars.Expr.arr.sort": [[286, "polars-expr-arr-sort"]], "polars.Expr.arr.first": [[274, "polars-expr-arr-first"]], "polars.Expr.bin.starts_with": [[297, "polars-expr-bin-starts-with"]], "polars.Expr.arr.last": [[278, "polars-expr-arr-last"]], "polars.Expr.clip_max": [[302, "polars-expr-clip-max"]], "polars.Expr.arr.sum": [[287, "polars-expr-arr-sum"]], "polars.Expr.dt.minutes": [[331, "polars-expr-dt-minutes"]], "polars.Expr.drop_nulls": [[316, "polars-expr-drop-nulls"]], "polars.Expr.dt.cast_time_unit": [[317, "polars-expr-dt-cast-time-unit"]], "polars.Expr.ceil": [[300, "polars-expr-ceil"]], "polars.Expr.dt.day": [[320, "polars-expr-dt-day"]], "polars.Expr.dt.ordinal_day": [[336, "polars-expr-dt-ordinal-day"]], "polars.Expr.count": [[306, "polars-expr-count"]], "polars.Expr.cumsum": [[311, "polars-expr-cumsum"]], "polars.Expr.dot": [[314, "polars-expr-dot"]], "polars.Expr.drop_nans": [[315, "polars-expr-drop-nans"]], "polars.Expr.dt.hours": [[324, "polars-expr-dt-hours"]], "polars.Expr.cos": [[304, "polars-expr-cos"]], "polars.Expr.diff": [[313, "polars-expr-diff"]], "polars.Expr.clip": [[301, "polars-expr-clip"]], "polars.Expr.dt.offset_by": [[335, "polars-expr-dt-offset-by"]], "polars.Expr.dt.month": [[332, "polars-expr-dt-month"]], "polars.Expr.arr.shift": [[284, "polars-expr-arr-shift"]], "polars.Expr.arr.reverse": [[283, "polars-expr-arr-reverse"]], "polars.Expr.cumulative_eval": [[312, "polars-expr-cumulative-eval"]], "polars.Expr.clip_min": [[303, "polars-expr-clip-min"]], "polars.Expr.cummax": [[308, "polars-expr-cummax"]], "polars.Expr.arr.take": [[289, "polars-expr-arr-take"]], "polars.Expr.backward_fill": [[292, "polars-expr-backward-fill"]], "polars.Expr.cat.set_ordering": [[299, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.combine": [[318, "polars-expr-dt-combine"]], "polars.Expr.dt.iso_year": [[325, "polars-expr-dt-iso-year"]], "polars.Expr.arr.explode": [[273, "polars-expr-arr-explode"]], "polars.Expr.dt.milliseconds": [[329, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.nanosecond": [[333, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.quarter": [[337, "polars-expr-dt-quarter"]], "polars.Expr.arr.lengths": [[279, "polars-expr-arr-lengths"]], "polars.Expr.arr.unique": [[291, "polars-expr-arr-unique"]], "polars.Expr.dt.nanoseconds": [[334, "polars-expr-dt-nanoseconds"]], "polars.Expr.arr.min": [[282, "polars-expr-arr-min"]], "polars.Expr.dt.round": [[339, "polars-expr-dt-round"]], "polars.Expr.bin.contains": [[293, "polars-expr-bin-contains"]], "polars.Expr.arr.to_struct": [[290, "polars-expr-arr-to-struct"]], "polars.Expr.dt.hour": [[323, "polars-expr-dt-hour"]], "polars.Expr.arr.mean": [[281, "polars-expr-arr-mean"]], "polars.Expr.dt.replace_time_zone": [[338, "polars-expr-dt-replace-time-zone"]], "polars.Expr.cumprod": [[310, "polars-expr-cumprod"]], "polars.Expr.cumcount": [[307, "polars-expr-cumcount"]], "polars.Expr.dt.epoch": [[322, "polars-expr-dt-epoch"]], "polars.Expr.arr.join": [[277, "polars-expr-arr-join"]], "polars.DataFrame.shrink_to_fit": [[194, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.shift_and_fill": [[193, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.is_empty": [[158, "polars-dataframe-is-empty"]], "polars.DataFrame.n_unique": [[174, "polars-dataframe-n-unique"]], "polars.DataFrame.sample": [[188, "polars-dataframe-sample"]], "polars.DataFrame.partition_by": [[176, "polars-dataframe-partition-by"]], "polars.DataFrame.iter_slices": [[162, "polars-dataframe-iter-slices"]], "polars.DataFrame.interpolate": [[156, "polars-dataframe-interpolate"]], "polars.DataFrame.quantile": [[180, "polars-dataframe-quantile"]], "polars.DataFrame.to_dict": [[202, "polars-dataframe-to-dict"]], "polars.DataFrame.fold": [[143, "polars-dataframe-fold"]], "polars.DataFrame.get_columns": [[146, "polars-dataframe-get-columns"]], "polars.DataFrame.replace": [[183, "polars-dataframe-replace"]], "polars.DataFrame.rename": [[182, "polars-dataframe-rename"]], "polars.DataFrame.std": [[197, "polars-dataframe-std"]], "polars.DataFrame.null_count": [[175, "polars-dataframe-null-count"]], "polars.DataFrame.slice": [[195, "polars-dataframe-slice"]], "polars.DataFrame.max": [[167, "polars-dataframe-max"]], "polars.DataFrame.estimated_size": [[136, "polars-dataframe-estimated-size"]], "polars.DataFrame.join_asof": [[164, "polars-dataframe-join-asof"]], "polars.DataFrame.pipe": [[177, "polars-dataframe-pipe"]], "polars.DataFrame.rows": [[187, "polars-dataframe-rows"]], "polars.DataFrame.get_column": [[145, "polars-dataframe-get-column"]], "polars.DataFrame.fill_null": [[140, "polars-dataframe-fill-null"]], "polars.DataFrame.mean": [[168, "polars-dataframe-mean"]], "polars.DataFrame.rechunk": [[181, "polars-dataframe-rechunk"]], "polars.DataFrame.to_arrow": [[201, "polars-dataframe-to-arrow"]], "polars.DataFrame.find_idx_by_name": [[142, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.glimpse": [[147, "polars-dataframe-glimpse"]], "polars.DataFrame.merge_sorted": [[171, "polars-dataframe-merge-sorted"]], "polars.DataFrame.filter": [[141, "polars-dataframe-filter"]], "polars.DataFrame.melt": [[170, "polars-dataframe-melt"]], "polars.DataFrame.pivot": [[178, "polars-dataframe-pivot"]], "polars.DataFrame.fill_nan": [[139, "polars-dataframe-fill-nan"]], "polars.DataFrame.groupby_dynamic": [[149, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.replace_at_idx": [[184, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.schema": [[189, "polars-dataframe-schema"]], "polars.DataFrame.is_unique": [[159, "polars-dataframe-is-unique"]], "polars.DataFrame.iter_rows": [[161, "polars-dataframe-iter-rows"]], "polars.DataFrame.to_dicts": [[203, "polars-dataframe-to-dicts"]], "polars.DataFrame.take_every": [[200, "polars-dataframe-take-every"]], "polars.DataFrame.shift": [[192, "polars-dataframe-shift"]], "polars.DataFrame.lazy": [[165, "polars-dataframe-lazy"]], "polars.DataFrame.hash_rows": [[151, "polars-dataframe-hash-rows"]], "polars.DataFrame.min": [[172, "polars-dataframe-min"]], "polars.DataFrame.explode": [[137, "polars-dataframe-explode"]], "polars.DataFrame.extend": [[138, "polars-dataframe-extend"]], "polars.DataFrame.n_chunks": [[173, "polars-dataframe-n-chunks"]], "polars.DataFrame.tail": [[199, "polars-dataframe-tail"]], "polars.DataFrame.sort": [[196, "polars-dataframe-sort"]], "polars.DataFrame.head": [[152, "polars-dataframe-head"]], "polars.DataFrame.insert_at_idx": [[155, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.row": [[186, "polars-dataframe-row"]], "polars.DataFrame.item": [[160, "polars-dataframe-item"]], "polars.DataFrame.sum": [[198, "polars-dataframe-sum"]], "polars.DataFrame.select": [[190, "polars-dataframe-select"]], "polars.DataFrame.median": [[169, "polars-dataframe-median"]], "polars.DataFrame.hstack": [[154, "polars-dataframe-hstack"]], "polars.DataFrame.product": [[179, "polars-dataframe-product"]], "polars.DataFrame.shape": [[191, "polars-dataframe-shape"]], "polars.DataFrame.groupby": [[148, "polars-dataframe-groupby"]], "polars.DataFrame.height": [[153, "polars-dataframe-height"]], "polars.DataFrame.groupby_rolling": [[150, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.is_duplicated": [[157, "polars-dataframe-is-duplicated"]], "polars.DataFrame.frame_equal": [[144, "polars-dataframe-frame-equal"]], "polars.DataFrame.limit": [[166, "polars-dataframe-limit"]], "polars.DataFrame.join": [[163, "polars-dataframe-join"]], "polars.DataFrame.reverse": [[185, "polars-dataframe-reverse"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[233, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[229, "polars-internals-dataframe-groupby-groupby-mean"]], "polars.Expr.arr.arg_min": [[267, "polars-expr-arr-arg-min"]], "polars.Expr.arr.diff": [[271, "polars-expr-arr-diff"]], "polars.Expr.append": [[252, "polars-expr-append"]], "polars.Expr.arr.contains": [[269, "polars-expr-arr-contains"]], "polars.internals.dataframe.groupby.GroupBy.count": [[224, "polars-internals-dataframe-groupby-groupby-count"]], "polars.DataFrame.to_pandas": [[206, "polars-dataframe-to-pandas"]], "polars.Expr.apply": [[253, "polars-expr-apply"]], "polars.Expr.arctan": [[258, "polars-expr-arctan"]], "polars.Expr.arr.concat": [[268, "polars-expr-arr-concat"]], "polars.internals.dataframe.groupby.GroupBy.__iter__": [[220, "polars-internals-dataframe-groupby-groupby-iter"]], "polars.Expr.arcsin": [[256, "polars-expr-arcsin"]], "polars.DataFrame.to_struct": [[208, "polars-dataframe-to-struct"]], "polars.Expr.arccos": [[254, "polars-expr-arccos"]], "polars.DataFrame.unstack": [[212, "polars-dataframe-unstack"]], "polars.Expr.arg_min": [[261, "polars-expr-arg-min"]], "polars.internals.dataframe.groupby.GroupBy.all": [[222, "polars-internals-dataframe-groupby-groupby-all"]], "polars.Expr.abs": [[247, "polars-expr-abs"]], "polars.internals.dataframe.groupby.GroupBy.head": [[226, "polars-internals-dataframe-groupby-groupby-head"]], "polars.internals.dataframe.groupby.GroupBy.median": [[230, "polars-internals-dataframe-groupby-groupby-median"]], "polars.Expr.any": [[251, "polars-expr-any"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[221, "polars-internals-dataframe-groupby-groupby-agg"]], "polars.Expr.arcsinh": [[257, "polars-expr-arcsinh"]], "polars.DataFrame.with_columns": [[218, "polars-dataframe-with-columns"]], "polars.internals.dataframe.groupby.GroupBy.min": [[231, "polars-internals-dataframe-groupby-groupby-min"]], "polars.Expr.argsort": [[265, "polars-expr-argsort"]], "polars.Expr.arctanh": [[259, "polars-expr-arctanh"]], "polars.DataFrame.to_series": [[207, "polars-dataframe-to-series"]], "polars.Expr.arr.count_match": [[270, "polars-expr-arr-count-match"]], "polars.Expr.arg_max": [[260, "polars-expr-arg-max"]], "polars.DataFrame.update": [[213, "polars-dataframe-update"]], "polars.DataFrame.width": [[217, "polars-dataframe-width"]], "polars.DataFrame.with_row_count": [[219, "polars-dataframe-with-row-count"]], "Data types": [[244, "data-types"]], "Numeric": [[244, "numeric"]], "Nested": [[244, "nested"]], "Other": [[244, "other"]], "Exceptions": [[245, "exceptions"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[235, "polars-internals-dataframe-groupby-groupby-tail"]], "polars.internals.dataframe.groupby.GroupBy.first": [[225, "polars-internals-dataframe-groupby-groupby-first"]], "polars.Expr.arccosh": [[255, "polars-expr-arccosh"]], "polars.Expr.arg_sort": [[262, "polars-expr-arg-sort"]], "polars.Expr.arg_true": [[263, "polars-expr-arg-true"]], "polars.Expr.all": [[250, "polars-expr-all"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[223, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.Expr.arg_unique": [[264, "polars-expr-arg-unique"]], "polars.internals.dataframe.groupby.GroupBy.max": [[228, "polars-internals-dataframe-groupby-groupby-max"]], "polars.Expr.alias": [[249, "polars-expr-alias"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[232, "polars-internals-dataframe-groupby-groupby-n-unique"]], "DataFrame": [[241, "dataframe"]], "polars.Expr.arr.arg_max": [[266, "polars-expr-arr-arg-max"]], "polars.DataFrame.var": [[215, "polars-dataframe-var"]], "polars.internals.dataframe.groupby.GroupBy.last": [[227, "polars-internals-dataframe-groupby-groupby-last"]], "polars.DataFrame.vstack": [[216, "polars-dataframe-vstack"]], "polars.DataFrame.unique": [[210, "polars-dataframe-unique"]], "polars.DataFrame.to_numpy": [[205, "polars-dataframe-to-numpy"]], "polars.DataFrame.upsample": [[214, "polars-dataframe-upsample"]], "polars.DataFrame.transpose": [[209, "polars-dataframe-transpose"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[234, "polars-internals-dataframe-groupby-groupby-sum"]], "polars.DataFrame.unnest": [[211, "polars-dataframe-unnest"]], "polars.Expr.agg_groups": [[248, "polars-expr-agg-groups"]], "polars.DataFrame.to_dummies": [[204, "polars-dataframe-to-dummies"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[5, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[6, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[7, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[8, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[9, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[10, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[11, "polars.Config.set_fmt_str_lengths"]], "set_tbl_cell_alignment() (polars.config class method)": [[12, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[13, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[14, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[15, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[16, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[17, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[21, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[22, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[23, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[24, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[25, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[26, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[27, "polars.DataFrame.write_database"]], "write_excel() (polars.dataframe method)": [[28, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[29, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[30, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[31, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[32, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[33, "polars.DataType"]], "__init__() (polars.datatype method)": [[33, "polars.DataType.__init__"]], "date (class in polars)": [[34, "polars.Date"]], "__init__() (polars.date method)": [[34, "polars.Date.__init__"]], "datetime (class in polars)": [[35, "polars.Datetime"]], "__init__() (polars.datetime method)": [[35, "polars.Datetime.__init__"]], "decimal (class in polars)": [[36, "polars.Decimal"]], "__init__() (polars.decimal method)": [[36, "polars.Decimal.__init__"]], "duration (class in polars)": [[37, "polars.Duration"]], "__init__() (polars.duration method)": [[37, "polars.Duration.__init__"]], "float32 (class in polars)": [[38, "polars.Float32"]], "__init__() (polars.float32 method)": [[38, "polars.Float32.__init__"]], "float64 (class in polars)": [[39, "polars.Float64"]], "__init__() (polars.float64 method)": [[39, "polars.Float64.__init__"]], "int16 (class in polars)": [[40, "polars.Int16"]], "__init__() (polars.int16 method)": [[40, "polars.Int16.__init__"]], "int32 (class in polars)": [[41, "polars.Int32"]], "__init__() (polars.int32 method)": [[41, "polars.Int32.__init__"]], "int64 (class in polars)": [[42, "polars.Int64"]], "__init__() (polars.int64 method)": [[42, "polars.Int64.__init__"]], "int8 (class in polars)": [[43, "polars.Int8"]], "__init__() (polars.int8 method)": [[43, "polars.Int8.__init__"]], "list (class in polars)": [[44, "polars.List"]], "__init__() (polars.list method)": [[44, "polars.List.__init__"]], "null (class in polars)": [[45, "polars.Null"]], "__init__() (polars.null method)": [[45, "polars.Null.__init__"]], "object (class in polars)": [[46, "polars.Object"]], "__init__() (polars.object method)": [[46, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[47, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[48, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[49, "polars.SQLContext.register"]], "stringcache (class in polars)": [[50, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[50, "polars.StringCache.__init__"]], "struct (class in polars)": [[51, "polars.Struct"]], "__init__() (polars.struct method)": [[51, "polars.Struct.__init__"]], "time (class in polars)": [[52, "polars.Time"]], "__init__() (polars.time method)": [[52, "polars.Time.__init__"]], "uint16 (class in polars)": [[53, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[53, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[54, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[54, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[55, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[55, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[56, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[56, "polars.UInt8.__init__"]], "unknown (class in polars)": [[57, "polars.Unknown"]], "__init__() (polars.unknown method)": [[57, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[58, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[58, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[59, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[60, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[61, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[62, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[63, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[64, "polars.arg_where"]], "build_info() (in module polars)": [[65, "polars.build_info"]], "collect_all() (in module polars)": [[66, "polars.collect_all"]], "concat() (in module polars)": [[67, "polars.concat"]], "cut() (in module polars)": [[68, "polars.cut"]], "date_range() (in module polars)": [[69, "polars.date_range"]], "arrowerror": [[70, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[71, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[72, "polars.exceptions.ComputeError"]], "duplicateerror": [[73, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[74, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[75, "polars.exceptions.NoDataError"]], "norowsreturned": [[76, "polars.exceptions.NoRowsReturned"]], "panicexception": [[77, "polars.exceptions.PanicException"]], "rowsexception": [[78, "polars.exceptions.RowsException"]], "schemaerror": [[79, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[80, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[81, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[82, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturned": [[83, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[84, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[85, "polars.from_dataframe"]], "from_dict() (in module polars)": [[86, "polars.from_dict"]], "from_dicts() (in module polars)": [[87, "polars.from_dicts"]], "from_numpy() (in module polars)": [[88, "polars.from_numpy"]], "from_pandas() (in module polars)": [[89, "polars.from_pandas"]], "from_records() (in module polars)": [[90, "polars.from_records"]], "get_dummies() (in module polars)": [[91, "polars.get_dummies"]], "get_index_type() (in module polars)": [[92, "polars.get_index_type"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[93, "polars.internals.batched.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[94, "polars.ones"]], "read_avro() (in module polars)": [[95, "polars.read_avro"]], "read_csv() (in module polars)": [[96, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[97, "polars.read_csv_batched"]], "read_database() (in module polars)": [[98, "polars.read_database"]], "read_delta() (in module polars)": [[99, "polars.read_delta"]], "read_excel() (in module polars)": [[100, "polars.read_excel"]], "read_ipc() (in module polars)": [[101, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[102, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[103, "polars.read_json"]], "read_ndjson() (in module polars)": [[104, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[105, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[106, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[107, "polars.scan_csv"]], "scan_delta() (in module polars)": [[108, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[109, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[110, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[111, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[112, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[113, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[114, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[115, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[116, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[116, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[117, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[118, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[119, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[120, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[121, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[122, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[125, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[126, "polars.DataFrame.apply"]], "clear() (polars.dataframe method)": [[127, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[128, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[129, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[130, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[131, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[132, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[133, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[134, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[135, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[136, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[137, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[138, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[139, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[140, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[141, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[142, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[143, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[144, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[145, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[146, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[147, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[148, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[149, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[150, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[151, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[152, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[153, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[154, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[155, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[156, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[157, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[158, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[159, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[160, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[161, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[162, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[163, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[164, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[165, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[166, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[167, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[168, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[169, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[170, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[171, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[172, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[173, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[174, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[175, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[176, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[177, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[178, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[179, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[180, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[181, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[182, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[183, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[184, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[185, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[186, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[187, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[188, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[189, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[190, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[191, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[192, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[193, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[194, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[195, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[196, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[197, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[198, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[199, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[200, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[201, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[202, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[203, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[204, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[205, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[206, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[207, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[208, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[209, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[210, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[211, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[212, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[213, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[214, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[215, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[216, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[217, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[218, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[219, "polars.DataFrame.with_row_count"]], "__iter__() (polars.internals.dataframe.groupby.groupby method)": [[220, "polars.internals.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[221, "polars.internals.dataframe.groupby.GroupBy.agg"]], "all() (polars.internals.dataframe.groupby.groupby method)": [[222, "polars.internals.dataframe.groupby.GroupBy.all"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[223, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[224, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[225, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[226, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[227, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[228, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[229, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[230, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[231, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[232, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[233, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[234, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[235, "polars.internals.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[247, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[248, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[249, "polars.Expr.alias"]], "all() (polars.expr method)": [[250, "polars.Expr.all"]], "any() (polars.expr method)": [[251, "polars.Expr.any"]], "append() (polars.expr method)": [[252, "polars.Expr.append"]], "apply() (polars.expr method)": [[253, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[254, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[255, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[256, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[257, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[258, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[259, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[260, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[261, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[262, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[263, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[264, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[265, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[266, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[267, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[268, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[269, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[270, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[271, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[272, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[273, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[274, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[275, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[276, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[277, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[278, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[279, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[280, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[281, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[282, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[283, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[284, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[285, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[286, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[287, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[288, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[289, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[290, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[291, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[292, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[293, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[294, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[295, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[296, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[297, "polars.Expr.bin.starts_with"]], "cast() (polars.expr method)": [[298, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[299, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[300, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[301, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[302, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[303, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[304, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[305, "polars.Expr.cosh"]], "count() (polars.expr method)": [[306, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[307, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[308, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[309, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[310, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[311, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[312, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[313, "polars.Expr.diff"]], "dot() (polars.expr method)": [[314, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[315, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[316, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[317, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[318, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[319, "polars.Expr.dt.convert_time_zone"]], "day() (polars.expr.dt method)": [[320, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[321, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[322, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[323, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[324, "polars.Expr.dt.hours"]], "iso_year() (polars.expr.dt method)": [[325, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[326, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[327, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[328, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[329, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[330, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[331, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[332, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[333, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[334, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[335, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[336, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[337, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[338, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[339, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[340, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[341, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[342, "polars.Expr.dt.strftime"]], "timestamp() (polars.expr.dt method)": [[343, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[344, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[345, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[346, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[347, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[348, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[349, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[350, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[351, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[352, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[353, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[354, "polars.Expr.exp"]], "explode() (polars.expr method)": [[355, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[356, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[357, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[358, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[359, "polars.Expr.filter"]], "first() (polars.expr method)": [[360, "polars.Expr.first"]], "flatten() (polars.expr method)": [[361, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[362, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[363, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[364, "polars.Expr.hash"]], "head() (polars.expr method)": [[365, "polars.Expr.head"]], "inspect() (polars.expr method)": [[366, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[367, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[368, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[369, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[370, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[371, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[372, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[373, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[374, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[375, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[376, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[377, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[378, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[379, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[380, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[381, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[382, "polars.Expr.last"]], "len() (polars.expr method)": [[383, "polars.Expr.len"]], "limit() (polars.expr method)": [[384, "polars.Expr.limit"]], "list() (polars.expr method)": [[385, "polars.Expr.list"]], "log() (polars.expr method)": [[386, "polars.Expr.log"]], "log10() (polars.expr method)": [[387, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[388, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[389, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[390, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[391, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[392, "polars.Expr.max"]], "mean() (polars.expr method)": [[393, "polars.Expr.mean"]], "median() (polars.expr method)": [[394, "polars.Expr.median"]], "has_multiple_outputs() (polars.expr.meta method)": [[395, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[396, "polars.Expr.meta.is_regex_projection"]], "output_name() (polars.expr.meta method)": [[397, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[398, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[399, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[400, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[401, "polars.Expr.min"]], "mode() (polars.expr method)": [[402, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[403, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[404, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[405, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[406, "polars.Expr.null_count"]], "over() (polars.expr method)": [[407, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[408, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[409, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[410, "polars.Expr.prefix"]], "product() (polars.expr method)": [[411, "polars.Expr.product"]], "quantile() (polars.expr method)": [[412, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[413, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[414, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[415, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[416, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[417, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[418, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[419, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[420, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[421, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[422, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[423, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[424, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[425, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[426, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[427, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[428, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[429, "polars.Expr.round"]], "sample() (polars.expr method)": [[430, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[431, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[432, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[433, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[434, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[435, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[436, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[437, "polars.Expr.sign"]], "sin() (polars.expr method)": [[438, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[439, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[440, "polars.Expr.skew"]], "slice() (polars.expr method)": [[441, "polars.Expr.slice"]], "sort() (polars.expr method)": [[442, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[443, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[444, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[445, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[446, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[447, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[448, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[449, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[450, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[451, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[452, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[453, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[454, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[455, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[456, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[457, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[458, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[459, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[460, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[461, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[462, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[463, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[464, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[465, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[466, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[467, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[468, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[469, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[470, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[471, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[472, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[473, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[474, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[475, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[476, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[477, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[478, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[479, "polars.Expr.sum"]], "tail() (polars.expr method)": [[480, "polars.Expr.tail"]], "take() (polars.expr method)": [[481, "polars.Expr.take"]], "take_every() (polars.expr method)": [[482, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[483, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[484, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[485, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[486, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[487, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[488, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[489, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[490, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[491, "polars.Expr.var"]], "where() (polars.expr method)": [[492, "polars.Expr.where"]], "all() (in module polars)": [[493, "polars.all"]], "any() (in module polars)": [[494, "polars.any"]], "apply() (in module polars)": [[495, "polars.apply"]], "arange() (in module polars)": [[496, "polars.arange"]], "arg_sort_by() (in module polars)": [[497, "polars.arg_sort_by"]], "avg() (in module polars)": [[498, "polars.avg"]], "coalesce() (in module polars)": [[499, "polars.coalesce"]], "col() (in module polars)": [[500, "polars.col"]], "concat_list() (in module polars)": [[501, "polars.concat_list"]], "concat_str() (in module polars)": [[502, "polars.concat_str"]], "corr() (in module polars)": [[503, "polars.corr"]], "count() (in module polars)": [[504, "polars.count"]], "cov() (in module polars)": [[505, "polars.cov"]], "cumfold() (in module polars)": [[506, "polars.cumfold"]], "cumreduce() (in module polars)": [[507, "polars.cumreduce"]], "cumsum() (in module polars)": [[508, "polars.cumsum"]], "date() (in module polars)": [[509, "polars.date"]], "datetime() (in module polars)": [[510, "polars.datetime"]], "duration() (in module polars)": [[511, "polars.duration"]], "element() (in module polars)": [[512, "polars.element"]], "exclude() (in module polars)": [[513, "polars.exclude"]], "first() (in module polars)": [[514, "polars.first"]], "fold() (in module polars)": [[515, "polars.fold"]], "format() (in module polars)": [[516, "polars.format"]], "from_epoch() (in module polars)": [[517, "polars.from_epoch"]], "groups() (in module polars)": [[518, "polars.groups"]], "head() (in module polars)": [[519, "polars.head"]], "list() (in module polars)": [[520, "polars.list"]], "lit() (in module polars)": [[521, "polars.lit"]], "map() (in module polars)": [[522, "polars.map"]], "max() (in module polars)": [[523, "polars.max"]], "mean() (in module polars)": [[524, "polars.mean"]], "median() (in module polars)": [[525, "polars.median"]], "min() (in module polars)": [[526, "polars.min"]], "n_unique() (in module polars)": [[527, "polars.n_unique"]], "pearson_corr() (in module polars)": [[528, "polars.pearson_corr"]], "quantile() (in module polars)": [[529, "polars.quantile"]], "reduce() (in module polars)": [[530, "polars.reduce"]], "repeat() (in module polars)": [[531, "polars.repeat"]], "select() (in module polars)": [[532, "polars.select"]], "spearman_rank_corr() (in module polars)": [[533, "polars.spearman_rank_corr"]], "std() (in module polars)": [[534, "polars.std"]], "struct() (in module polars)": [[535, "polars.struct"]], "sum() (in module polars)": [[536, "polars.sum"]], "tail() (in module polars)": [[537, "polars.tail"]], "var() (in module polars)": [[538, "polars.var"]], "when() (in module polars)": [[539, "polars.when"]], "cache() (polars.lazyframe method)": [[559, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[560, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[561, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[562, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[563, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[564, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[565, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[566, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[567, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[568, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[569, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[570, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[571, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[572, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[573, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[574, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[575, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[576, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[577, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[578, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[579, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[580, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[581, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[582, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[583, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[584, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[585, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[586, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[587, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[588, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[589, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[590, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[591, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[592, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[593, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[594, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[595, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[596, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[597, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[598, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[599, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[600, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[601, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[602, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[603, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[604, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[605, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[606, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[607, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[608, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[609, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[610, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[611, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[612, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[613, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[614, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[615, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[616, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[617, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[618, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[619, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[620, "polars.LazyFrame.write_json"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[621, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.internals.lazyframe.groupby.lazygroupby method)": [[622, "polars.internals.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[623, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.internals.lazyframe.groupby.lazygroupby method)": [[624, "polars.internals.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.internals.lazyframe.groupby.lazygroupby method)": [[625, "polars.internals.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[626, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.internals.lazyframe.groupby.lazygroupby method)": [[627, "polars.internals.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.internals.lazyframe.groupby.lazygroupby method)": [[628, "polars.internals.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.internals.lazyframe.groupby.lazygroupby method)": [[629, "polars.internals.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.internals.lazyframe.groupby.lazygroupby method)": [[630, "polars.internals.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.internals.lazyframe.groupby.lazygroupby method)": [[631, "polars.internals.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.internals.lazyframe.groupby.lazygroupby method)": [[632, "polars.internals.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.internals.lazyframe.groupby.lazygroupby method)": [[633, "polars.internals.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.internals.lazyframe.groupby.lazygroupby method)": [[634, "polars.internals.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[635, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[643, "polars.Series.abs"]], "alias() (polars.series method)": [[644, "polars.Series.alias"]], "all() (polars.series method)": [[645, "polars.Series.all"]], "any() (polars.series method)": [[646, "polars.Series.any"]], "append() (polars.series method)": [[647, "polars.Series.append"]], "apply() (polars.series method)": [[648, "polars.Series.apply"]], "arccos() (polars.series method)": [[649, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[650, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[651, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[652, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[653, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[654, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[655, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[656, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[657, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[658, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[659, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[660, "polars.Series.argsort"]], "arr (polars.series attribute)": [[661, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[662, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[663, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[664, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[665, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[666, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[667, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[668, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[669, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[670, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[671, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[672, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[673, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[674, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[675, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[676, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[677, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[678, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[679, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[680, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[681, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[682, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[683, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[684, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[685, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[686, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[687, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[688, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[689, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[690, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[691, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[692, "polars.Series.bin.starts_with"]], "cast() (polars.series method)": [[693, "polars.Series.cast"]], "cat (polars.series attribute)": [[694, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[695, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[696, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[697, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[698, "polars.Series.clear"]], "clip() (polars.series method)": [[699, "polars.Series.clip"]], "clip_max() (polars.series method)": [[700, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[701, "polars.Series.clip_min"]], "clone() (polars.series method)": [[702, "polars.Series.clone"]], "cos() (polars.series method)": [[703, "polars.Series.cos"]], "cosh() (polars.series method)": [[704, "polars.Series.cosh"]], "cummax() (polars.series method)": [[705, "polars.Series.cummax"]], "cummin() (polars.series method)": [[706, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[707, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[708, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[709, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[710, "polars.Series.cut"]], "describe() (polars.series method)": [[711, "polars.Series.describe"]], "diff() (polars.series method)": [[712, "polars.Series.diff"]], "dot() (polars.series method)": [[713, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[714, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[715, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[716, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[717, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[718, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[719, "polars.Series.dt.convert_time_zone"]], "day() (polars.series.dt method)": [[720, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[721, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[722, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[723, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[724, "polars.Series.dt.hours"]], "iso_year() (polars.series.dt method)": [[725, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[726, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[727, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[728, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[729, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[730, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[731, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[732, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[733, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[734, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[735, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[736, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[737, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[738, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[739, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[740, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[741, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[742, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[743, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[744, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[745, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[746, "polars.Series.dt.strftime"]], "timestamp() (polars.series.dt method)": [[747, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[748, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[749, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[750, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[751, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[752, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[753, "polars.Series.dtype"]], "entropy() (polars.series method)": [[754, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[755, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[756, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[757, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[758, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[759, "polars.Series.exp"]], "explode() (polars.series method)": [[760, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[761, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[762, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[763, "polars.Series.fill_null"]], "filter() (polars.series method)": [[764, "polars.Series.filter"]], "flags (polars.series attribute)": [[765, "polars.Series.flags"]], "floor() (polars.series method)": [[766, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[767, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[768, "polars.Series.has_validity"]], "hash() (polars.series method)": [[769, "polars.Series.hash"]], "head() (polars.series method)": [[770, "polars.Series.head"]], "inner_dtype (polars.series attribute)": [[771, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[772, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[773, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[774, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[775, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[776, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[777, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[778, "polars.Series.is_first"]], "is_float() (polars.series method)": [[779, "polars.Series.is_float"]], "is_in() (polars.series method)": [[780, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[781, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[782, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[783, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[784, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[785, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[786, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[787, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[788, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[789, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[790, "polars.Series.is_utf8"]], "item() (polars.series method)": [[791, "polars.Series.item"]], "kurtosis() (polars.series method)": [[792, "polars.Series.kurtosis"]], "len() (polars.series method)": [[793, "polars.Series.len"]], "limit() (polars.series method)": [[794, "polars.Series.limit"]], "log() (polars.series method)": [[795, "polars.Series.log"]], "log10() (polars.series method)": [[796, "polars.Series.log10"]], "lower_bound() (polars.series method)": [[797, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[798, "polars.Series.map_dict"]], "max() (polars.series method)": [[799, "polars.Series.max"]], "mean() (polars.series method)": [[800, "polars.Series.mean"]], "median() (polars.series method)": [[801, "polars.Series.median"]], "min() (polars.series method)": [[802, "polars.Series.min"]], "mode() (polars.series method)": [[803, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[804, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[805, "polars.Series.n_unique"]], "name (polars.series attribute)": [[806, "polars.Series.name"]], "nan_max() (polars.series method)": [[807, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[808, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[809, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[810, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[811, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[812, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[813, "polars.Series.peak_min"]], "product() (polars.series method)": [[814, "polars.Series.product"]], "quantile() (polars.series method)": [[815, "polars.Series.quantile"]], "rank() (polars.series method)": [[816, "polars.Series.rank"]], "rechunk() (polars.series method)": [[817, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[818, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[819, "polars.Series.rename"]], "reshape() (polars.series method)": [[820, "polars.Series.reshape"]], "reverse() (polars.series method)": [[821, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[822, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[823, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[824, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[825, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[826, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[827, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[828, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[829, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[830, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[831, "polars.Series.rolling_var"]], "round() (polars.series method)": [[832, "polars.Series.round"]], "sample() (polars.series method)": [[833, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[834, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[835, "polars.Series.series_equal"]], "set() (polars.series method)": [[836, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[837, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[838, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[839, "polars.Series.shape"]], "shift() (polars.series method)": [[840, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[841, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[842, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[843, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[844, "polars.Series.shuffle"]], "sign() (polars.series method)": [[845, "polars.Series.sign"]], "sin() (polars.series method)": [[846, "polars.Series.sin"]], "sinh() (polars.series method)": [[847, "polars.Series.sinh"]], "skew() (polars.series method)": [[848, "polars.Series.skew"]], "slice() (polars.series method)": [[849, "polars.Series.slice"]], "sort() (polars.series method)": [[850, "polars.Series.sort"]], "sqrt() (polars.series method)": [[851, "polars.Series.sqrt"]], "std() (polars.series method)": [[852, "polars.Series.std"]], "str (polars.series attribute)": [[853, "polars.Series.str"]], "concat() (polars.series.str method)": [[854, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[855, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[856, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[857, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[858, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[859, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[860, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[861, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[862, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[863, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[864, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[865, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[866, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[867, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[868, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[869, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[870, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[871, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[872, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[873, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[874, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[875, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[876, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[877, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[878, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[879, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[880, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[881, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[882, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[883, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[884, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[885, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[886, "polars.Series.struct.rename_fields"]], "unnest() (polars.series.struct method)": [[887, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[888, "polars.Series.sum"]], "tail() (polars.series method)": [[889, "polars.Series.tail"]], "take() (polars.series method)": [[890, "polars.Series.take"]], "take_every() (polars.series method)": [[891, "polars.Series.take_every"]], "tan() (polars.series method)": [[892, "polars.Series.tan"]], "tanh() (polars.series method)": [[893, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[894, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[895, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[896, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[897, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[898, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[899, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[900, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[901, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[902, "polars.Series.top_k"]], "unique() (polars.series method)": [[903, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[904, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[905, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[906, "polars.Series.value_counts"]], "var() (polars.series method)": [[907, "polars.Series.var"]], "view() (polars.series method)": [[908, "polars.Series.view"]], "zip_with() (polars.series method)": [[909, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[924, "polars.SQLContext"]]}})